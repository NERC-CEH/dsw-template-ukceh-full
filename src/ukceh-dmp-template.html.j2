{# Contradiction warning boxes #}

{# Ch 3 yes collecting data, Ch 5 no not collecting data - need to do reverse #}
{% set createOrCollectEnvironmentalDataPath = [uuids.creatingAndCollectingDataCUuid, uuids.willYourProjectCollectOrCreateResearchDataOrDataRelatedToolsQUuid]|reply_path %}
{% set createOrCollectEnvironmentalDataReply = replies[createOrCollectEnvironmentalDataPath]|reply_str_value %}

{% set datasetsPath = [uuids.preservingAndSharingDataCUuid, uuids.datasetsQUuid]|reply_path %}
{% set datasetsReply = replies[datasetsPath]|reply_str_value %}

{% set modelsPath = [uuids.preservingAndSharingDataCUuid, uuids.modelsQUuid]|reply_path %}
{% set modelsReply = replies[modelsPath]|reply_str_value%}

{% set softwarePath = [uuids.preservingAndSharingDataCUuid, uuids.softwarePackagesQUuid]|reply_path %}
{% set softwareReply = replies[softwarePath]|reply_str_value%}

{% if (createOrCollectEnvironmentalDataReply == uuids.yes_14AUuid) and (datasetsReply == uuids.iWillNotBeProducingAnyDatasetsAsPartOfThisProjectAUuid) and (modelsReply == uuids.iWillNotBeProducingModelsAsPartOfThisProjectAUuid ) and (softwareReply == uuids.iWillNotBeProducingAnySoftwarePackagesAsPartOfThisProjectAUuid) %}
<h6 class = box>
	<span style="color: red;">
	<p><b>Issue preventing DMP submission</b> <br>
	Chapter 3 question 1 you have said your project will collect or create research data, models or other data-related tools 
	but in Chapter 5 you said you are not producing any! </p>
	</span>
</h6>
{% elif(createOrCollectEnvironmentalDataReply == uuids.no_14AUuid) and ((datasetsReply == uuids.specifyAListOfDatasetsYouWillBeProducingAUuid) or (modelsReply == uuids.specifyAListOfModelsYouWillBeProducingAUuid ) or (softwareReply == uuids.specifyAListOfSoftwarePackagesYouWillBeProducingAUuid)) %}
<h6 class = box>
	<span style="color: red;">
	<p><b>Issue preventing DMP submission</b> <br>
	Chapter 3 question 1 you have said your project will not collect or create research data, models or other data-related tools 
	but in Chapter 5 you said you are producing some! </p>
	</span>
</h6>
{% endif %}

{# Software packages #}
{% set otherMeansSoftwarePath = [createOrCollectEnvironmentalDataPath, uuids.yes_14AUuid, uuids.willYouBeGeneratingASoftwarePackageAsPartOfYourProjectQUuid]|reply_path %}
{% set otherMeansSoftwareReply = replies[otherMeansSoftwarePath]|reply_str_value %}

{% if (otherMeansSoftwareReply == uuids.yes_32AUuid and softwareReply == uuids.iWillNotBeProducingAnySoftwarePackagesAsPartOfThisProjectAUuid) %}
<h6 class = box>
	<span style="color: red;">
	<p><b>Issue preventing DMP submission</b> <br>
	Chapter 3 question 1.b.3 you have said your project will create a software package(s)
	but in Chapter 5 question 7 you said you are not producing any! </p>
	</span>
</h6>
{% elif (otherMeansSoftwareReply == uuids.no_31AUuid and softwareReply == uuids.specifyAListOfSoftwarePackagesYouWillBeProducingAUuid) %}
<h6 class = box>
	<span style="color: red;">
	<p><b>Inconsistency warning</b> <br>
	Chapter 3 question 1.b.3  you have said your project will not create a software package(s)
	but in Chapter 5 question 7 you said you are producing a software package! </p>
	</span>
</h6>
{% endif %}


{# Yes to reusing and/or collecting data (chapters 2 and 3) but no not applicable to Q's in Ch 5 #}
{% set workingWithThePhilosophyAsOpenAsPossiblePath = [uuids.preservingAndSharingDataCUuid, uuids.willYouBeWorkingWithThePhilosophyAsOpenAsPossibleForYourDataQUuid]|reply_path %}
{% set workingWithThePhilosophyAsOpenAsPossibleReply = replies[workingWithThePhilosophyAsOpenAsPossiblePath]|reply_str_value %}

{% set funderRequirementToDepositWithRepositoryPath = [uuids.preservingAndSharingDataCUuid, uuids.isThereAFunderRequirementThatAnyOfYourDataAreDepositedWithALongTermRepositoryQUuid]|reply_path %}
{% set funderRequirementToDepositWithRepositoryReply = replies[funderRequirementToDepositWithRepositoryPath]|reply_str_value %}

{% set canAllOfYourDataBecomeCompletelyOpenImmediatelyPath = [uuids.preservingAndSharingDataCUuid, uuids.canAllOfYourDataBecomeCompletelyOpenImmediatelyQUuid]|reply_path %}
{% set canAllOfYourDataBecomeCompletelyOpenImmediatelyReply = replies[canAllOfYourDataBecomeCompletelyOpenImmediatelyPath]|reply_str_value %}

{% set willYourResearchDataBePeerReviewedThroughADataJournalPath = [uuids.preservingAndSharingDataCUuid, uuids.willYourResearchDataBePeerReviewedThroughADataJournalQUuid]|reply_path %}
{% set willYourResearchDataBePeerReviewedThroughADataJournalReply = replies[willYourResearchDataBePeerReviewedThroughADataJournalPath]|reply_str_value %}

{% if (createOrCollectEnvironmentalDataReply == uuids.yes_14AUuid) and ((workingWithThePhilosophyAsOpenAsPossibleReply == uuids.notApplicableNoDataBeingUsedAUuid) or (funderRequirementToDepositWithRepositoryReply == uuids.notApplicableNoDataBeingGeneratedAUuid) or (canAllOfYourDataBecomeCompletelyOpenImmediatelyReply == uuids.notApplicableNoDataBeingUsed_2AUuid) or (willYourResearchDataBePeerReviewedThroughADataJournalReply == uuids.notApplicableNoDataBeingUsed_1AUuid)) %}
<h6 class = box>
	<span style="color: red;">
	<p><b>Issue preventing DMP submission</b> <br>
	Chapter 3 question 1 you have said your project will collect or create research data, models or other data-related tools 
	but in Chapter 5 you said not applicable to a question about your data (one or more of Q's 1 - 4)! </p>
	</span>
</h6>
{% endif %}

{#
If YES to (creating OR reusing data) but NO to processing/analysing --> warning about inconsistency
If NO to (creating AND reusing data) but YES to processing/analysing --> warning about inconsistency
#}
{% set datasetUsedPath = [uuids.reUsingDataCUuid, uuids.willTheProjectUseAnyPreExistingOrThirdPartyDataQUuid]|reply_path %}
{% set datasetUsedReply = replies[datasetUsedPath]|reply_str_value %}

{% set processOrAnalyseDataPath = [uuids.processingAndAnalysingDataCUuid, uuids.willYourProjectProcessOrAnalyseResearchDataQUuid]|reply_path %}
{% set processOrAnalyseDataReply = replies[processOrAnalyseDataPath]|reply_str_value %}

{% if ((createOrCollectEnvironmentalDataReply == uuids.yes_14AUuid) or (datasetUsedReply == uuids.yes_3AUuid)) and (processOrAnalyseDataReply == uuids.no_5_2AUuid) %}
<h6 class = box>
	<span style="color: red;">
	<p><b>Inconsistency warning</b> <br>
	You have said your project will collect or create research (Chapter 3 Q1)  or re-use data (Chapter 2 Q1)
	but in Chapter 4 you said you are not processing any data! </p>
	</span>
</h6>
{% elif ((createOrCollectEnvironmentalDataReply == uuids.no_14AUuid) and (datasetUsedReply == uuids.no_3AUuid)) and (processOrAnalyseDataReply == uuids.yes_5_2AUuid) %}
<h6 class = box>
	<span style="color: red;">
	<p><b>Inconsistency warning</b> <br>
	Chapter 3 question 1 you have said your project will not collect, create research or re-use data
	but in Chapter 4 you said you are processing data! </p>
	</span>
</h6>
{% endif %}


{# Get other scenarios from launch planner task
Warning about inconsistency scenarios:
Chapter 1 asks "What volume of data you will be working with?" (I will change this to "What volume of data will you be working with?") and give 3 choices.
Chapter 2 asks for the size of individual 3rd party datasets. It will be tricky to check for inconsistencies other than perhaps if any one dataset > 1TB but Ch1 said < 1TB?
Chapter 5 asks "Estimate the volume of data you are likely to be depositing with a repository" BUT ONLY IF THE ANSWER IS YES TO "Is there a funder requirement that any of your data are deposited with a long term repository?"
Check would be: If answer in Ch5 says more data than Ch1 = inconsistent
#}



{# Datasets size #}
{% set dataVolumePath = [uuids.projectInformationCUuid, uuids.whatVolumeOfDataYouWillBeWorkingWithQUuid]|reply_path %}
{% set dataVolumeReply = replies[dataVolumePath]|reply_str_value %}

{#
{% if dataVolumeReply == uuids.totalDataVolumeIs1TbAUuid %}
{% elif dataVolumeReply == uuids.totalDataVolumeIsSmallEnoughThatItWontBeAProblemAUuid %}
{% elif dataVolumeReply == uuids.dataVolumeIs100GbBut1TbSoMightCauseAnIssueWithStorageOrCosts_1AUuid %}
{% endif %}
#}

{# datasets re-used #}
{% set datasetUsedPath = [uuids.reUsingDataCUuid, uuids.willTheProjectUseAnyPreExistingOrThirdPartyDataQUuid]|reply_path %}
{% set datasetUsedReply = replies[datasetUsedPath]|reply_str_value %}
{% set datasetUsedListPath = [datasetUsedPath, uuids.yes_3AUuid, uuids.whatExistingDataResourcesWillYouUseQLUuid]|reply_path %}
{% set datasetUsedListReply = replies[datasetUsedListPath]|reply_items %}
{% set datasetUsedApproximateSizeList = [] %}

{% if datasetUsedListReply|length > 0 %}
	{% for itemUuid in datasetUsedListReply%}
		{% set datasetUsedApproximateSizePath = [datasetUsedListPath, itemUuid, uuids.whatIsTheApproximateSizeOfTheDataset_1QUuid]|reply_path %}
		{% set datasetUsedApproximateSizeReply = replies[datasetUsedApproximateSizePath]|reply_str_value %}
		{% set datasetUsedApproximateSizeList = datasetUsedApproximateSizeList.append(datasetUsedApproximateSizeReply) %}
	{% endfor %}
{% endif %}

{# datasets created #}
{% set datasetsPath = [uuids.preservingAndSharingDataCUuid, uuids.datasetsQUuid]|reply_path %}
{% set datasetListPath = [datasetsPath, uuids.specifyAListOfDatasetsYouWillBeProducingAUuid, uuids.listOfDatasetsQLUuid]|reply_path %}	
{% set datasetListReply = replies[datasetListPath]|reply_items %}
{% set datasetApproximateSizeReplyList = [] %}

{% if datasetListReply|length > 0 %}
	{% for itemUuid in datasetListReply%}
		{% set datasetSizePath = [datasetListPath, itemUuid, uuids.whatIsTheApproximateSizeOfTheDatasetQUuid]|reply_path %}
		{% set datasetSizeReply = replies[datasetSizePath]|reply_str_value %}
		{% set datasetApproximateSizeReplyList = datasetApproximateSizeReplyList.append(datasetSizeReply) %}
	{% endfor %}
{% endif%}

{# if any of the answers to re-used data or created data are greater than 1TB or between 0.5 and 1TB then need to flag #}
{% if dataVolumeReply == uuids.totalDataVolumeIsSmallEnoughThatItWontBeAProblemAUuid %}

	{% for size in datasetApproximateSizeReplyList %}
		{% if (size == uuids.greaterThan1TbAUuid or size == uuids.between0_5And1TbAUuid) %}
			<h6 class = box>
				<span style="color: red;">
				<p><b>Inconsistency warning</b> <br>
				Chapter 1 question 14 you have said your project will use a small amount of data, but in chapter 3 you have listed one or more re-used datasets larger than 0.5 TB  </p>
				</span>
			</h6>
		{% endif %}
	{% endfor %}

	{% for reusedSize in datasetUsedApproximateSizeList %}
		{% if (reusedSize == uuids.between0_5And1Tb_1AUuid or reusedSize == uuids.greaterThan1Tb_1AUuid) %}
			<h6 class = box>
				<span style="color: red;">
				<p><b>Inconsistency warning</b> <br>
				Chapter 1 question 14 you have said your project will use a small amount of data, but in chapter 5 you have listed one or more created datasets larger than 0.5 TB  </p>
				</span>
			</h6>
		{% endif %}
	{% endfor %}
{% endif %}

{# if any of the answers to re-used data or created data are greater than 1TB then need to flag #}
{% if dataVolumeReply == uuids.dataVolumeIs100GbBut1TbSoMightCauseAnIssueWithStorageOrCosts_1AUuid %}
	{% for size in datasetApproximateSizeReplyList %}
		{% if size == uuids.greaterThan1TbAUuid %}
			<h6 class = box>
				<span style="color: red;">
				<p><b>Inconsistency warning</b> <br>
				Chapter 1 question 14 you have said your project will use <1 TB of data, but in chapter 3 you have listed one or more re-used datasets larger than 1 TB </p>
				</span>
			</h6>
		{% endif %}
	{% endfor %}

	{% for reusedSize in datasetUsedApproximateSizeList %}
		{% if reusedSize == uuids.greaterThan1Tb_1AUuid %}
			<h6 class = box>
				<span style="color: red;">
				<p><b>Inconsistency warning</b> <br>
				Chapter 1 question 14 you have said your project will use <1 TB of data, but in chapter 5 you have listed one or more created datasets larger than 1 TB </p>
				</span>
			</h6>
		{% endif %}
	{% endfor %}
{% endif %}


{# ---- Summary details ---- #}

{% set projectNamePath = [uuids.projectInformationCUuid, uuids.projectTitleQUuid]|reply_path %}
{% set projectName = replies[projectNamePath]|reply_str_value %}
{% set projectNumberPath = [uuids.projectInformationCUuid, uuids.projectNumberQUuid]|reply_path %}
{% set projectNumber = replies[projectNumberPath]|reply_str_value %}

{% set funderPath = [uuids.projectInformationCUuid, uuids.fundingQLUuid]|reply_path %}
{% set funderReply = replies[funderPath]|reply_items %}
<h4>UKCEH Project</h4> 
<dl>
	<dt>Project name</dt> <dd>{{projectName}}</dd>	
	<dt>Project number</dt> <dd>{{projectNumber}}</dd>
</dl>

{# ---- Document details ---- #}

<h4>Document Details</h4>
<dl>
	<dt>Author</dt>
		<dd><span class="contact-name">{{ ctx.createdBy.firstName }} {{ ctx.createdBy.lastName }}</span> ({{ macros.formatEmail(ctx.createdBy.email) }})</dd>
	<dt>Creation Date</dt>	
		<dd>{{ ctx.createdAt|datetime_format("%B %d, %Y") }}</dd>
	<dt>Based on</dt>
        <dd>{{ ctx.package.name }}, {{ ctx.package.version }} (<span class="package-id"><span class="organization-id">{{ ctx.package.organizationId }}</span>:<span class="km-id">{{ ctx.package.kmId }}</span>:<span class="version">{{ ctx.package.version }}</span></span>)</dd>
	<dt>Description</dt> 
		<dd>
			This Data Management Plan (DMP) summarises the data management tasks and responsibilities in your science project.  
			It is a live document to be updated with content as required and reviewed during the lifetime of the project.
		</dd>
	<dt>Copyright of DMP</dt> 
		<dd>
			UK Centre for Ecology & Hydrology (UKCEH)
		</dd>	
	<dt>Scope of DMP</dt> 
		<dd>
			<em>This Data Management Plan document summarises staff responsibilities, data collection policies, resourcing of data management, data quality, IPR considerations, policies on access to data and data dissemination during the project and arrangements for long-term management of data beyond the project. 
			Necessary details are set out in supplementary documents stored with key project documentation.</em>
		</dd>
	<dt>Policies applicable to data and models in this research</dt> 
		<dd>
			<ul>
				<li><a href="https://www.legislation.gov.uk/ukpga/2018/12/pdfs/ukpga_20180012_en.pdf" target="_blank">Data Protection Act 2018</a>,</li>
				<li><a href="https://gdpr-info.eu/" target="_blank">General Data Protection Regulation (GDPR)</a></li>
				{% if funderReply|length > 0 %}
					{% for itemUuid in funderReply %}
						{% set funderNamePath = [funderPath, itemUuid, uuids.funderQUuid]|reply_path %}
						{% set funderNameReply = replies[funderNamePath]|reply_str_value %}
						{% set funderNameReplySplit = funderNameReply.split("'")[3] %}
						{% if (funderNameReplySplit == "Natural Environment Research Council" or funderNameReplySplit == "NERC") %}
							<li><a href="https://www.ukri.org/about-us/nerc/our-policies-and-standards/nerc-data-policy/" target="_blank">NERC Data Policy</a></li>
						{% else %}
							<li><a href="https://cehacuk.sharepoint.com/sites/research-data-management/SitePages/Data-Policies.aspx" target="_blank">UKCEH guidance on data policy</a></li>
						{% endif %}
					{% endfor %}
				{% endif %}
			</ul>
		</dd>					
</dl>

{# ---- Timeline text ---- #}

<h4 class="newpage">Timeline</h4>
<dl>
	<dt>Before submitting the proposal</dt>
		<dd>
			We will generate an outline DMP based on key aspects of our planned approach.
		</dd>
	<dt>First 3-6 months of project</dt>
		<dd>
			We will update the proposal DMP to fully consider all planned data activities during the project.
		</dd>
	<dt>During the project</dt>
		<dd>
			We will review the DMP regularly (at least annually) and update as necessary to reflect changes.
			Detailed planning will start for the deposit of any datasets identified as of long-term value 6-9 months before project end.
		</dd>	
	<dt>End of project</dt>
		<dd>
			We will review the DMP to confirm that the Preservation Plan has been implemented for each dataset identified as of long-term value.
		</dd>
</dl>

<p>*<i>Datasets can and should be deposited to the EIDC as soon as they are complete. The EIDC will issue a Digital Object Identifier (DOI) and implement any agreed embargo on data access. </i></p>
DOIs issued for datasets archived at the EIDC can be used as a persistent citation reference and link to discover information about the dataset.  
Archiving data at the EIDC (or agreed alternative) will help you meet NERC Data Policy, satisfy the requirements of science journals and UKCEH, 
comply with legal data-sharing obligations under UK law and can ensure their reusability in the future for you and the scientific community as a whole.


{# ---- Section ---- #}
<div class="question">
	<h3 class = "newpager">1. Project Information</h3>
	{% set acronymPath = [uuids.projectInformationCUuid, uuids.projectAcronymOrShortNameQUuid]|reply_path %}
	{% set acronymReply = replies[acronymPath]|reply_str_value %}
	
	{# Abstract #}
	{% set projectAbstractPath = [uuids.projectInformationCUuid, uuids.projectAbstractQUuid]|reply_path %}
	{% set projectAbstractReply = replies[projectAbstractPath]|reply_str_value %}
	{% set projectProposalPath = [uuids.projectInformationCUuid, uuids.linkToAProjectProposalOrAnotherDescriptionOfTheMethodsUsedInTheProjectQUuid]|reply_path %}
	{% set projectProposalReply = replies[projectProposalPath]|reply_str_value %}

	<dl>
		<dt>Project Title</dt>
			<dd>
				{{projectName}}
			</dd>

		{% if acronymReply %}
			<dt>Project Acronym</dt>
			<dd>
				{{acronymReply}}
			</dd>
		{% else %}
			<br>
		{% endif %}
		<dt>Project Abstract</dt> 
			<dd>
				{{projectAbstractReply}}
			</dd>
		<dt>Proposal</dt>
			<dd>
				{% if projectProposalReply %}
					More information on the proposal can be found <a href = {{projectProposalReply}}>here</a>.
				{% else %}	
					<span style="color: red;">{{missingInformationText}}</span></li>
				{% endif%}
			</dd>

	{% set projectStartDatePath = [uuids.projectInformationCUuid, uuids.dateTheProjectWillStartQUuid]|reply_path %}
	{% set projectStartDateReply = replies[projectStartDatePath]|reply_str_value %}
	{% set projectEndDatePath = [uuids.projectInformationCUuid, uuids.dateTheProjectWillEndQUuid]|reply_path %}
	{% set projectEndDateReply = replies[projectEndDatePath]|reply_str_value %}

		<dt>Project Start</dt>
			<dd>
				{{projectStartDateReply}}
			</dd>
		<dt>Project End</dt>
			<dd>
				{{projectEndDateReply}}
			</dd>

		<dt>Funders</dt>
		<dd>
			{% if funderReply|length > 0 %}
				<ul>
					{% for itemUuid in funderReply %}
						{% set funderNamePath = [funderPath, itemUuid, uuids.funderQUuid]|reply_path %}
							{% set funderNameReply = replies[funderNamePath] %}
						
						{% set fundingStatusPath = [funderPath, itemUuid, uuids.fundingStatusQUuid]|reply_path %}
						{% set fundingStatusReply = replies[fundingStatusPath]|reply_str_value %}
						{% set fundingStatusText = 'Unknown' %}
						{% if fundingStatusReply %}
							{% set fundingStatusText = km.entities.answers[fundingStatusReply].label %}
						{% endif %}

						{% set grantPath = [funderPath, itemUuid, uuids.grantNumberQUuid]|reply_path %}
						{% set grantReply = replies[grantPath]|reply_str_value %}
						{% set grantReplyText = "Information not supplied" %}
						{% if grantReply %}
							{% set grantReplyText = grantReply %}
						{% endif %}
						
						{% if fundingStatusReply == uuids.grantedAUuid %}
							<li>{{ funderNameReply.value.value.value }} (status: <span style="color: green;">{{fundingStatusText}}</span>, grant number: {{grantReplyText}})</li>
						{% elif fundingStatusReply == uuids.rejectedAUuid %}
							<li>{{ funderNameReply.value.value.value }} (status: <span style="color: red;">{{fundingStatusText}}</span>, grant number: {{grantReplyText}})</li>
						{% elif fundingStatusReply == uuids.appliedAUuid or fundingStatusReply == uuids.plannedAUuid %}
							<li>{{ funderNameReply.value.value.value }} (status: <span style="color: orange;">{{fundingStatusText}}</span>, grant number: {{grantReplyText}})</li>
						{% else %}
							<li>{{ funderNameReply.value.value.value }} (status: <span style="color: red;">{{fundingStatusText}}</span>, grant number: {{grantReplyText}})</li>
						{% endif %}
						
					{% endfor %}
				</ul>
			{% endif %}
		</dd>

	{# Contributors #}
	{% set contributorsPath = [uuids.projectInformationCUuid, uuids.contributorsQLUuid]|reply_path %}
	{% set contributorsReply = replies[contributorsPath]|reply_items %}

	{% if contributorsReply|length > 0 %} 
		{% set primaryContactList = [] %}
		{% set projectManagerList = [] %}
		{% set dataManagerList = [] %}
		{% set qualityManagerList = [] %}
		{% set researcherList = [] %}

		{% for itemUuid in contributorsReply %}
			{% set contributorNamePath = [contributorsPath, itemUuid, uuids.nameQUuid] | reply_path %}
			{% set contributorNameReply = replies[contributorNamePath] | reply_str_value  %}
			{% set contributorAffiliationPath = [contributorsPath, itemUuid, uuids.affiliationQUuid] | reply_path %}
			{% set contributorAffiliationReply = replies[contributorAffiliationPath] | reply_str_value %}
			{% set contributorRolePath = [contributorsPath, itemUuid, uuids.roleQUuid] | reply_path %}
			{% set contributorRoleReply = replies[contributorRolePath] | reply_items %}

{# 
			{% if contributorNameReply and contributorNameReply.value.value.type == 'IntegrationType' %}				
				{% set link = km.entities.integrations[nameQUuid].itemUrl|replace('${id}', contributorNameReplyReply.value.value.id) %}
				href="{{link}}" target="_blank"{{ contributorNameReply.value.value.value }}
			{% elif contributorNameReply and contributorNameReply.value.value.type == 'PlainType' %}
				<li>{{ contributorNameReply.value.value.value }} </li>   
			{% endif %} 
#}

			{# For each reply, loop through the roles and append the name of contributor to role list #}
			{% for itemUuid in contributorRoleReply %}
				{% if itemUuid == uuids.primaryContactChoiceUuid %}
					{% set primaryContactList = primaryContactList.append(contributorNameReply.split("'")[3] +" ("+contributorAffiliationReply+")") %}
				{% elif itemUuid == uuids.projectManagerChoiceUuid %}
					{% set projectManagerList = projectManagerList.append(contributorNameReply.split("'")[3] +" ("+contributorAffiliationReply+")") %}
				{% elif itemUuid == uuids.dataManagerChoiceUuid %}	
					{% set dataManagerList = dataManagerList.append(contributorNameReply.split("'")[3] +" ("+contributorAffiliationReply+")") %}
				{% elif itemUuid == uuids.qualityManagerChoiceUuid %}
					{% set qualityManagerList = qualityManagerList.append(contributorNameReply.split("'")[3] +" ("+contributorAffiliationReply+")") %}
				{% elif itemUuid == uuids.researcherChoiceUuid %}
					{% set researcherList = researcherList.append(contributorNameReply.split("'")[3] +" ("+contributorAffiliationReply+")") %}
				{% endif %}
			{% endfor %}
		{% endfor %}

		
		{# Reorganise the role lists into a dictionary #}
		{% set roleDict = {
			"primaryContact" : {"headerText" : "Primary contact", 
							"contributorInfo" : primaryContactList},
			"projectManager" : {"headerText" : "Project manager", 
							"contributorInfo" : projectManagerList},
			"dataManager" : {"headerText" : "Data manager", 
							"contributorInfo" : dataManagerList},
			"qualityManager" : {"headerText" : "Quality manager", 
							"contributorInfo" : qualityManagerList},
			"researcher" : {"headerText" : "Researcher", 
							"contributorInfo" : researcherList},			
				} 
		%}

		{# key and .items() are required arguments when looping through a dictionary #}
		{# or python3/jinja will mistake it for a list #}
		{# otherwise the same method, can access values with dict.item or dict["item"] #}
		<dt>Contributors</dt>
			<dd>
				<ul style = "list-style-type:none;">
				{% for key, role in roleDict.items() %}
					<li><b>{{role.headerText}}:</b>
					{% if role.contributorInfo | length > 0 %}
						
						{{role.contributorInfo | join(", ")}}

						</li>
					{% else %}
						<span style="color: red;">{{missingInformationText}}</span></li>
					{% endif %}
				{% endfor %} 	
				</ul>
			</dd>	
	
	{% endif %}

	{# Partners and subcontractors #}

	{% set otherPartnersPath = [uuids.projectInformationCUuid, uuids.otherPartnersQLUuid]|reply_path %}
	{% set otherPartnersReply = replies[otherPartnersPath]|reply_items %}

	{% if otherPartnersReply|length > 0 %} 
		<ul>
		{% for itemUuid in otherPartnersReply %}

			{% set otherPartnersNamePath = [otherPartnersPath, itemUuid, uuids.name_2QUuid]|reply_path %}
				{% set otherPartnersNameReply = replies[otherPartnersNamePath]|reply_str_value %}
			{% set otherPartnersAffiliationPath = [otherPartnersPath, itemUuid, uuids.affiliation_2QUuid]|reply_path %}
				{% set otherPartnersAffiliationReply = replies[otherPartnersAffiliationPath]|reply_str_value %}
			{% set otherPartnersRolePath = [otherPartnersPath, itemUuid, uuids.role_2QUuid]|reply_path %}
				{% set otherPartnersRoleReply = replies[otherPartnersRolePath]|reply_str_value %}

			{% if otherPartnersRole %}
				{% if otherPartnersRoleReply == uuids.externalCollaboratorAUuid %}
					<h4>External Collaborators:</h4> <li>{{otherPartnersNameReply}} ({{otherPartnersAffiliationReply}})</li>
				{% elif otherPartnersRoleReply == uuids.subcontractorAUuid %}
					<h4>Subcontractors:</h4><li>{{otherPartnersNameReply}} ({{otherPartnersAffiliationReply}})</li>
				{% endif %}
			{% endif %}
			
		{% endfor %}
		</ul>
	{% endif %}

	{# Expertise #}

	{% set expertisePath = [uuids.projectInformationCUuid, uuids.willYouRequireSpecialistExpertiseInAdditionToWhatIsUsuallyAvailableQUuid]|reply_path %}
	{% set expertiseReply = replies[expertisePath]|reply_str_value %}
	
	{% if expertiseReply == uuids.noWeHaveAllTheExpertiseWeNeedAUuid %}
		<p>We have all the expertise we need and do not require any additional specialist expertise.</p>
	{% elif expertiseReply == uuids.yesWeWillBeTrainingExistingStaffStudentsAUuid %}
		<p>We will be training existing staff/students to gain the expertise we require.
		{% set whatKindOfTrainingPath = [expertisePath, uuids.whatKindOfTrainingQUuid]|reply_path %}
		{% set whatKindOfTrainingReply = replies[whatKindOfTrainingPath]|reply_str_value %}
		Training provided: ({{whatKindOfTrainingReply}}) 
		</p>
	{% elif expertiseReply == uuids.yesWeWillBeRecruitingNewPeopleWithAdditionalExpertiseAUuid %}
		<p>We will be recruiting new people with additional expertise to get the specialist skills we need.
		{% set whatKindOfExpertisePath = [expertisePath,uuids.yesWeWillBeRecruitingNewPeopleWithAdditionalExpertiseAUuid, uuids.whatKindOfExpertiseQUuid]|reply_path %}
		{% set whatKindOfExpertiseReply = replies[whatKindOfExpertisePath]|reply_str_value %}
		Expertise required: {{whatKindOfExpertiseReply}}
		</p>
	{% endif %}	

	{# Hardware #}
	{% set hardwarePath = [uuids.projectInformationCUuid, uuids.willYouRequireHardwareOrSoftwareInAdditionToWhatIsUsuallyAvailableQUuid]|reply_path %}
	{% set hardwareReply = replies[hardwarePath]|reply_str_value %}

	{% if hardwareReply == uuids.noAUuid %}
		<p>We have all the hardware we need.</p>
	{% elif hardwareReply == uuids.yesAUuid %}
		{% set whatHardwareOrSoftwareWillYouRequirePath = [hardwarePath, uuids.yesAUuid, uuids.whatHardwareOrSoftwareWillYouRequireQUuid]|reply_path %}
		{% set whatHardwareOrSoftwareWillYouRequireReply = replies[whatHardwareOrSoftwareWillYouRequirePath]|reply_str_value %}

		{% set haveYouBudgetedForThisPath = [hardwarePath, uuids.yesAUuid, uuids.haveYouBudgetedForThisQUuid]|reply_path %}
		{% set haveYouBudgetedForThisReply = replies[haveYouBudgetedForThisPath]|reply_str_value %}

		{% if haveYouBudgetedForThisReply == uuids.no_2AUuid %}
			<p>Hardware required but not budgeted for: {{whatHardwareOrSoftwareWillYouRequireReply}}</p>
		{% elif haveYouBudgetedForThisReply == uuids. yes_2AUuid %}
			<p>Hardware required and budgeted for: {{whatHardwareOrSoftwareWillYouRequireReply}}</p>
		{% endif %}
	{% endif %}


	{# Data volume #}
	{% set dataVolumePath = [uuids.projectInformationCUuid, uuids.whatVolumeOfDataYouWillBeWorkingWithQUuid]|reply_path %}
	{% set dataVolumeReply = replies[dataVolumePath]|reply_str_value %}

	{% if dataVolumeReply == uuids.totalDataVolumeIs1TbAUuid %}
		The total volume of this project will collect is >1Tb. 

		{% set storageLimitationsOfDataVolumePath = [dataVolumePath, uuids.totalDataVolumeIs1TbAUuid, uuids.haveYouConsideredTheStorageLimitationsOfWorkingWithThisVolumeOfDataQUuid]|reply_path %}
		{% set storageLimitationsOfDataVolumeReply = replies[storageLimitationsOfDataVolumePath]|reply_str_value %}
		
		{% if storageLimitationsOfDataVolumeReply == uuids.yes_40AUuid %}
			{% set arrangementsToAvoidStorageProblemsPath = [storageLimitationsOfDataVolumePath, uuids.yes_40AUuid, uuids.specifyAnyArrangementsYouHaveMadeToAvoidProblemsQUuid]|reply_path %}
			{% set arrangementsToAvoidStorageProblemsReply = replies[arrangementsToAvoidStorageProblemsPath]|reply_str_value %}
			Arrangements to avoid problems working with this volume of data: {{arrangementsToAvoidStorageProblemsReply}}

		{% elif storageLimitationsOfDataVolumeReply == uuids.no_38AUuid %}
			We haven't yet considered the storage limitations on working with this volume of data.
		{% endif %}

	{% elif dataVolumeReply == uuids.totalDataVolumeIsSmallEnoughThatItWontBeAProblemAUuid %}
		<p>The total volume of data this project will collect is small enough (<1Tb) that it won't be a problem or pose storage constraints.</p> 
	{% elif dataVolumeReply == uuids.dataVolumeIs100GbBut1TbSoMightCauseAnIssueWithStorageOrCosts_1AUuid %}
		<p>Data volume is > 100 GB but < 1 TB so might cause an issue with storage or costs.</p>
	{% endif %}


	</dl>
</div>

{# ---- Section ---- #}

<div class="question">
	<h3>2. Re-using data </h3>
	<h4>2.1 Existing datasets used in this project</h4>	
	{% set datasetUsedPath = [uuids.reUsingDataCUuid, uuids.willTheProjectUseAnyPreExistingOrThirdPartyDataQUuid]|reply_path %}
	{% set datasetUsedReply = replies[datasetUsedPath]|reply_str_value %}


	{% if datasetUsedReply == uuids.no_3AUuid %}
		{% set datasetIntroText = "No third party or existing datasets will used for this project."%}
		{{datasetIntroText}}

	{% elif datasetUsedReply == uuids.yes_3AUuid %}
		{% set areYouAwareOfAnyCostOrLicensingImplicationsForTheExistingDatasetsYouPlanToUsePath = [datasetUsedPath, uuids.yes_3AUuid, uuids.areYouAwareOfAnyCostOrLicensingImplicationsForTheExistingDatasetsYouPlanToUseQUuid]|reply_path %}
		{% set areYouAwareOfAnyCostOrLicensingImplicationsForTheExistingDatasetsYouPlanToUseReply = replies[areYouAwareOfAnyCostOrLicensingImplicationsForTheExistingDatasetsYouPlanToUsePath]|reply_str_value %}
		
		{% if areYouAwareOfAnyCostOrLicensingImplicationsForTheExistingDatasetsYouPlanToUseReply == uuids.no_2_3AUuid %}
			<p style="color:red"> We have not planned or budgeted for any costs of datasets that are brought into the project, such as the purchasing of a license or storing large volumes of data.
		{% elif areYouAwareOfAnyCostOrLicensingImplicationsForTheExistingDatasetsYouPlanToUseReply == uuids.yesWeveCheckedAndThereAreCostAndOrLicensingImplicationsAUuid %}
			We have planned and budgeted for any costs of datasets that are brought into the project, such as the purchasing of a license or storing large volumes of data.
		{% elif areYouAwareOfAnyCostOrLicensingImplicationsForTheExistingDatasetsYouPlanToUseReply == uuids.yes_2_3AUuid %}
			We have checked and there are no cost or licensing implications for datasets brought into this project.
		{% endif %}
		

		{% set datasetIntroText = "Third party or existing datasets that will be used for this project:"%}
		<p>{{datasetIntroText}}</p>

		{% set datasetUsedListPath = [datasetUsedPath, uuids.yes_3AUuid, uuids.whatExistingDataResourcesWillYouUseQLUuid]|reply_path %}
		{% set datasetUsedListReply = replies[datasetUsedListPath]|reply_items %}
		{% if datasetUsedListReply|length > 0 %}
			<ul>
			{% for itemUuid in datasetUsedListReply%}
				{% set datasetUsedTitlePath = [datasetUsedListPath, itemUuid, uuids.datasetOrDatabaseQUuid]|reply_path %}
				{% set datasetUsedTitleReply = replies[datasetUsedTitlePath] %}
				<p><strong>Dataset/Database used title:</strong>
				{% if datasetUsedTitleReply %}
					{{datasetUsedTitleReply.value.value.value}}
				{% else %}
					<span style="color: red;">{{missingInformationText}}</span>
				{% endif %}
				</p>

				{% set datasetUsedDescriptionPath = [datasetUsedListPath, itemUuid, uuids.descriptionOfDataQUuid]|reply_path %}
				{% set datasetUsedDescriptionReply = replies[datasetUsedDescriptionPath]|reply_str_value %}

				<p><strong>Brief description:</strong>
				{% if datasetUsedDescriptionReply %}
					{{datasetUsedDescriptionReply}}
				{% else %}
					<span style="color: red;">{{missingInformationText}}</span>
				{% endif %}
				</p>

				{% set datasetUsedDOIPath = [datasetUsedListPath, itemUuid, uuids.datasetIdentifierQUuid]|reply_path %}
				{% set datasetUsedDOIReply = replies[datasetUsedDOIPath]|reply_str_value %}

				<p><strong>DOI:</strong>
				{% if datasetUsedDOIReply %}
					{{datasetUsedDOIReply}}
				{% else %}
					<span style="color: red;">{{missingInformationText}}</span>
				{% endif %}
				</p>

				{% set datasetUsedAvailabilityPath = [datasetUsedListPath, itemUuid, uuids.whereAreTheDataAvailableQUuid]|reply_path %}
				{% set datasetUsedAvailabilityReply = replies[datasetUsedAvailabilityPath]|reply_items %}
				
				<p><strong>Data are available from: </strong>
				{% set datasetUsedAvailabilityList = [] %}
				{% for itemUuid in datasetUsedAvailabilityReply %}
					{%set datasetUsedAvailabilityList = datasetUsedAvailabilityList.append(km.entities.choices[itemUuid].label)%}
				{% endfor %}

				{% if datasetUsedAvailabilityList| length > 0 %}
					{{datasetUsedAvailabilityList|join(", ")}}
				{% else %}
					<span style="color: red;">{{missingInformationText}}</span>
				{% endif %}
				</p>

				{% set datasetUsedConditionsPath = [datasetUsedListPath, itemUuid, uuids.whatAreTheConditionsOfUseForTheseDataQUuid]|reply_path %}
				{% set datasetUsedConditionsReply = replies[datasetUsedConditionsPath]|reply_str_value %}
				{% if datasetUsedConditionsReply %}
					<p><strong>Conditions of use</strong> {{km.entities.answers[datasetUsedConditionsReply].label}}
					{% if datasetUsedConditionsReply == uuids.itIsAvailableUnderSomeRestrictionsWhichWeWillFollowInOurProjectAUuid %}
						{% set whatConditionsPath = [datasetUsedConditionsPath, uuids.itIsAvailableUnderSomeRestrictionsWhichWeWillFollowInOurProjectAUuid, uuids.whatConditionsQUuid]|reply_path %}
						{% set whatConditionsReply = replies[whatConditionsPath]|reply_str_value %}
						<p style="text-indent: 40px"><strong>What conditions</strong> {{whatConditionsReply}}</p>
					{% endif %}
				{% else %}
					<p><strong>Conditions of use:</strong> <span style="color: red;">{{missingInformationText}}</span>
				{% endif %}	

				{% set datasetUsedIPRPath = [datasetUsedListPath, itemUuid, uuids.whichOrganisationSHoldTheIntellectualPropertyRightsIprToThisDataset_1QUuid]|reply_path %}	
				{% set datasetUsedIPRReply = replies[datasetUsedIPRPath]|reply_str_value %}

				<p><strong>Data owner/IPR:</strong>
				{% if datasetUsedIPRReply%}
					{{datasetUsedIPRReply}}
				{% else %}	
					<span style="color: red;">{{missingInformationText}}</span>
				{% endif %}
				</p>

				{% set datasetUsedFormatPath = [datasetUsedListPath, itemUuid, uuids.doYouKnowInWhatFormatTheDataAreAvailableQUuid]|reply_path %}
				{% set datasetUsedFormatReply = replies[datasetUsedFormatPath]|reply_str_value %}
				{% if datasetUsedFormatReply == uuids.yesAndICanDirectlyUseItAUuid %}
					{% set formatText = "We know the format of this data, it is suitable for our work and we can use it directly." %}
				{% elif datasetUsedFormatReply == uuids.yesButIWillNeedToConvertItToAnotherFormatBeforeUsingAUuid %}
					{% set formatText = "We know the format of this data, it is suitable for our work but we need to convert it to another format before using." %}	
				{% endif %}
				<p>{{formatText}}</p>

				{# Dataset version text generation section #}
				{% set datasetUsedVersionPath = [datasetUsedListPath, itemUuid, uuids.isTheDatasetOrDatabaseVersionedQUuid]|reply_path %}
				{% set datasetUsedVersionReply = replies[datasetUsedVersionPath]|reply_str_value %}

				{# {% set datasetUsedVersionList = [] %} #}
				{% if datasetUsedVersionReply == uuids.no_4AUuid %}
					{% set datasetVersionFinalText = "This dataset is not versioned. " %}
				{% elif datasetUsedVersionReply == uuids.yes_4AUuid %}
					{% set datasetVersionText = "This dataset is versioned. " %}

					{% set datasetUsedVersionUsedPath = [datasetUsedVersionPath, uuids.yes_4AUuid, uuids.whichVersionWillYouUseQUuid]|reply_path %}
					{% set datasetUsedVersionUsedReply = replies[datasetUsedVersionUsedPath]|reply_str_value %}
					{% set datasetUsedVersionUsedText = "We are using the following version: " + datasetUsedVersionUsedReply + " and " %}

					{% set datasetUsedVersionChangePath = [datasetUsedVersionPath, uuids.yes_4AUuid, uuids.willYouChangeVersionIfItUpdatesQUuid]|reply_path %}
					{% set datasetUsedVersionChangeReply = replies[datasetUsedVersionChangePath]|reply_str_value %}
					{% if datasetUsedVersionChangeReply == uuids.willStayWithTheOldVersionAUuid %}
						{# {% set datasetUsedVersionOldPath = [datasetUsedVersionChangePath, uuids.willStayWithTheOldVersionAUuid, uuids.howWillTheOldVersionBeAvailableQUuid]|reply_path %}
						{% set datasetUsedVersionOldReply = replies[datasetUsedVersionOldPath]|reply_str_value %} #}
						{% set datasetUsedVersionChangeText = "we will not change version if the dataset updates. " %} {# , because " +  km.entities.answers[datasetUsedVersionOldReply].label + ". " %} #}
					{% elif datasetUsedVersionChangeReply == uuids.newAnalysesWillBeDoneWithTheNewestVersionAUuid %}
						{% set datasetUsedVersionChangeText = "if the dataset updates new analyses will be done with the newest version. " %}
					{% elif datasetUsedVersionChangeReply == uuids.allAnalysesWillBeReDoneWithTheNewestVersionAUuid %}
						{% set datasetUsedVersionChangeText = "if the dataset updates all analyses will be re-done with the newest version. " %}
					{% endif %}	
					{% set datasetVersionFinalText = datasetVersionText + datasetUsedVersionUsedText + datasetUsedVersionChangeText %}

				{% endif %}	
				<p>{{datasetVersionFinalText}}</p>

				{% set datasetUsedMakeAvailablePath = [datasetUsedListPath, itemUuid, uuids.howWillYouMakeSureTheSameDataWillBeAvailableForOthersToReproduceYourResultsQUuid]|reply_path %}
				{% set datasetUsedMakeAvailableReply = replies[datasetUsedMakeAvailablePath]|reply_str_value %}
				
				{% if datasetUsedMakeAvailableReply == uuids.willNotBeAvailableAUuid %}
					<p><strong>Availability of data version</strong>  <span style="color: red;"> {{km.entities.answers[datasetUsedMakeAvailableReply].label}}</span></p>
				{% elif datasetUsedMakeAvailableReply is none %}
					<p><strong>Availability of data version</strong> <span style="color: red;">{{missingInformationText}}</span></p>
				{% else %}
					<p><strong>Availability of data version</strong> {{km.entities.answers[datasetUsedMakeAvailableReply].label}}</p>
				{% endif %}	

				{% set datasetUsedApproximateSizePath = [datasetUsedListPath, itemUuid, uuids.whatIsTheApproximateSizeOfTheDataset_1QUuid]|reply_path %}
				{% set datasetUsedApproximateSizeReply = replies[datasetUsedApproximateSizePath]|reply_str_value %}
				{% if datasetUsedApproximateSizeReply %}
					<p><strong>Size/Quantity</strong> {{km.entities.answers[datasetUsedApproximateSizeReply].label}}</p>
				{% else %}
					<p><strong>Size/Quantity</strong> <span style="color: red;">{{missingInformationText}}</span></p>
				{% endif %}	
			<hr/>	
			{% endfor %}
			</ul>
		{% endif %}
		
		{# Harmonisation question #}
		{% set datasetHarmonisationPath = [datasetUsedPath, uuids.yes_3AUuid, uuids.doYouNeedToHarmoniseDifferentSourcesOfExistingDataQUuid]|reply_path %}
		{% set datasetHarmonisationReply = replies[datasetHarmonisationPath]|reply_str_value %}
		{% if datasetHarmonisationReply == uuids.no_5AUuid %}
			{% set harmonisationText = "We do not need to harmonise different sources of existing data." %}
			<p>{{harmonisationText}}</p>
		{% elif datasetHarmonisationReply == uuids.yes_5AUuid %}
			{% set datasetShareHarmonisationPath = [datasetHarmonisationPath, uuids.yes_5AUuid, uuids.willYouBeMakingYourHarmonisationResultsAvailableToOthersQUuid]|reply_path %}	
			{% set datasetShareHarmonisationReply = replies[datasetShareHarmonisationPath]|reply_str_value %}
			
			{% if datasetShareHarmonisationReply == uuids.no_6AUuid %}
				{% set harmonisationText = "We need to harmonise different sources of existing data, but we will not make these results available because we have not considered doing this." %}
			{% elif datasetShareHarmonisationReply == uuids.noWeWontBeAbleToMakeTheseResultsAvailableAUuid %}
				{% set harmonisationText = "We will not make these results available, the terms and conditions of the original data prevent us from doing so" %}
			{% elif datasetShareHarmonisationReply == uuids.noTheDataContainSensitiveOrConfidentialInformationAUuid %}
				{% set harmonisationText = "We will not make these results available, the data contain sensitive or confidential information  " %}
			{% elif datasetShareHarmonisationReply == uuids.yes_6AUuid%}
				{% set harmonisationText = "We need to harmonise different sources of existing data, and we will make these results available"  %}
			{% endif %}
			<p>{{harmonisationText}}</p>	
		{% endif %}

		{# Computer readable question #}
		{% set datasetComputerReadablePath = [datasetUsedPath, uuids.yes_3AUuid, uuids.willYouBeUsingDataThatNeedsToBeReMadeComputerReadableFirstQUuid]|reply_path %}
		{% set datasetComputerReadableReply = replies[datasetComputerReadablePath]|reply_str_value %}

		{% if datasetComputerReadableReply == uuids.no_7AUuid %}
			{% set computerReadableText = "We will not be using data that needs to be (re-)made computer readable first." %}
		<p>{{computerReadableText}}</p>
		{% elif datasetComputerReadableReply == uuids.yes_7AUuid %}	
			{% set datasetShareComputerReadablePath = [datasetComputerReadablePath, uuids.yes_7AUuid, uuids.willYouBeMakingTheDataAvailableInComputerReadableFormToOthersQUuid]|reply_path %}
			{% set datasetShareComputerReadableReply = replies[datasetShareComputerReadablePath]|reply_str_value %}
			{% if datasetShareComputerReadableReply == uuids.no_8AUuid %}
				{% set computerReadableText = "We will be using data that needs to be (re-)made computer readable first, but we will not make it available to others." %}
			{% elif datasetShareComputerReadableReply == uuids.yes_8AUuid %}	
				{% set datasetPermissionComputerReadablePath = [datasetShareComputerReadablePath, uuids.yes_8AUuid, uuids.doYouHaveTheLicencePermissionToDoThisQUuid]|reply_path %}
				{% set datasetPermissionComputerReadableReply = replies[datasetPermissionComputerReadablePath]|reply_str_value %}
				{% if datasetPermissionComputerReadableReply == uuids.no_9AUuid %}
					{% set computerReadableText = "We will be using data that needs to be (re-)made computer readable first, we will make it available to others, but we do not have the licensing permission to do this." %}
				{% elif datasetPermissionComputerReadableReply == uuids.yes_9AUuid %}	
					{% set computerReadableText = "We will be using data that needs to be (re-)made computer readable first, we will make it available to others and we have the licensing permission to do this." %}
				{% endif %}
			{% endif %}	
		<p>{{computerReadableText}}</p>	
		{% endif %}
	{% endif %}
</div>	

<div>
	<h4>2.2 Existing models used in this project</h4>
	{# Models section #}
	{% set modelsUsedPath = [uuids.reUsingDataCUuid, uuids.willTheProjectUseAnyPreExistingOrThirdPartyModelsQUuid]|reply_path %}
	{% set modelsUsedReply = replies[modelsUsedPath]|reply_str_value %}
	{% set modelsUsedListPath = [modelsUsedPath, uuids.yes_10AUuid, uuids.whatExistingModelsWillYouUseQLUuid]|reply_path %}
	{% set modelsUsedListReply = replies[modelsUsedListPath]|reply_items %}

	{% if modelsUsedReply == uuids.no_10AUuid %}
		{% set modelsIntroText = "No third party or existing models will used for this project."%}
		{{modelsIntroText}}
	{% elif modelsUsedReply == uuids.yes_10AUuid %}
		{% set modelsIntroText = "Third party or existing models will be used for this project."%}

		{% set modelsLicensingCostPath = [modelsUsedPath, uuids.yes_10AUuid, uuids.areYouAwareOfAnyCostOrLicensingImplicationsForTheExistingModelsYouPlanToUseQUuid]|reply_path %}
		{% set modelsLicensingCostReply = replies [modelsLicensingCostPath] |reply_str_value %}	
		{% if modelsLicensingCostReply == uuids.no_3_2AUuid %}
			{{modelsIntroText}} <p style="color:red"> We have not planned or budgeted for any costs of models that are brought into the project, such as the purchasing of a license or storing large volumes of data.
		{% elif modelsLicensingCostReply == uuids.yesWeveCheckedAndThereAreCostAndOrLicensingImplications_2AUuid%}
			{{modelsIntroText}} We have planned and budgeted for any costs of models that are brought into the project, such as the purchasing of a license or storing large volumes of data.
		{% elif modelsLicensingCostReply == uuids.yes_3_2AUuid %}
			{{modelsIntroText}} We have checked and there are no cost or licensing implications.
		{% endif %}

		
		{{modelCostText}}

		<p>The following third party or existing models will be used for this project:</p>
			{% if modelsUsedListReply|length > 0 %}
			<ul>
			{% for itemUuid in modelsUsedListReply%}
				{% set modelUsedTitlePath = [modelsUsedListPath, itemUuid, uuids.modelQUuid]|reply_path %}
				{% set modelUsedTitleReply = replies[modelUsedTitlePath]|reply_str_value %}
				{% if modelUsedTitleReply %}
					<p><strong>Model used title - </strong>{{modelUsedTitleReply}}</p>
				{% endif %}

				{% set modelUsedDescriptionPath = [modelsUsedListPath, itemUuid, uuids.descriptionOfModelQUuid]|reply_path %}
				{% set modelUsedDescriptionReply = replies[modelUsedDescriptionPath]|reply_str_value %}
				<p><strong>Brief description</strong> {{modelUsedDescriptionReply}}</p>

				{% set modelUsedAvailabilityPath = [modelsUsedListPath, itemUuid, uuids.whereIsThisModelAvailableQUuid]|reply_path %}
				{% set modelUsedAvailabilityReply = replies[modelUsedAvailabilityPath]|reply_items %}
				
				<p><strong>Model is available from: </strong>
				{% set modelUsedAvailabilityList = [] %}
				{% for itemUuid in modelUsedAvailabilityReply %}
					{%set modelUsedAvailabilityList = modelUsedAvailabilityList.append(km.entities.choices[itemUuid].label|replace("From ", "")|capitalize)%}
				{% endfor %}

				{% if modelUsedAvailabilityList| length > 0 %}
					{{modelUsedAvailabilityList|join(", ")}}
				{% else %}
					<span style="color: red;">{{missingInformationText}}</span>
				{% endif %}
				</p>

				{% set modelUsedConditionsPath = [modelsUsedListPath, itemUuid, uuids.whatAreTheConditionsOfUseForThisModelQUuid]|reply_path %}
				{% set modelUsedConditionsReply = replies[modelUsedConditionsPath]|reply_str_value %}
				{% if modelUsedConditionsReply %}
					<p><strong>Conditions of use</strong> {{km.entities.answers[modelUsedConditionsReply].label}}
				{% endif %}	

				{% set modelUsedFormatPath = [modelsUsedListPath, itemUuid, uuids.doYouKnowInWhatFormatOrLanguageTheModelIsAvailableQUuid]|reply_path %}
				{% set modelUsedFormatReply = replies[modelUsedFormatPath]|reply_str_value %}
				{% if modelUsedFormatReply == uuids.iCanDirectlyUseItAUuid %}
					{% set modelFormatText = "We know the format/language of this model, it is suitable for our work and we can use it directly." %}
				{% elif modelUsedFormatReply == uuids.iNeedToConvertItBeforeUsingAUuid %}
					{% set modelFormatText = "We know the format/language of this model, it is suitable for our work but we need to convert it to another format/language before using." %}	
				{% endif %}
				<p>{{modelFormatText}}</p>

				{# Dataset version text generation section #}
				{% set modelUsedVersionPath = [modelsUsedListPath, itemUuid, uuids.isTheModelVersionedQUuid]|reply_path %}
				{% set modelUsedVersionReply = replies[modelUsedVersionPath]|reply_str_value %}

				{# {% set modelUsedVersionList = [] %} #}
				{% if modelUsedVersionReply == uuids.no_11AUuid %}
					{% set modelVersionFinalText = "This model is not versioned. " %}
				{% elif modelUsedVersionReply == uuids.yes_11AUuid %}
					{% set modelVersionText = "This model is versioned. " %}

					{% set modelUsedVersionUsedPath = [modelUsedVersionPath, uuids.yes_11AUuid, uuids.whichVersionWillYouUse_2QUuid]|reply_path %}
					{% set modelUsedVersionUsedReply = replies[modelUsedVersionUsedPath]|reply_str_value %}
					{% set modelUsedVersionUsedText = "We are using the following version: " + modelUsedVersionUsedReply + " and " %}

					{% set modelUsedVersionChangePath = [modelUsedVersionPath, uuids.yes_11AUuid, uuids.willYouChangeVersionIfItUpdates_2QUuid]|reply_path %}
					{% set modelUsedVersionChangeReply = replies[modelUsedVersionChangePath]|reply_str_value %}
				
					{% if modelUsedVersionChangeReply == uuids.willStayWithTheOldVersion_2AUuid %}
						{% set modelUsedVersionChangeText = "we will not change version if the model updates." %} 
					{% elif modelUsedVersionChangeReply == uuids.newAnalysesWillBeDoneWithTheNewVersionAUuid %}
						{% set modelUsedVersionChangeText = "if the model updates we will do new analyses with the newest version." %}
					{% elif modelUsedVersionChangeReply == uuids.allAnalysesWillBeRedoneWithTheNewVersionAUuid %}
						{% set modelUsedVersionChangeText = "if the model updates all analyses will be re-done with the newest version." %} 
					{% endif %}	

					{% set modelVersionFinalText = modelVersionText + modelUsedVersionUsedText + modelUsedVersionChangeText %}
					
				{% endif %}	
				<p>{{modelVersionFinalText}}</p>
				

				{# Do you expect to make changes? #}
				{% set modelUsedChangesPath = [modelsUsedListPath, itemUuid, uuids.doYouExpectToMakeChangesToTheSuppliedModelQUuid]|reply_path %}
				{% set modelUsedChangesReply = replies[modelUsedChangesPath]|reply_str_value %}

				{% if modelUsedChangesReply == uuids.no_12AUuid %}
					{% set modelChangesText = "We do not expect to make changes to the model." %}
					<p>{{modelChangesText}}</p>
				{% elif modelUsedChangesReply == uuids.yes_12AUuid %}
					{% set modelUsedShareChangesPath = [modelUsedChangesPath, uuids.yes_12AUuid, uuids.willYouBeMakingYourRevisedModelAvailableToOthersQUuid]|reply_path %}	
					{% set modelUsedShareChangesReply = replies[modelUsedShareChangesPath]|reply_str_value %}

					{% if modelUsedShareChangesReply == uuids.no_13AUuid %}
						{% set modelChangesText = "We expect to make changes to the model, but we will not make these available to others." %}
					{% elif modelUsedShareChangesReply == uuids.yes_13AUuid %}	
						{% set modelChangesText = "We expect to make changes to the model and we will make these available to others." %}
					{% endif %}	
					<p>{{modelChangesText}}</p>
				{% endif %}	

				{# How will you make sure the model will be available to others? #}
				{% set modelUsedAvailabilityPath = [modelsUsedListPath, itemUuid, uuids.howWillYouMakeSureTheSameModelWillBeAvailableForOthersToReproduceYourResultsQUuid]|reply_path %}
				{% set modelUsedAvailabilityReply = replies[modelUsedAvailabilityPath]|reply_str_value %}

				{% if modelUsedAvailabilityReply == uuids.theProviderKeepsOldVersionsAround_2AUuid %}
					{% set modelUsedAvailabilityText = "This version of the model will be available from the provider, allowing others to reproduce our results." %}
				{% elif modelUsedAvailabilityReply == uuids.iWillKeepACopyAndMakeItAvailableWithMyResults_2AUuid %}
					{% set modelUsedAvailabilityText = "We will make a copy of this version of the model to make it available along with our results, allowing others to reproduce our results." %}
				{% elif modelUsedAvailabilityReply == uuids.itWillBeAvailableBothFromTheProviderAndTogetherWithMyData_2AUuid %}
					{% set modelUsedAvailabilityText = "This version of the model will be available from the provider and we will make this version available along with our results, allowing others to reproduce our results." %}
				{% endif %}
				<p>{{modelUsedAvailabilityText}}</p>

			<hr/>	
			{% endfor %}
			</ul>
		{% endif %}
	{% endif %}	
</div>

{# ---- Section ---- #}

<div class="question">
	<h3>3. Creating and collecting data</h3>

		{# If statement to determine whether project is data or non-data #}
		{% set createOrCollectEnvironmentalDataPath = [uuids.creatingAndCollectingDataCUuid, uuids.willYourProjectCollectOrCreateResearchDataOrDataRelatedToolsQUuid]|reply_path %}
		{% set createOrCollectEnvironmentalDataReply = replies[createOrCollectEnvironmentalDataPath]|reply_str_value %}

		{% if createOrCollectEnvironmentalDataReply == uuids.yes_14AUuid %}
		<p>This project will create or collect environmental research data.</p>

			{% set observationalOrExperimentalPath = [createOrCollectEnvironmentalDataPath, uuids.yes_14AUuid, uuids.willYouBeAcquiringObservationalOrExperimentalDataQUuid]|reply_path %}
			{% set observationalOrExperimentalReply = replies[observationalOrExperimentalPath]|reply_str_value %}

			{% if observationalOrExperimentalReply == uuids.yes_15AUuid %}
			<h4>Observational or experimental data</h4>
			<p> We will acquire observational or experimental data in this project. 

				{% set surveyDesignPath =  [observationalOrExperimentalPath, uuids.yes_15AUuid, uuids.willYouBeImplementingAPreDeterminedOrStandardSurveyExperimentalDesignQUuid]|reply_path %}
				{% set surveyDesignReply = replies[surveyDesignPath]|reply_str_value %}

				{% if surveyDesignReply == uuids.noWeWillUseADesignCreatedSpecificallyForThisProjectAUuid %}
					We will not implement a pre-determined survey/experimental design.
					We will use a design created specifically for this project.
				{% elif surveyDesignReply == uuids.yes_16AUuid %}
					{% set widelyUsedDesignPath = [surveyDesignPath, uuids.yes_16AUuid, uuids.isThisDesignWidelyUsedInYourFieldOfResearchQUuid]|reply_path %}
					{% set widelyUsedDesignReply = replies[widelyUsedDesignPath]|reply_str_value %}
					{% if widelyUsedDesignReply == uuids.yesItIsAStandardDesignAUuid %}
						We will implement a pre-determined survey/experimental design.
						This design is standard in our field of research.
					{% elif widelyUsedDesignReply == uuids.thisIsARelativelyNewButReliableDesignAUuid %}
						We will implement a pre-determined survey/experimental design.
						This design is new to our field of research, but it is reliable.
					{% endif %}
				{% endif %}

				{% set whoWillDoMeasurementsPath = [observationalOrExperimentalPath, uuids.yes_15AUuid, uuids.whoWillDoTheMeasurementsQUuid]|reply_path %}
				{% set whoWillDoMeasurementsReply = replies[whoWillDoMeasurementsPath]|reply_items %}

				{% if whoWillDoMeasurementsReply %}
					<p>Observational or experimental data will be collected by:</p>
					{% for itemUuid in whoWillDoMeasurementsReply %}
						<li>{{ km.entities.choices[itemUuid].label }}</li>
					{% endfor %}
				{% else %}
					<p>We haven't decided who will do the measurements.</p>
				{% endif %}

				{% set usingInstrumentsPath = [observationalOrExperimentalPath, uuids.yes_15AUuid, uuids.willYouBeUsingInstrumentsToCollectDataQUuid]|reply_path %}
				{% set usingInstrumentsReply = replies[usingInstrumentsPath]|reply_str_value %}

				{% if usingInstrumentsReply == uuids.no_16AUuid %}
					<p>We will not be using using any instruments or facilities to collect data.
				{% elif usingInstrumentsReply == uuids.yes_17AUuid %}
					{% set whatInstrumentListPath = [usingInstrumentsPath, uuids.yes_17AUuid, uuids.whatInstrumentsOrFacilitiesWillBeUsedToCollectDataQLUuid]|reply_path %}
					{% set whatInstrumentListReply = replies[whatInstrumentListPath]|reply_items %}
					<p> We will be using the following instruments or facilities:
					{% if whatInstrumentListReply|length > 0 %}
						<ul>
						{% for itemUuid in whatInstrumentListReply %}
							{% set whatInstrumentPath = [whatInstrumentListPath, itemUuid, uuids.instrumentFacilityNameQUuid]|reply_path %}
							{% set whatInstrumentReply = replies[whatInstrumentPath]|reply_str_value %}
							<li> {{whatInstrumentReply}}</li>
						{% endfor %}
						</ul>
					{% endif %}	
				
				
					{# equipment used #}
					{% set isTheEquipmentUsedCompletelyStandardAndWellDescribedPath = [usingInstrumentsPath, uuids.yes_17AUuid, uuids.isTheEquipmentUsedCompletelyStandardAndWellDescribedQUuid]|reply_path %}
					{% set isTheEquipmentUsedCompletelyStandardAndWellDescribedReply = replies[isTheEquipmentUsedCompletelyStandardAndWellDescribedPath]|reply_str_value %}
					{% if isTheEquipmentUsedCompletelyStandardAndWellDescribedReply %}
						The equipment used is {{km.entities.answers[isTheEquipmentUsedCompletelyStandardAndWellDescribedReply].label|lower}}.
					{% endif %}

				{% endif %}

				{# Section on transport of raw data and processing #}
				{% set willYouNeedTransportPath = [observationalOrExperimentalPath, uuids.yes_15AUuid, uuids.willYouNeedToTransferTransportRawDataFromThePlaceItWasCollectedToWhereItWillBeProcessedQUuid]|reply_path %}
				{% set willYouNeedTransportReply = replies[willYouNeedTransportPath]|reply_str_value %}

				{% if willYouNeedTransportReply == uuids.noTransportIsNeededAnalysisIsDoneWhereItIsObtainedAUuid %}
					<p>
						We will not need to transport/transfer raw data from the place it was collected.
						Analysis will be done where it is obtained.
					</p>
				{% elif willYouNeedTransportReply == uuids.yes_18AUuid%}
					<p>
						We will need to transport/transfer raw data from the place it was collected.
						{% set howWillYouTransportPath = [willYouNeedTransportPath, uuids.yes_18AUuid, uuids.howWillTheRawDataBeTransportedQUuid]|reply_path %}
						{% set howWillYouTransportReply = replies[howWillYouTransportPath]|reply_str_value %}

						{% if howWillYouTransportReply == uuids.onPhysicalMediaAUuid %}
							It will be transported on physical media.
							{% set isSufficientStoragePath = [howWillYouTransportPath, uuids.onPhysicalMediaAUuid, uuids.isSufficientWritingAndReadingStorageCapacityAvailableForThePhysicalMediaQUuid]|reply_path %}
							{% set isSufficientStorageReply = replies[isSufficientStoragePath]|reply_str_value %}

							{% if isSufficientStorageReply == uuids.no_17AUuid %}
								We have not checked if sufficient writing and reading storage capacity is available.
							{% elif isSufficientStorageReply == uuids.yes_19AUuid %}
								We have made sure sufficient writing and reading storage capacity is available to do so.	
							{% endif %}
						{% elif howWillYouTransportReply == uuids.viaAPublicNetworkAUuid %}	
							It will be transferred via a public network.
							{% set isSufficientNetworkCapacityPath = [howWillYouTransportPath, uuids.viaAPublicNetworkAUuid, uuids.isSufficientNetworkCapacityAvailableToTransferTheDataQUuid]|reply_path %}
							{% set isSufficientNetworkCapacityReply = replies[isSufficientNetworkCapacityPath]|reply_str_value %}

							{% if isSufficientNetworkCapacityReply == uuids.no_18AUuid %}
								We have not checked if sufficient network capacity is available to transfer data.
							{% elif isSufficientNetworkCapacityReply == uuids.yes_20AUuid %}
								We have made sure sufficient network capacity is available to do so.	
							{% endif %}

						{% elif howWillYouTransportReply == uuids.viaAPrivateConnectionAUuid %}
							It will be transferred via a private connection.
						{% endif %}

						{# Integrity question#}
						{% set dataIntegrityGuaranteedPath = [willYouNeedTransportPath, uuids.yes_18AUuid, uuids.isDataIntegrityGuaranteedDuringThisStageQUuid]|reply_path %}
						{% set dataIntegrityGuaranteedReply = replies[dataIntegrityGuaranteedPath]|reply_str_value %}
						
						{% if dataIntegrityGuaranteedReply == uuids.no_19AUuid %}
							We have no means of identifying whether the raw data has been transferred error free, been tampered with and/or lost, and therefore cannot guarantee data integrity.
						{% elif dataIntegrityGuaranteedReply == uuids.yes_21AUuid %}
							To guarantee data integrity, we have means of identifying whether the raw data has been transferred error free, been tampered with and/or lost.
						{% endif %}

						{# Security question #}
						{% set dataSecurityPath = [willYouNeedTransportPath, uuids.yes_18AUuid, uuids.haveYouConsideredAnySecurityIssuesAtThisStageQUuid]|reply_path %}
						{% set dataSecurityReply = replies[dataSecurityPath]|reply_str_value %}
						
						{% if dataSecurityReply == uuids.no_20AUuid %}
							We have not considered security, and therefore cannot guarantee data will be protected from theft, leaks or irretrievable data loss.
						{% elif dataSecurityReply == uuids.yesWeHaveConsideredAndWontNeedAnySpecificPlansAUuid %}
							We have considered security and we will not need any specific plans.
						{% elif dataSecurityReply == uuids.yesWeHaveConsideredThisAndHaveAPlanInPlaceAUuid %}	
							We have considered security and we have a plan in place.
						{% endif %}						
					</p>
				{% endif%}

				{# Quality control section #}
				{% set qualityControlPath = [observationalOrExperimentalPath, uuids.yes_15AUuid, uuids.willYouBeUsingQualityControlProcessesQUuid]|reply_path %}
				{% set qualityControlReply = replies[qualityControlPath]|reply_str_value %}

				{% if qualityControlReply == uuids.no_21AUuid %}
				<p>
					We will not be using a quality control process.
				</p>	
				{% elif qualityControlReply == uuids.yes_22AUuid %}
				<p>
					We will be using a quality control process:
					<ul>
						{% set calibratingMeasurementsPath = [qualityControlPath, uuids.yes_22AUuid, uuids.areYouCalibratingMeasurementsQUuid]|reply_path %}
						{% set calibratingMeasurementsReply = replies[calibratingMeasurementsPath]|reply_str_value %}

						{% if calibratingMeasurementsReply == uuids.no_22AUuid %}
							<li>Not calibrating measurements</li>
						{% elif calibratingMeasurementsReply == uuids.yes_23AUuid %}
							<li>Calibrating measurements</li>
						{% endif %}

						{% set repeatSamplesMeasurementsPath = [qualityControlPath, uuids.yes_22AUuid, uuids.areYouRunningRepeatSamplesOrAreYouRepeatingMeasurementsQUuid]|reply_path %}
						{% set repeatSamplesMeasurementsReply = replies[repeatSamplesMeasurementsPath]|reply_str_value %}
						
						{% if repeatSamplesMeasurementsReply == uuids.no_23AUuid %}
							<li>Not running repeat samples or repeating measurements</li>
						{% elif repeatSamplesMeasurementsReply == uuids.yes_24AUuid %}
							<li>Running repeat samples or repeating measurements</li>
						{% endif %}

						{% set standardDataCaptureMeasurementsPath = [qualityControlPath, uuids.yes_22AUuid, uuids.areYouFollowingStandardOrDescribedDataCaptureMethodsCommonlyUsedInYourFieldQUuid]|reply_path %}
						{% set standardDataCaptureMeasurementsReply = replies[standardDataCaptureMeasurementsPath]|reply_str_value %}
						
						{% if standardDataCaptureMeasurementsReply == uuids.no_24AUuid %}
							<li>Not using standard or described data capture methods commonly used in our field</li>
						{% elif standardDataCaptureMeasurementsReply == uuids.yes_25AUuid %}
							<li>Using standard or described data capture methods commonly used in our field</li>
						{% endif %}

						{% set validatingMeasurementsPath = [qualityControlPath, uuids.yes_22AUuid, uuids.willDataBePeerReviewedDuringOrUponCollectionQUuid]|reply_path %}
						{% set validatingMeasurementsReply = replies[validatingMeasurementsPath]|reply_str_value %}
						
						{% if validatingMeasurementsReply == uuids.no_26AUuid %}
							<li>No process to validate or check during or upon collection before further analysis</li>
						{% elif validatingMeasurementsReply == uuids.yes_27AUuid %}
							<li>Processes to validate or check during or upon collection before further analysis</li>
						{% endif %}

						{% set automatedDataEntryMeasurementsPath = [qualityControlPath, uuids.yes_22AUuid, uuids.areYouDoingDataEntryValidationQUuid]|reply_path %}
						{% set automatedDataEntryMeasurementsReply = replies[automatedDataEntryMeasurementsPath]|reply_str_value %}
						
						{% if automatedDataEntryMeasurementsReply == uuids.no_25AUuid %}
							<li>No process to automatically test data for correctness when recording/entering into a database</li>
						{% elif automatedDataEntryMeasurementsReply == uuids.yes_26AUuid %}
							<li>Processes to automatically test data for correctness when recording/entering into a database</li>
						{% endif %}

						{% set controlledVocabulariesMeasurementsPath = [qualityControlPath, uuids.yes_22AUuid, uuids.areYouUsingControlledVocabulariesQUuid]|reply_path %}
						{% set controlledVocabulariesMeasurementsReply = replies[controlledVocabulariesMeasurementsPath]|reply_str_value %}
						
						{% if controlledVocabulariesMeasurementsReply == uuids.no_27AUuid %}
							<li>Not using controlled vocabularies</li>
						{% elif controlledVocabulariesMeasurementsReply == uuids.yes_28AUuid %}
							<li>Using controlled vocabularies</li>
						{% endif %}

						{% set anyOtherMeasurementsPath = [qualityControlPath, uuids.yes_22AUuid, uuids.areYouUsingAnyOtherQualityProcessesQUuid]|reply_path %}
						{% set anyOtherMeasurementsReply = replies[anyOtherMeasurementsPath]|reply_str_value %}
						
						{% if anyOtherMeasurementsReply == uuids.yes_29AUuid %}
							{% set whatOtherMeasurementsPath = [anyOtherMeasurementsPath, uuids.yes_29AUuid, uuids.whatOtherQualityProcessesDoYouUseQUuid]|reply_path %}
							{% set whatOtherMeasurementsReply = replies[whatOtherMeasurementsPath]|reply_str_value %}
							<li>{{whatOtherMeasurementsReply}}</li>
						{% endif %}	
					</ul>
				</p>
				{% endif %}

				{# Question on interest  #}
				{% set interestInDataPath = [observationalOrExperimentalPath, uuids.yes_15AUuid, uuids.whoElseCouldBeInterestedInUsingTheseDataQUuid]|reply_path %}
				{% set interestInDataReply = replies[interestInDataPath]|reply_str_value %}

				<p>
					{% if interestInDataReply == uuids.justUsAUuid %}
						We are the only ones interested in this data, and therefore do not need a plan to publish our data.
					{% elif interestInDataReply == uuids.otherResearchersWorkingInTheSameFieldOfResearchAUuid %}
						Other researchers in our field could be interested in our data, and therefore we need a plan to publish our data.
					{% elif interestInDataReply == uuids.aWideRangeOfResearchersAUuid %}
						A wide range of researchers could be interested in our data, and therefore we need a plan to publish our data.
					{% endif %}
				</p>				

				{# Question on formal ownership #}
				{% set formalOwnershipDataPath = [observationalOrExperimentalPath, uuids.yes_15AUuid, uuids.hasFormalOwnershipOfTheDataBeenEstablishedQUuid]|reply_path %}
				{% set formalOwnershipDataReply = replies[formalOwnershipDataPath]|reply_str_value %}

				<p>
					The Intellectual Property Rights (IPR) are held
					{% if formalOwnershipDataReply == uuids.theProjectFunderHoldsTheIprAUuid %}
						by the funder.
					{% elif formalOwnershipDataReply == uuids.thePartyMeasuringTheDataOwnsItAUuid %}
						by the organisation measuring the data.
					{% elif formalOwnershipDataReply == uuids.theOrganisationOfThePrincipalInvestigatorHoldsTheIprAUuid %}
						by the organisation of the Principal Investigator.
					{% elif formalOwnershipDataReply == uuids.theProjectPartnersAcquireFullOwnershipAUuid %}
						by the project partners.
					{% elif formalOwnershipDataReply == uuids.weHaveMadeOtherArrangementsAUuid %}
						through the following arrangments:
						{% set whatOtherArrangementsDataPath = [formalOwnershipDataPath, uuids.weHaveMadeOtherArrangementsAUuid, uuids.whatOtherArrangementsQUuid]|reply_path %}
						{% set whatOtherArrangementsDataReply = replies[whatOtherArrangementsDataPath]|reply_str_value %}
						{{whatOtherArrangementsDataReply}}
					{% endif %}
				</p>				

			</p>		
			{% endif %}

			{# Other means such as modelling #}
			{% set otherMeansModellingPath = [createOrCollectEnvironmentalDataPath, uuids.yes_14AUuid, uuids.willYouBeGeneratingNewDatasetsByOtherMeansSuchAsModellingQUuid]|reply_path %}
			{% set otherMeansModellingReply = replies[otherMeansModellingPath]|reply_str_value %}
		
			{% if otherMeansModellingReply == uuids.yes_30AUuid %}
				{% set whichModelsForNewDatasetsPath = [otherMeansModellingPath, uuids.yes_30AUuid, uuids.whichModelSWillBeUsedToGenerateNewDatasetsQUuid]|reply_path %}
				{% set whichModelsForNewDatasetsReply = replies[whichModelsForNewDatasetsPath]|reply_items %}
				
				{% if whichModelsForNewDatasetsReply %}
					<p>We will use the following to generate new datasets:</p>
					{% for itemUuid in whichModelsForNewDatasetsReply %}
						<li>{{ km.entities.choices[itemUuid].label }}</li>
					{% endfor %}
				{% endif %}

				{# Will model output be made available to others #}
				{% set availableToOthersModelPath = [otherMeansModellingPath, uuids.yes_30AUuid, uuids.willTheModelOutputBeMadeAvailableToOthersQUuid]|reply_path %}
				{% set availableToOthersModelReply = replies[availableToOthersModelPath]|reply_str_value %}
				
				{% if availableToOthersModelReply == uuids.no_30AUuid %}
					<p>
						We will not make the model output available to others.
						{% set whyNotAvailableToOthersModelPath = [availableToOthersModelPath, uuids.no_30AUuid, uuids.whyQUuid]|reply_path %}
						{% set whyNotAvailableToOthersModelReply = replies[whyNotAvailableToOthersModelPath]|reply_str_value %}
						{{ km.entities.answers[whyNotAvailableToOthersModelReply].label }}
					</p>
				{% elif availableToOthersModelReply == uuids.yes_31AUuid %}
					<p>We will make the model output available to others.</p>
				{% endif %}

				{# Who else could be interested in using these data #}
				{% set interestInModelOutputPath = [otherMeansModellingPath, uuids.yes_30AUuid, uuids.whoElseCouldBeInterestedInUsingTheseData_2QUuid]|reply_path %}
				{% set interestInModelOutputReply = replies[interestInModelOutputPath]|reply_str_value %}

				<p>
					{% if interestInModelOutputReply == uuids.justUs_2AUuid %}
						We are the only ones interested in this model output, and therefore do not need a plan to publish our data.
					{% elif interestInModelOutputReply == uuids.otherResearchersWorkingInTheSameFieldOfResearch_2AUuid %}
						Other researchers in our field could be interested in our model output, and therefore we need a plan to publish our data.
					{% elif interestInModelOutputReply == uuids.aWideRangeOfResearchers_2AUuid %}
						A wide range of researchers could be interested in our model output, and therefore we need a plan to publish our data.
					{% endif %}
				</p>	
			{% endif %}

			{# Software packages #}
			{% set otherMeansSoftwarePath = [createOrCollectEnvironmentalDataPath, uuids.yes_14AUuid, uuids.willYouBeGeneratingASoftwarePackageAsPartOfYourProjectQUuid]|reply_path %}
			{% set otherMeansSoftwareReply = replies[otherMeansSoftwarePath]|reply_str_value %}

			{% if otherMeansSoftwareReply == uuids.yes_32AUuid %}
				<h4>Software packages</h4>
				<p>We will produce a software package as part of this project.</p>
			{% endif %}

			{# Information products #}
			{% set otherMeansInformationProductPath = [createOrCollectEnvironmentalDataPath, uuids.yes_14AUuid, uuids.willYouBeGeneratingADataInformationProductAsPartOfYourProjectQUuid]|reply_path %}
			{% set otherMeansInformationProductReply = replies[otherMeansInformationProductPath]|reply_str_value %}

			{% if otherMeansInformationProductReply == uuids.yes_33AUuid %}
				<h4>Information products</h4>
				<p>We will produce an information product as part of this project.</p>
			{% endif %}

			{# Data by other methods #}
			{% set dataByOtherMethodsPath = [createOrCollectEnvironmentalDataPath, uuids.yes_14AUuid, uuids.willYouBeGeneratingDataByOtherMethodsQUuid]|reply_path %}
			{% set dataByOtherMethodsReply = replies[dataByOtherMethodsPath]|reply_str_value %}

			{% if dataByOtherMethodsReply == uuids.yes_34AUuid %}
				<h4>Other data types</h4>
				{% set typeOfDataCollectingPath = [dataByOtherMethodsPath, uuids.yes_34AUuid, uuids.whatTypeOfDataWillYouBeCollectingQUuid]|reply_path %}
				{% set typeOfDataCollectingReply = replies[typeOfDataCollectingPath]|reply_items %}

				{% if typeOfDataCollectingReply %}
					<p>
						Type of data collected:
						<ul>
							{% for itemUuid in typeOfDataCollectingReply %}
								<li>{{ km.entities.choices[itemUuid].label }}</li>
							{% endfor %}
						</ul>
					</p>
				{% endif %}

				{# How will the data be captured #}
				{% set howWillTheDataBeCapturedOtherMethodsPath = [dataByOtherMethodsPath, uuids.yes_34AUuid, uuids.howWillTheDataBeCapturedQUuid]|reply_path %}
				{% set howWillTheDataBeCapturedOtherMethodsReply = replies[howWillTheDataBeCapturedOtherMethodsPath]|reply_str_value %}

				<p>
					{% if howWillTheDataBeCapturedOtherMethodsReply == uuids.allImmediatelyInDigitalFormAUuid %}
						Data will be captured immediately in digital form.
					{% elif howWillTheDataBeCapturedOtherMethodsReply == uuids.dataWillFirstBeCapturedOnPaperAUuid %}
						Data will be captured on paper first
						{% set whoWillDoDataEntryPath = [howWillTheDataBeCapturedOtherMethodsPath, uuids.dataWillFirstBeCapturedOnPaperAUuid, uuids.whoWillDoTheDataEntryQUuid]|reply_path %}
						{% set whoWillDoDataEntryReply = replies[whoWillDoDataEntryPath]|reply_str_value %}

						{% if whoWillDoDataEntryReply == uuids.aSpecialisedTeamAUuid %}
							by a specialised team.
						{% elif whoWillDoDataEntryReply == uuids.memberSOfTheProjectTeamAUuid %}
							by a member of the project team.
						{% elif whoWillDoDataEntryReply == uuids.weHaveMadeOtherArrangements_3AUuid %}
							{% set otherArrangementsDataEntryPath = [whoWillDoDataEntryPath, uuids.weHaveMadeOtherArrangements_3AUuid, uuids.whatOtherArrangements_3QUuid]|reply_path %}
							{% set otherArrangementsDataEntryReply = replies[otherArrangementsDataEntryPath]|reply_str_value %}
							through the following arrangements: {{otherArrangementsDataEntryReply}}
						{% endif %}

						{% set whoWillDigitisePath = [howWillTheDataBeCapturedOtherMethodsPath, uuids.dataWillFirstBeCapturedOnPaperAUuid, uuids.haveYouArrangedWhoWillMakeTheDataDigitallyAvailableToYouQUuid]|reply_path %}
						{% set whoWillDigitiseReply = replies[whoWillDigitisePath]|reply_str_value %}
						
						{% if whoWillDigitiseReply == uuids.notYetAUuid %}
							We have not yet arranged who will make the data digitally available to us.
						{% elif whoWillDigitiseReply == uuids.yes_35AUuid %}
							We have arranged who will make the data digitally available to us.
						{% endif %}
					{% endif %}
				</p>

				{# Will all data be collected by a single person #}
				{% set whoIsCollectingDataPath = [dataByOtherMethodsPath, uuids.yes_34AUuid, uuids.willAllDataBeCollectedByASinglePersonQUuid]|reply_path %}
				{% set whoIsCollectingDataReply = replies[whoIsCollectingDataPath]|reply_str_value %}
				
				<p>
				{% if whoIsCollectingDataReply == uuids.theDataWillBeCollectedByOnePersonAUuid %}
					The dataset is collected by one person.
				{% elif whoIsCollectingDataReply == uuids.morePeopleWillCaptureDataAUuid %}
					The data is collected by more than one person.	
					{% set differentInterpretationPath = [whoIsCollectingDataPath, uuids.morePeopleWillCaptureDataAUuid, uuids.isThereARiskOfDifferentInterpretationsQUuid]|reply_path %}
					{% set differentInterpretationReply = replies[differentInterpretationPath]|reply_str_value %}

					{% if differentInterpretationReply == uuids.dataCaptureIsObjectiveAUuid %}
						There is no risk of different interpretations, as data capture is objective.
					{% elif differentInterpretationReply == uuids.thereAreInternalControlsToDealWithInterpretationDifferencesAUuid%}
						There is some risk of different interpretations, but there are internal controls to deal with this.
					{% elif differentInterpretationReply == uuids.weAcceptTheRiskOfDifferentInterpretationsAUuid %}
						We accept the risk of different interpretations.
					{% elif differentInterpretationReply == uuids.weDoValidationAfterwardsAUuid %}
						There is some risk of different interpretations, but we will conduct a validation afterwards.
					{% elif differentInterpretationReply == uuids.weHaveMadeOtherArrangements_4AUuid %}
						We have the following arrangements in place to mitigate the risk of different interpretations:
						{% set whatOtherArrangementsCollectingDataPath = [differentInterpretationPath, uuids.weHaveMadeOtherArrangements_4AUuid, uuids.whatOtherArrangements_4QUuid]|reply_path %}
						{% set whatOtherArrangementsCollectingDataReply = replies[whatOtherArrangementsCollectingDataPath]|reply_str_value %}
						{{whatOtherArrangementsCollectingDataReply}}
					{% endif %}	
				{% endif %}	
				</p>
			{% endif %}

			{# Physical collections #}
			{% set physicalSamplesPath = [createOrCollectEnvironmentalDataPath, uuids.yes_14AUuid, uuids.willYouBeStoringPhysicalSamplesQUuid]|reply_path %}
			{% set physicalSamplesReply = replies[physicalSamplesPath]|reply_str_value %}

			{% if physicalSamplesReply == uuids.yes_41AUuid %}
				<h4>Physical samples</h4>
				<p>
					We will be storing physical samples.

				{# How will physical samples be identified #}
				{% set identificationPhysicalSamplesPath = [physicalSamplesPath, uuids.yes_41AUuid, uuids.howWillTheSamplesAndAnyRecordsDerivedFromThemBeIdentifiedQUuid]|reply_path %}
				{% set identificationPhysicalSamplesReply = replies[identificationPhysicalSamplesPath]|reply_str_value %}
				
				{% if identificationPhysicalSamplesReply|length > 0 %}
					{{km.entities.answers[identificationPhysicalSamplesReply].label}}.

					{% if identificationPhysicalSamplesReply == uuids.samplesWillGetAnInternalCodeAUuid %}
						{% set fullyDocumentedPhysicalSamplesPath = [identificationPhysicalSamplesPath, uuids.samplesWillGetAnInternalCodeAUuid, uuids.isTheCodeFullyDocumentedQUuid]|reply_path %}
						{% set fullyDocumentedPhysicalSamplesReply = replies[fullyDocumentedPhysicalSamplesPath]|reply_str_value %}

						{% if fullyDocumentedPhysicalSamplesReply == uuids.no_4_2AUuid %}
							which is not fully documented.
						{% elif fullyDocumentedPhysicalSamplesReply == uuids.yes_4_2AUuid %}
							which is fully documented.
						{% endif %}

					{% endif %}	
				{% endif %}
				</p>

				{% set physicalSamplesWherePath = [physicalSamplesPath, uuids.yes_41AUuid, uuids.whereWillTheSamplesBeStoredQLUuid]|reply_path %}
				{% set physicalSamplesWhereReply = replies[physicalSamplesWherePath]|reply_items %}
				
				{% if physicalSamplesWhereReply|length > 0 %}
					The place(s) of storage are:
					<ul>
					{% for itemUuid in physicalSamplesWhereReply %}
						<li>
							{% set storagePlacePath = [physicalSamplesWherePath, itemUuid, uuids.placeOfStorageQUuid]|reply_path %}
							{% set storagePlaceReply = replies[storagePlacePath]|reply_str_value %}

							{% if storagePlaceReply %}
								{{storagePlaceReply}}.
							{% endif %}

							{% set storagePermissionsFundsPath = [physicalSamplesWherePath, itemUuid, uuids.doYouHaveTheRequiredPermissionsAndFundsToAccessThePlaceOfStorageQUuid]|reply_path %}
							{% set storagePermissionsFundsReply = replies[storagePermissionsFundsPath]|reply_str_value %}

							{% if storagePermissionsFundsReply == uuids.no_40AUuid %}
								We don't currently have the permissions and funds to access the place of storage for the project samples.
							{% elif storagePermissionsFundsReply == uuids.yes_42AUuid %}	
								We have the permissions and funds to access the place of storage for the project samples.
							{% endif %}
						</li>
					{% endfor %}
					</ul>
				{% endif %}

				{# Question on health and safety measures #}
				{% set healthAndSafetyPhysicalSamplesPath = [physicalSamplesPath, uuids.yes_41AUuid, uuids.doesTheStoragePreservationAndOrManagementOfTheSamplesRequireHealthAndSafetyMeasuresQUuid]|reply_path %}
				{% set healthAndSafetyPhysicalSamplesReply = replies[healthAndSafetyPhysicalSamplesPath]|reply_str_value %}
				
				<p>
					{% if healthAndSafetyPhysicalSamplesReply == uuids.no_41AUuid %}
						The storage, preservation or management of the physical samples does not require health and safety measures.
					{% elif healthAndSafetyPhysicalSamplesReply == uuids.yes_43AUuid %}
						The storage, preservation or management of the physical samples requires health and safety measures,

						{% set riskAssessmentPhysicalSamplesPath = [healthAndSafetyPhysicalSamplesPath, uuids.yes_43AUuid, uuids.willYouCompleteARiskAssessmentQUuid]|reply_path %}
						{% set riskAssessmentPhysicalSamplesReply = replies[riskAssessmentPhysicalSamplesPath]|reply_str_value %}
						
						{% if riskAssessmentPhysicalSamplesReply == uuids.no_42AUuid %}
							but we will not complete a risk assessment for this.
						{% elif riskAssessmentPhysicalSamplesReply == uuids.yes_44AUuid %}
							and we will complete a risk assessment for this.
						{% endif %}
					{% endif %}
				</p>
			{% endif %}

			{# Data formats #}
			{% set dataFormatsPath = [createOrCollectEnvironmentalDataPath, uuids.yes_14AUuid, uuids.whatDataFormatsWillYouBeUsingQLUuid]|reply_path %}
			{% set dataFormatsReply = replies[dataFormatsPath]|reply_items %}

			{% if dataFormatsReply|length > 0 %}
			<h4>Data formats and volume</h4>
			<p>The data produced by this project will be in the following format(s):</p>	
				{% for itemUuid in dataFormatsReply %}
					{% set dataFormatPath = [dataFormatsPath, itemUuid, uuids.dataFormatQUuid]|reply_path %}
					{% set dataFormatReply = replies[dataFormatPath] %}
					{% set dataFormatArchivingPath = [dataFormatsPath, itemUuid, uuids.doesThisDataFormatEnableSharingAndLongTermArchivingQUuid]|reply_path %}
					{% set dataFormatArchivingReply = replies[dataFormatArchivingPath]|reply_str_value %}
					
					{% if dataFormatReply %}
						{% if dataFormatArchivingReply == uuids.no_35AUuid %}
							{% set formatConversionPath = [dataFormatArchivingPath, uuids.no_35AUuid, uuids.willYouConvertToAFileFormatMoreSuitableForArchivingLaterQUuid]|reply_path %}
							{% set formatConversionReply = replies[formatConversionPath]|reply_str_value %}

							{% set dataFormatArchiving = 'this format does not enable sharing and long-term archiving' %}
							
							{% if formatConversionReply %}
								{% if formatConversionReply == uuids.no_36AUuid %}
									{% set formatConversion = 'and we have not made any plans to convert to another more suitable one, which restrict the availablity to users' %}
								{% elif formatConversionReply == uuids.yes_37AUuid %}
									{% set formatConversion = 'but we plan to convert to a more suitable format before making it available' %}
								{% endif %}
								<li>{{ dataFormatReply.value.value.value }} ({{ dataFormatArchiving }} {{ formatConversion }})</li>
							{% else %}
								<li>{{ dataFormatReply.value.value.value }} ({{ dataFormatArchiving }})</li>
							{% endif %}

						{% elif dataFormatArchivingReply == uuids.yes_38AUuid %}
							{% set dataFormatArchiving = 'this format is suitable for long-term archiving' %}
							<li>{{ dataFormatReply.value.value.value }} ({{ dataFormatArchiving }})</li>
						{% endif %}
					{% endif %}
				{% endfor %}
			{% endif %}
		
			{# Personal data #}
			{% set consentForPersonalDataPath = [createOrCollectEnvironmentalDataPath, uuids.yes_14AUuid, uuids.willYouNeedConsentForAnyNewlyCollectedPersonalDataQUuid]|reply_path %}
			{% set consentForPersonalDataReply = replies[consentForPersonalDataPath]|reply_str_value %}
			{% set usingAnotherLegalBasePath = [consentForPersonalDataPath, uuids.noOurWorkOnPersonalDataCanBeDoneUsingAnotherLegalBaseAUuid]|reply_path %}
			{% set usingAnotherLegalBaseReply = replies[usingAnotherLegalBasePath]|reply_str_value %}
			{% set personalDataLegalBasePath = [uuids.creatingAndCollectingDataCUuid, uuids.whatLegalBaseQUuid]|reply_path %}
			{% set personalDataLegalBaseReply = replies[personalDataLegalBasePath]|reply_str_value %}	

		{# Projects that won't create or collect any data (no-data) #}
		{% elif createOrCollectEnvironmentalDataReply == uuids.no_14AUuid %}
			<p>Project is no-data and will therefore not create or collect any environmental research data.</p>
		{% endif %}

		<h3>4. Processing and analysing data</h3>
		{% set processOrAnalyseDataPath = [uuids.processingAndAnalysingDataCUuid, uuids.willYourProjectProcessOrAnalyseResearchDataQUuid]|reply_path %}
		{% set processOrAnalyseDataReply = replies[processOrAnalyseDataPath]|reply_str_value %}

		{% if processOrAnalyseDataReply == uuids.no_5_2AUuid %}
			<p>This project is not processing or analysing data.</p>
		{% elif processOrAnalyseDataReply == uuids.yes_5_2AUuid %}
			<p>This project is processing or analysing data.</p>

			{% set fileSystemToStoreDataPath = [processOrAnalyseDataPath, uuids.yes_5_2AUuid, uuids.areYouUsingAFileSystemWithFilesAndFoldersToStoreDataQUuid]|reply_path %}
			{% set fileSystemToStoreDataReply = replies[fileSystemToStoreDataPath]|reply_str_value %} 
			<h5> File system and data storage</h5>
			{% if fileSystemToStoreDataReply == uuids.no_47AUuid %}
				We are not using a file system with files and folders to store data.
			{% elif  fileSystemToStoreDataReply == uuids.yes_48AUuid %}
				We are using a file system with files and folders to store data.
				
				{% set standardNamingProcedurePath = [fileSystemToStoreDataPath, uuids.yes_48AUuid, uuids.doYouHaveAStandardProcedureInPlaceForFolderAndFileNamingQUuid]|reply_path %}
				{% set standardNamingProcedureReply = replies[standardNamingProcedurePath]|reply_str_value %} 

				{% if standardNamingProcedureReply == uuids.yes_49AUuid %}
					{% set fileNamingProcedurePath = [standardNamingProcedurePath, uuids.yes_49AUuid, uuids.describeYourFileNamingProcedureQUuid]|reply_path %}
					{% set fileNamingProcedureReply = replies[fileNamingProcedurePath]|reply_str_value %}
					Our standard file naming procedure: {{fileNamingProcedureReply}}. 
				{% endif %}

				{% set metadataEmbeddedPath = [fileSystemToStoreDataPath, uuids.yes_48AUuid, uuids.willAllTheMetadataThatIsEmbeddedInTheFileNamesAlsoBeAvailableInSupportingDocumentsQUuid]|reply_path %}
				{% set metadataEmbeddedReply = replies[metadataEmbeddedPath]|reply_str_value %}

				{% if metadataEmbeddedReply == uuids.noFileNamesShouldBeConsideredAsStandAlonePartsOfTheMetadataAUuid %}
					Filenames will be considered as stand-alone parts of the metadata, and will not be explicitly available elsewhere.
				{% elif metadataEmbeddedReply == uuids.yesAllMetadataIsAlsoExplicitlyAvailableElsewhereAUuid %}
					Metadata embedded in file names will also be explicitly available elsewhere.
				{% endif %}

			{% endif %}

			{# Relational database #}
			{% set relationalDatabaseToStoreDataPath = [processOrAnalyseDataPath, uuids.yes_5_2AUuid, uuids.willYouUseARelationalDatabaseSystemToStoreProjectDataQUuid]|reply_path %}
			{% set relationalDatabaseToStoreDataReply = replies[relationalDatabaseToStoreDataPath]|reply_str_value %}
			
			{% if relationalDatabaseToStoreDataReply == uuids.no_49AUuid %}
				<p>We will not be using a relational database to store data.</p>
			{% elif relationalDatabaseToStoreDataReply == uuids.yes_50AUuid %}
				<p>We will be using a relational database to store data.
				{% set handlingChangesInDataPath = [relationalDatabaseToStoreDataPath, uuids.yes_50AUuid, uuids.howWillYouHandleChangesInTheDataQUuid ]|reply_path %}
				{% set handlingChangesInDataReply = replies[handlingChangesInDataPath]|reply_str_value %}

				{# Relational databases #}
				{% if handlingChangesInDataReply %}
					{% set handlingChangesInData = km.entities.answers[handlingChangesInDataReply].label|capitalize %}
					{{handlingChangesInData}}.</p>
				{% endif %} 
			{% endif %}

			{# Other storage systems #}
			{% set anotherStorageSystemPath = [processOrAnalyseDataPath, uuids.yes_5_2AUuid, uuids.areYouUsingAnotherStorageSystemQUuid]|reply_path %}
			{% set anotherStorageSystemReply = replies[anotherStorageSystemPath]|reply_str_value %}
			{% set storageSystemPath = [anotherStorageSystemPath, uuids.yes_51AUuid, uuids.pleaseSpecifyWhichStorageSystemYouWillUseQUuid]|reply_path %}
			{% set storageSystemReply = replies[storageSystemPath]|reply_str_value %}
			
			{% set storageSystem = '' %}

			{% if storageSystemReply %}
				{% set storageSystem = storageSystemReply %}
			{% endif %}

			{{storageSystem}}

			{# Shared working space #}
			<h5>Shared workspace</h5>
			{% set sharedWorkingSpaceForDataPath = [processOrAnalyseDataPath, uuids.yes_5_2AUuid, uuids.willYouBeUsingASharedWorkingSpaceToWorkWithYourDataQUuid]|reply_path %}
			{% set sharedWorkingSpaceForDataReply = replies[sharedWorkingSpaceForDataPath]|reply_str_value %}

			{% if sharedWorkingSpaceForDataReply == uuids.yes_52AUuid %}
				
				{# Specialists #}
				{% set workspaceRunBySepecialistsPath = [sharedWorkingSpaceForDataPath, uuids.yes_52AUuid, uuids.willThisWorkSpaceBeRunBySpecialistsQUuid]|reply_path %}
				{% set workspaceRunBySpecialistsReply = replies[workspaceRunBySpecialistsPath]|reply_str_value %}

				{% if workspaceRunBySpecialistsReply == uuids.yes_53AUuid %}
					<p>We will use a shared workspace run by specialists to work with data in the project.</p>
				{% elif workspaceRunBySpecialistsReply == uuids.no_51AUuid %}
					<p>We will use a shared workspace to work with data. However, the workspace won't be run by specialists, thus increasing the risk that backup, restore and access management are not properly addressed.</p>
				{% endif %}

				{# Compute capacity #}
				{% set workspaceComputeCapacityPath = [sharedWorkingSpaceForDataPath, uuids.yes_52AUuid, uuids.doYouNeedTheWorkSpaceToBeCloseToTheComputeCapacityQUuid]|reply_path %}
				{% set workspaceComputeCapacityReply = replies[workspaceComputeCapacityPath]|reply_str_value %}

				{% if workspaceComputeCapacityReply == uuids.yes_54AUuid %}
					<p>We will need the workspace to be close to the computing capacity as we will be dealing with large volumes of data that will be intensely and repeatedly used by the computing workflow.</p>
				{% elif workspaceComputeCapacityReply == uuids.no_52AUuid %}
					<p>For this project we won't need to keep the storage in the same place as where the computing takes place.</p>
				{% endif %}


				{# Managing data in the workspace #} 

				{% set managingDataInWorkspacePath = [sharedWorkingSpaceForDataPath, uuids.yes_52AUuid, uuids.howWillYouManageDataInTheWorkSpaceQUuid, uuids.exploreHintsAndTipsForGoodPractice_3AUuid]|reply_path %}

				{% set workingWithDataInOtherFormThanArchivedPath = [managingDataInWorkspacePath, uuids.willYouBeWorkingWithYourDataInAnotherFormThanTheWayItWillBeArchivedQUuid]|reply_path %}
				{% set workingWithDataInOtherFormThanArchivedReply = replies[workingWithDataInOtherFormThanArchivedPath]|reply_str_value %}
				{% if workingWithDataInOtherFormThanArchivedReply == uuids.noDataFormatWillBeArchivedInTheSameWayWeWorkWithItAUuid %}
					<p>We will archive project data in the same format(s) we'll use to work on it.</p>
				{% elif workingWithDataInOtherFormThanArchivedReply == uuids.yesThereWillBeAConversionStepBeforeArchivingAUuid %}
					<p>The data will require a format conversion step before being archived in order to ensure it is readable and remains understandable in the future.</p>
				{% endif %}

				{# When will raw data become available #}

				{% set whenWillYourRawDataBecomeAvailablePath = [managingDataInWorkspacePath, uuids.whenWillYourRawDataBecomeAvailableQUuid]|reply_path %}
				{% set whenWillYourRawDataBecomeAvailableReply = replies[whenWillYourRawDataBecomeAvailablePath]|reply_str_value %}
				{% if whenWillYourRawDataBecomeAvailableReply %}
					{% set whenWillYourRawDataBecomeAvailabletext = km.entities.answers[whenWillYourRawDataBecomeAvailableReply].label %} 
					{{whenWillYourRawDataBecomeAvailabletext}}.
				{% endif %}

				{# how much raw data kept in workspace #}

				{% set howMuchOfTheRawDataDoYouNeedToKeepInTheWorkSpacePath = [managingDataInWorkspacePath, uuids.howMuchOfTheRawDataDoYouNeedToKeepInTheWorkSpaceQUuid]|reply_path %}
				{% set howMuchOfTheRawDataDoYouNeedToKeepInTheWorkSpaceReply = replies[howMuchOfTheRawDataDoYouNeedToKeepInTheWorkSpacePath]|reply_str_value %}
		
				{% if howMuchOfTheRawDataDoYouNeedToKeepInTheWorkSpaceReply == uuids.rawDataCanBeCleanedOutOrArchivedQuicklyAUuid %}
					{% set doYourRawDataNeedToBeArchivedPath = [howMuchOfTheRawDataDoYouNeedToKeepInTheWorkSpacePath, uuids.rawDataCanBeCleanedOutOrArchivedQuicklyAUuid, uuids.doYourRawDataNeedToBeArchivedQUuid]|reply_path %}
					{% set doYourRawDataNeedToBeArchivedReply = replies[doYourRawDataNeedToBeArchivedPath]|reply_str_value %}
					{{km.entities.answers[howMuchOfTheRawDataDoYouNeedToKeepInTheWorkSpaceReply].label}}

					{% if doYourRawDataNeedToBeArchivedReply == uuids.noItIsAlsoStoredElsewhereCanBeRecoveredEasilyAUuid %}
						and does not need to be archived as it is stored elsewhere and can be recovered easily.
					{% elif doYourRawDataNeedToBeArchivedReply == uuids.noItCanBeRemeasuredEasilyAndMoreCheaplyThanArchivingAUuid %}
						and does not need to be archived as it can be remeasured easily and more cheaply than archiving.
					{% elif doYourRawDataNeedToBeArchivedReply == uuids.yes_55AUuid %}
						and needs to be archived.
					{% endif %}
				{% elif howMuchOfTheRawDataDoYouNeedToKeepInTheWorkSpaceReply %}
					{{km.entities.answers[howMuchOfTheRawDataDoYouNeedToKeepInTheWorkSpaceReply].label}}.
				{% endif %}


				{# Volume of intermediate data #}

				{% set didYouPlanHowMuchIntermediateDataYouWillGetDuringAnalysisAndHowLongEachNeedsToBeKeptPath = [managingDataInWorkspacePath, uuids.didYouPlanHowMuchIntermediateDataYouWillGetDuringAnalysisAndHowLongEachNeedsToBeKeptQUuid]|reply_path %}
				{% set didYouPlanHowMuchIntermediateDataYouWillGetDuringAnalysisAndHowLongEachNeedsToBeKeptReply = replies[didYouPlanHowMuchIntermediateDataYouWillGetDuringAnalysisAndHowLongEachNeedsToBeKeptPath]|reply_str_value %}
				{% if didYouPlanHowMuchIntermediateDataYouWillGetDuringAnalysisAndHowLongEachNeedsToBeKeptReply %}
					<p>{{km.entities.answers[didYouPlanHowMuchIntermediateDataYouWillGetDuringAnalysisAndHowLongEachNeedsToBeKeptReply].label}}
				{% endif %}

				{% if didYouPlanHowMuchIntermediateDataYouWillGetDuringAnalysisAndHowLongEachNeedsToBeKeptReply == uuids.aLargeVolumeOfIntermediateDataWillBeInTheWorkSpaceAUuid %}
					{% set isItPossibleToStoreIntermediateTemporaryDataOnASeparateScratchAreaThatIsNotBackedUpPath = [didYouPlanHowMuchIntermediateDataYouWillGetDuringAnalysisAndHowLongEachNeedsToBeKeptPath, uuids.aLargeVolumeOfIntermediateDataWillBeInTheWorkSpaceAUuid, uuids.isItPossibleToStoreIntermediateTemporaryDataOnASeparateScratchAreaThatIsNotBackedUpQUuid]|reply_path %}
					{% set isItPossibleToStoreIntermediateTemporaryDataOnASeparateScratchAreaThatIsNotBackedUpReply = replies[isItPossibleToStoreIntermediateTemporaryDataOnASeparateScratchAreaThatIsNotBackedUpPath]|reply_str_value %}
					and {{km.entities.answers[isItPossibleToStoreIntermediateTemporaryDataOnASeparateScratchAreaThatIsNotBackedUpReply].label|lower}}. </p>

					{% if isItPossibleToStoreIntermediateTemporaryDataOnASeparateScratchAreaThatIsNotBackedUpReply == uuids.weCanOffloadIntermediateResultsToAScratchAreaThatIsNotBackedUpAUuid %}
						{% set areYouSureYouWillNotNeedABackupOfTheDataStoredOnTheScratchFileSystemsPath = [isItPossibleToStoreIntermediateTemporaryDataOnASeparateScratchAreaThatIsNotBackedUpPath, uuids.weCanOffloadIntermediateResultsToAScratchAreaThatIsNotBackedUpAUuid, uuids.areYouSureYouWillNotNeedABackupOfTheDataStoredOnTheScratchFileSystemsQUuid]|reply_path %}
						{% set areYouSureYouWillNotNeedABackupOfTheDataStoredOnTheScratchFileSystemsReply = replies[areYouSureYouWillNotNeedABackupOfTheDataStoredOnTheScratchFileSystemsPath]|reply_str_value %}
						{% if areYouSureYouWillNotNeedABackupOfTheDataStoredOnTheScratchFileSystemsReply == uuids.no_53AUuid %}
							We are not sure that we will not need a backup of the data stored on the scratch file systems. 
						{% elif areYouSureYouWillNotNeedABackupOfTheDataStoredOnTheScratchFileSystemsReply == uuids.yes_56AUuid %}
							We are sure that we will not need a backup of the data stored on the scratch file systems.
						{% endif %}
					{% endif %}
				{% endif %}
				


				{# storage needs change over time howDoesTheStorageNeedChangeOverTimeQUuid #}




				{% set firstDataComeInPath = [managingDataInWorkspacePath, uuids.howWillYourFirstDataComeInQUuid]|reply_path %}
				{% set firstDataComeInReply = replies[firstDataComeInPath]|reply_str_value %}

				{% if firstDataComeInReply %}
					{% if firstDataComeInReply == uuids.initialDataWillNeedToBeMadeAvailableThroughALocalNetworkCopyAUuid %}	
						{% set firstDataComeIn = 'it will need to be made available through a network copy.' %}
					{% elif firstDataComeInReply == uuids.weWillNeedAHighSpeedNetworkConnectionToCopyTheInitialDataAUuid %}
						{% set firstDataComeIn = 'we will need a high speed network connection to make an initial copy.' %}
					{% elif firstDataComeInReply == uuids.initialDataWillArriveOnSeparateMediaAndWillNeedToBeCopiedToTheWorkSpaceAUuid %}
						{% set firstDataComeIn = 'we will need to copy it to the workspace as it will arrive on separate media.' %}
					{% elif firstDataComeInReply == uuids.noSpecialPlanningIsNeededForTheInitialDataAUuid %}
						{% set firstDataComeIn = 'no special planning is needed.' %}	
					{% endif %}

					<p>When data first comes in {{firstDataComeIn}} </p>
				{% endif %}

				{# Availability and reliability of workspace #}

				{% set availableAndReliableWorkspacePath = [sharedWorkingSpaceForDataPath, uuids.yes_52AUuid, uuids.howAvailableAndReliableWillYourWorkSpaceBeQUuid]|reply_path %}
				{% set availableAndReliableWorkspaceReply = replies[availableAndReliableWorkspacePath]|reply_str_value %}
			
				{% set preventTotalDataLossPath = [availableAndReliableWorkspacePath, uuids.exploreHintsAndTipsForGoodPractice_4AUuid, uuids.howDoYouPreventATotalLossOfDataInTheWorkSpaceQUuid]|reply_path %}
				{% set preventTotalDataLossReply = replies[preventTotalDataLossPath]|reply_str_value %}
				{% set offlineWorkspacePath = [availableAndReliableWorkspacePath, uuids.exploreHintsAndTipsForGoodPractice_4AUuid, uuids.canYouManageIfTheWorkSpaceIsOffLineForAWhileQUuid]|reply_path %}
				{% set offlineWorkspaceReply = replies[offlineWorkspacePath]|reply_str_value %}
				{% set restoreIfStorageFailsPath = [availableAndReliableWorkspacePath, uuids.exploreHintsAndTipsForGoodPractice_4AUuid, uuids.howLongCanYouWaitForARestoreIfTheStorageFailsQUuid]|reply_path %}
				{% set restoreIfStorageFailsReply = replies[restoreIfStorageFailsPath]|reply_str_value %}
				{% set backupCopiesNotInWorkspacePath = [availableAndReliableWorkspacePath, uuids.exploreHintsAndTipsForGoodPractice_4AUuid, uuids.willYouMakeBackUpCopiesOfProjectDataThatIsNotInTheWorkSpaceQUuid]|reply_path %}
				{% set backupCopiesNotInWorkspaceReply = replies[backupCopiesNotInWorkspacePath]|reply_str_value %}


				{% if availableAndReliableWorkspaceReply %}

					{% if preventTotalDataLossReply == uuids.theWorkSpaceProvidesSufficientGuaranteesAUuid %}
						<p>The project workspace provides sufficient guarantees to prevent the total loss of data in the event of an incident.</p>
					{% elif preventTotalDataLossReply == uuids.allEssentialDataIsAlsoStoredElsewhereAUuid %}
						{% set softwareInWorkspacePath = [preventTotalLossPath, uuids.allEssentialDataIsAlsoStoredElsewhereAUuid, uuids.isThereSoftwareInTheWorkSpaceCanItAlsoBeRestoredQuicklyQUuid]|reply_path %}
						{% set softwareInWorkspaceReply = replies[softwareInWorkspacePath]|reply_str_value %}

						{% if softwareInWorkspaceReply == uuids.thereIsNoSoftwareAUuid %}
							{% set softwareInWorkspace = '' %}
						{% elif softwareInWorkspaceReply == uuids.softwareInTheWorkSpaceIsOnlyACopyAUuid %}
							{% set softwareInWorkspace = 'Any software stored in the workspace is only a copy so there wont be an urgent need for quick restoration.' %}
						{% elif softwareInWorkspaceReply == uuids.specialCareWillBeTakenForTheSoftwareAndConfigurationsAUuid %}
							{% set softwareInWorkspace = 'Special care will be taken to ensure any software stored in the workspace and its configurations can be restored quickly.' %}
						{% endif %}

						<p>To prevent the total loss of data in the workspace in the event of an incident, we have ensured all data is stored elsewhere. {{softwareInWorkspace}}</p>
					{% endif %}

					{% if offlineWorkspaceReply == uuids.weCouldHandleAFewDaysOfOfflineTimePerYearAUuid %}
						{% set offlineWorkspace = 'We will be able to manage if the workspace needs to be offline for a couple of days per year due to any issues.' %}
					{% elif offlineWorkspaceReply == uuids.weCanOnlyMissTheWorkSpaceForAFewHoursDuringWorkHoursAUuid %}
						{% set offlineWorkspace = 'We can only miss the workspace for a few hours during work hours. This means our project will be impacted if the workspace needs to be offline due to any issues.' %}
					{% elif offlineWorkspaceReply == uuids.weCanWaitForProblemsDuringWorkingHoursToBeRepairedDuringEveningsAndWeekendsAUuid %}
						{% set offlineWorkspace = 'If the workspace is offline during working hours due to any issues, we will be able to wait for it to be repaired during evening and weekends.' %}
					{% endif %}

					{% if restoreIfStorageFailsReply == uuids.weCanWaitForRepairAndARestoreAUuid %}
						{% set restoreIfStorageFails = 'we will be able to wait for it to be repaired and restored.' %}
					{% elif restoreIfStorageFailsReply == uuids.aSpareCopyNeedsToBeDeployedQuicklyAUuid %}
						{% set restoreIfStorageFails = 'a spare copy will need to be deployed quickly.' %}
					{% elif restoreIfStorageFailsReply == uuids.noWaitingIsPossibleACopyMustBeReadyToTakeOverAUuid %}
						{% set restoreIfStorageFails = 'a copy must be ready to take over.' %}
					{% endif %}

					{% if backupCopiesNotInWorkspaceReply == uuids.thereAreNoDataElsewhereAUuid %}
						{% set backupCopiesNotInWorkspace = 'Data are only in stored in the workspace and we dont have back-up copies elsewhere. This means we are not adequately mitigating the impacts caused by possible failures or data loss events in the workspace.' %}
					{% elif backupCopiesNotInWorkspaceReply == uuids.allDataElsewhereAreAdequatelyBackedUpAUuid %}
						{% set backupCopiesNotInWorkspace = 'To mitigate the impacts of possible failures or data loss events in the workspace, we will make sure all data are adequately backed-up elsewhere.' %}
					{% elif backupCopiesNotInWorkspaceReply == uuids.thisIsForEachIndividualProjectMemberToDecideAUuid %}
						{% set backupCopiesNotInWorkspace = 'Individual project members will decide whether they want to make back-up copies of project data that are not in the workspace. This means we are not adequately mitigating the impacts caused by possible failures or data loss events in the workspace.' %}
					{% elif backupCopiesNotInWorkspaceReply == uuids.weMakeAutomatedBackupsOfAllDataStoredOutsideOfTheWorkSpaceAUuid %}
						{% set backupCopiesNotInWorkspace = 'To mitigate the impacts of possible failures or data loss events, we will make automated back-ups of all data stored outside of the workspace.' %}
					{% endif %}

					<p>{{offlineWorkspace}} If workspace storage fails {{restoreIfStorageFails}} {{backupCopiesNotInWorkspace}}</p>
				
				{% endif %}


				{# Managing access to workspace #} 
				{% set manageWorkspaceAccessPath = [sharedWorkingSpaceForDataPath, uuids.yes_52AUuid, uuids.howWillYouManageAccessToTheWorkSpaceQUuid]|reply_path %}
				{% set manageWorkspaceAccessReply = replies[manageWorkspaceAccessPath]|reply_str_value %}

				{% set accessControlPath = [manageWorkspaceAccessPath, uuids.exploreHintsAndTipsForBestPracticeAUuid, uuids.howWillAccessControlBeArrangedQUuid]|reply_path %}
				{% set accessControlReply = replies[accessControlPath]|reply_str_value %}
				{% set dataCopiedByRemoteUsersPath = [manageWorkspaceAccessPath, uuids.exploreHintsAndTipsForBestPracticeAUuid, uuids.willDataBeCopiedInAndOutOfTheWorkspaceStorageByRemoteUsersQUuid]|reply_path %}
				{% set dataCopiedByRemoreUsersReply = replies[dataCopiedByRemoteUsersPath]|reply_str_value %}

				{% if accessControlReply == uuids.noSpecialProvisionsAreNeededAUuid %}
					{% set accessControl = 'No special access provisions will be required for the project workspace' %}
				{% elif accessControlReply == uuids.projectManagementWillNeedToBeAbleToGivePeopleAccessAUuid %}
					{% set workspaceAccessControlPath = [accessControlPath, uuids.projectManagementWillNeedToBeAbleToGivePeopleAccessAUuid, uuids.howWillAccessToTheWorkspaceBeControlledQUuid]|reply_path %}
					{% set workspaceAccessControlReply = replies[workspaceAccessControlPath]|reply_str_value %}

					{% if workspaceAccessControlReply == uuids.onlyProjectMembersHaveReadWriteAccessToTheDataAUuid %}
						{% set workspaceAccessControl = 'Read/write access to the project workspace will be restricted to project members only.' %}
					{% elif workspaceAccessControlReply == uuids.anyoneInUkcehHasReadAccessToTheDataAllProjectMembersHaveReadWriteAccessAUuid %}
						{% set workspaceAccessControl = 'Read/write access to the project workspace will be restricted to project members, but anyone at UKCEH will have read access.' %}
					{% elif workspaceAccessControlReply == uuids.onlyProjectMembersWillHaveReadAccessOnlySelectedProjectMembersWillBeAbleToWriteDataAUuid %}
						{% set workspaceAccessControl = 'Read access to the project workspace will be restricted to project members only, and only select project members will have write access.' %}
					{% elif workspaceAccessControlReply == uuids.anyoneInUkcehCanReadDataOnlyProjectMembersCanRequestWriteAccessAUuid %}
						{% set workspaceAccessControl = 'Anyone at UKCEH will have read access to the project workspace and project members will be able to request write access.' %}
					{% endif %}

					{% set accessControl = 'Access to the workspace will need to be granted by a member of the project management team.' %}
				{% elif accessControlReply == uuids.theWorkSpaceShouldBeConnectedToASingleSignOnSystemAUuid %}
					{% set accessControl = 'The project workspace will be connected to a single sign-on system to control who has access to it.' %}
				{% endif %}

				{% if dataCopiedByRemoteUsersReply == uuids.noThisShouldNotBeAllowedAUuid %}
					{% set dataCopiedByRemoteUsers = 'Users accessing the workspace remotely will not be allowed to copy data in and out of it.' %}
				{% elif dataCopiedByRemoreUsersReply == uuids.noAllDataProcessingWillBeDoneInTheSameEnvironmentVirtualResearchEnvironment_2AUuid %}
					{% set dataCopiedByRemoteUsers = 'Users accessing the workspace remotely will not be allowed to copy data in and out of it - all data processing will be done in the same virtual environment.' %}
				{% elif dataCopiedByRemoreUsersReply == uuids.yesOccasionallyAUuid %}
					{% set dataCopiedByRemoteUsers = 'Users accessing the workspace remotely will occassionally be allowed to copy data in and out of it.' %}
				{% elif dataCopiedByRemoreUsersReply == uuids.yesForActualComputationsRequiringHighPerformance_2AUuid %}
					{% set dataCopiedByRemoteUsers = 'Users accessing the workspace remotely will be allowed to copy data in and out for computations requiring high performance.' %}
				{% endif %}

				{% if accessControl %}
					{{workspaceAccessControl}} {{accessControl}} {{dataCopiedByRemoteUsers}}
				{% elif workspaceAccessControl %}
					{{workspaceAccessControl}} {{accessControl}} {{dataCopiedByRemoteUsers}}
				{% elif dataCopiedByRemoteUsers%}
					{{workspaceAccessControl}} {{accessControl}} {{dataCopiedByRemoteUsers}}
				{% endif %}

					
			{% elif sharedWorkingSpaceForDataReply == uuids.no_55AUuid %}
				{% set dataStoredByMembersPath = [sharedWorkingSpaceForDataPath, uuids.no_55AUuid, uuids.areDataThatProjectMembersStoreThemselvesAdequatelyBackedUpAndTraceableQUuid]|reply_path %}
				{% set dataStoredByMembersReply = replies[dataStoredByMembersPath]|reply_str_value %}

				{% if dataStoredByMembersReply == uuids.yesProtectedAgainstBothEquipmentFailureAndHumanErrorAUuid %}
					<p>We will not be using a shared workspace for this project but have made sure that the data stored by project members is adequately backed up and traceable.</p>
				{% elif dataStoredByMembersReply == uuids.no_56AUuid %} 
					<p>We will not be using a shared workspace for this project and haven't implemented measures to make sure that data stored by project members is protected against equipment failure and human error.</p>
				{% endif %}

			{% endif %}

			{# Transformation/analysis/modelling tools #}
			<h5>Processing, analysing and modelling tools</h5>
			{% set transformationAnalysisModellingToolPath = [processOrAnalyseDataPath, uuids.yes_5_2AUuid, uuids.willYouBeUsingATransformationAnalysisModellingToolSuchAsRPythonOrFmeToProcessAndAnalyseModelYourDataQUuid]|reply_path %}
			{% set transformationAnalysisModellingToolReply = replies[transformationAnalysisModellingToolPath]|reply_str_value %}

			{% if transformationAnalysisModellingToolReply == uuids.noIPreferToUseASpreadsheetOrOtherPointAndClickToolAUuid %}
				<p>We will use spreadsheets or other point-and-click tools to process and analyse/model our data.</p>
			{% elif transformationAnalysisModellingToolReply == uuids.yesExploreFurtherAUuid %}
				{# Tools #}
				{% set toolsPath = [transformationAnalysisModellingToolPath, uuids.yesExploreFurtherAUuid, uuids.whatToolSWillYouBeUsingQUuid]|reply_path %}
				{% set toolsReply = replies[toolsPath]|reply_items %}

				{% if toolsReply %}
					<p>We will use the following transformation/analysis/modelling tool(s) to process and analyse/model our data:</p>
					{% for itemUuid in toolsReply %}
							<li>{{ km.entities.choices[itemUuid].label }}</li>
					{% endfor %}	
				{% else %}
					<p>We will use transformation/analysis/modelling tool(s) but havent decided which yet</p>
				{% endif %}

				{# Experience with software #}
				{% set experienceWithSoftwarePath = [transformationAnalysisModellingToolPath, uuids.yesExploreFurtherAUuid, uuids.whatIsYourExperienceWithThisSoftwareQUuid]|reply_path %}
				{% set experienceWithSoftwareReply = replies[experienceWithSoftwarePath]|reply_str_value %}

				{% if experienceWithSoftwareReply == uuids.weHaveAllTheExpertiseRequiredToUseTheSoftwareAUuid %}
					{% set experienceWithSoftware = 'We have all the expertise required to use the software.' %}
				{% elif experienceWithSoftwareReply == uuids.weDontHaveAllTheSpecialistExpertiseRequiredButHaveAvailableHelpAndTrainingOpportunitiesResourcesAUuid %}
					{% set experienceWithSoftware = 'We dont currently have all the expertise required to use the software but have available help and training opportunities resources.' %}
				{% elif experienceWithSoftwareReply == uuids.weWillNeedExternalAdditionalExpertiseOrTrainingAUuid %}
					{% set experienceWithSoftware = 'We will need external additional expertise or training to use the software.' %}
				{% endif %}
				
				{{experienceWithSoftware}}

				{# Do you need to develop your own script #}
				{% set developOwnWorkflowsPath = [transformationAnalysisModellingToolPath, uuids.yesExploreFurtherAUuid, uuids.doYouNeedToDevelopYourOwnScriptsWorkflowsModelsForThisProjectQUuid]|reply_path %}
				{% set developOwnWorkflowsReply = replies[developOwnWorkflowsPath]|reply_str_value %}

				{% if developOwnWorkflowsReply == uuids.noWeWillBeUsingExistingScriptsWorkflowsAUuid %}
					<p>We will not need to develop our own scripts/workflows/models for this project - we will use existing scripts/workflows.</p>
				{% elif developOwnWorkflowsReply == uuids.yesNewScriptsWorkflowsModelsWillBeDevelopedAUuid %}
					<p>We will need to develop our own scripts/workflows/models for this project.</p>
					{% set listScriptsWorkflowsModelsPath = [developOwnWorkflowsPath, uuids.yesNewScriptsWorkflowsModelsWillBeDevelopedAUuid, uuids.listScriptsWorkflowsModelsThatWillBeDevelopedQLUuid]|reply_path %}
					{% set listScriptsWorkflowsModelsReply = replies[listScriptsWorkflowsModelsPath]|reply_items %}

					{% if listScriptsWorkflowsModelsReply|length > 0 %}
						<ul>
						{% for itemUuid in listScriptsWorkflowsModelsReply %}
							{% set scriptOrWorkflowPath = [listScriptsWorkflowsModelsPath, itemUuid, uuids.scriptOrWorkflowToBeDevelopedQUuid]|reply_path %}
							{% set scriptOrWorkflowReply = replies[scriptOrWorkflowPath]|reply_str_value %}
								<p><strong>Script or workflow to be developed - </strong>{{scriptOrWorkflowReply}}</p>

							{% set softwareRepositoryForDevelopmentPath = [listScriptsWorkflowsModelsPath, itemUuid, uuids.pleaseSpecifyTheSoftwareRepositoryYouUseForDevelopmentQUuid]|reply_path %}
							{% set softwareRepositoryForDevelopmentReply = replies[softwareRepositoryForDevelopmentPath]|reply_str_value %}
								<p><strong>Software repository used for development - </strong>{{softwareRepositoryForDevelopmentReply}}</p>

							{% set didYouConsiderExistingOptionsPath = [listScriptsWorkflowsModelsPath, itemUuid, uuids.didYouConsiderExistingOptionsQUuid]|reply_path %}
							{% set didYouConsiderExistingOptionsReply = replies[didYouConsiderExistingOptionsPath]|reply_str_value %}

							{% if didYouConsiderExistingOptionsReply == uuids.alternativesExistButWePreferToDevelopOurOwnAUuid %}
								<p>Alternative scripts/workflows/models exist, but we prefer to develop our own.</p>
							{% elif didYouConsiderExistingOptionsReply == uuids.thisWillBeOneOfTheMainOutcomesOfOurProjectAUuid %}
								<p>We considered existing options, but this script/workflow/model will be one of the main outcomes of the project.</p>
							{% elif didYouConsiderExistingOptionsReply == uuids.noSuitableAlternativesExistAUuid %}
								<p>We considered exsiting options, but no suitable alternatives exist.</p>
							{% endif %}

							{% set whatLicenceWillYouUsePath = [listScriptsWorkflowsModelsPath, itemUuid, uuids.whatLicenceWillYouUseForYourToolQUuid]|reply_path %}
							{% set whatLicenceWillYouUseReply = replies[whatLicenceWillYouUsePath]|reply_str_value %}

							{% if whatLicenceWillYouUseReply == uuids.openGovernmentLicenceOglAUuid %}
								<p>We will be using an Open Government Licence (OGL)</p>
							{% elif whatLicenceWillYouUseReply == uuids.weAreUsingADifferentBeSpokeLicenceAUuid %}
								{% set whatIsTheLicencePath = [whatLicenceWillYouUsePath, uuids.weAreUsingADifferentBeSpokeLicenceAUuid, uuids.whatIsTheLicenceQUuid]|reply_path %}
								{% set whatIsTheLicenceReply = replies[whatIsTheLicencePath]|reply_str_value %}
								<p>We are using the following be-spoke licence: {{whatIsTheLicenceReply}}.</p>
								
								{% set contactedUkcehLicensingTeamPath = [whatLicenceWillYouUsePath, uuids.weAreUsingADifferentBeSpokeLicenceAUuid, uuids.haveYouContactedTheUkcehLicensingTeamQUuid]|reply_path %}
								{% set contactedUkcehLicensingTeamReply = replies[contactedUkcehLicensingTeamPath]|reply_str_value %}

								{% if contactedUkcehLicensingTeamReply == uuids.no_57AUuid %}
									<p> We have not contacted the UKCEH licensing team to confirm this is an appropriate licence.</p>
								{% elif contactedUkcehLicensingTeamReply == uuids.yes_58AUuid %}
									<p> We have contacted the UKCEH licensing team to confirm this is an appropriate licence.</p>
								{% endif %}	
							{% endif %}
						{% endfor %}
						</ul>
					{% endif %}	
				{% endif %}

				{# Does your tool provide provenance information when script is run? #}
				{% set doesToolProvideProvenancePath = [transformationAnalysisModellingToolPath, uuids.yesExploreFurtherAUuid, uuids.doesYourToolProvideProvenanceInformationEGAutomaticLoggingWhenTheScriptWorkflowModelIsRunQUuid]|reply_path %}
				{% set doesToolProvideProvenanceReply = replies[doesToolProvideProvenancePath]|reply_str_value %}
				
				{% if doesToolProvideProvenanceReply == uuids.noWeWillNotStoreProvenanceInformationWhenRunningTheWorkflowAUuid %}
					<p> No provenance information will be stored when running the workflow.</p>
				{% elif doesToolProvideProvenanceReply == uuids.yesThisIsGeneratedAutomaticallyByTheToolAUuid %}
					<p>Provenance information will be stored when running the workflow, and this is automatically generated by the tool.</p>
					{% set provenanceConvertedPath = [doesToolProvideProvenancePath, uuids.yesThisIsGeneratedAutomaticallyByTheToolAUuid, uuids.doesTheProvenanceNeedToBeStoredOrConvertedToSomeStandardFormatQUuid]|reply_path %}
					{% set provenanceConvertedReply = replies[provenanceConvertedPath]|reply_str_value %}

					{% if provenanceConvertedReply == uuids.no_58AUuid %}
						<p>The provenance does not need to be stored or converted to a standard format.</p>
					{% elif provenanceConvertedReply == uuids.yes_59AUuid %}
						<p>The provenance needs to be stored or converted to a standard format.</p>
					{% endif %}

				{% elif doesToolProvideProvenanceReply == uuids.yesWeWillBuildThisIntoOurScriptsWorkflowsAUuid %}
					<p>Provenance information will be stored when running the workflow, and we will build this into our workflow.</p>
				{% endif %}

				{# Annotate or comment #}
				{% set willYouAnnotatePath = [transformationAnalysisModellingToolPath, uuids.yesExploreFurtherAUuid, uuids.willYouAnnotateOrCommentYourScriptWorkflowModelToMakeItUnderstandableQUuid]|reply_path %}
				{% set willYouAnnotateReply = replies[willYouAnnotatePath]|reply_str_value %}

				{% if willYouAnnotateReply == uuids.no_59AUuid %}
					<p>The script/workflow/model will not be annotated or commented to be made understandable.</p>
				{% elif willYouAnnotateReply == uuids.yes_60AUuid %}
					<p>The script/workflow/model will be annotated or commented to be made understandable.</p>
				{% endif %}

				{# Multiple people developing #}
				{% set willMultiplePeopleDevelopPath = [transformationAnalysisModellingToolPath, uuids.yesExploreFurtherAUuid, uuids.willMultiplePeopleBeDevelopingTheScriptsWorkflowsModelsQUuid]|reply_path %}
				{% set willMultiplePeopleDevelopReply = replies[willMultiplePeopleDevelopPath]|reply_str_value %}
				
				{% if willMultiplePeopleDevelopReply == uuids.noOnlyOnePersonWillDevelopTheScriptsWorkflowsAUuid %}
					<p>Only one person will be using or developing the scripts/workflows.</p>
				{% elif willMultiplePeopleDevelopReply == uuids.yesWeWillUseASharedDriveAUuid %}
					<p>Multiple people will be using or developing the scripts/workflows, and a shared drive will be used to collaborate.</p>
				{% elif willMultiplePeopleDevelopReply == uuids.yesWeWillDevelopLocallyUsingAVersionControlSystemAndSharedRepositoryAUuid %}
					<p>Multiple people will be using or developing the scripts/workflows, and a version control system and shared repository will be used to collaborate.</p>
				{% elif willMultiplePeopleDevelopReply == uuids.yesWeWillUseACollaborativeDevelopmentEnvironmentSuchAsDataLabsAUuid %}
					<p>Multiple people will be using or developing the scripts/workflows, and a collaborate development environment, such as DataLabs, will be used to collaborate.</p>
				{% endif %}

				{# Need a GUI? #}
				{% set graphicalUserInterfacePath = [transformationAnalysisModellingToolPath, uuids.yesExploreFurtherAUuid, uuids.doesTheRunningOfScriptsWorkflowsModelsNeedToBeControlledUsingAGraphicalUserInterfaceGuiQUuid]|reply_path %}
				{% set graphicalUserInterfaceReply = replies[graphicalUserInterfacePath]|reply_str_value %}
				
				{% if graphicalUserInterfaceReply == uuids.no_60AUuid %}
					The running of scripts/workflows/models does not need to be controlled using a Graphical User Interface (GUI).
				{% elif graphicalUserInterfaceReply == uuids.yesWeWillUseAToolEGShinyToRunWorkflowsAndAnalyseResultsAUuid %}
					We will use a tool (e.g. Shiny) to run workflows and analyse results.
				{% endif %}

				{# Remote computers #}
				{% set remoteComputerPath = [transformationAnalysisModellingToolPath, uuids.yesExploreFurtherAUuid, uuids.doTheScriptsWorkflowsModelsNeedToBeRunOnRemoteComputersQUuid]|reply_path %}
				{% set remoteComputerReply = replies[remoteComputerPath]|reply_str_value %}

				{% if remoteComputerReply == uuids.no_61AUuid %}
					The running of scripts/workflows/models does not require remote computers to be run.
				{% elif remoteComputerReply == uuids.yes_61AUuid %}
					The running of scripts/workflows/models requires remote computers to be run.
				{% endif %}

				{# High performance computing #}
				{% set highPerformanceComputingPath = [transformationAnalysisModellingToolPath, uuids.yesExploreFurtherAUuid, uuids.doYouRequireHighPerformanceComputingParallelProcessingToExecuteYourScriptsWorkflowsModelsQUuid]|reply_path %}
				{% set highPerformanceComputingReply = replies[highPerformanceComputingPath]|reply_str_value %}

				{% if highPerformanceComputingReply == uuids.noAStandardLaptopOrDesktopPcWillBeSufficientAUuid %}
				<p>No high performance computing is required for processing, as a standard laptop or desktop PC will be sufficient.</p>
				{% elif highPerformanceComputingReply == uuids.yesExploreFurther_2AUuid %}
					<p>
					High performace computing is required for processing.

					{# CPU #}
					{% set howMuchCPUPath = [highPerformanceComputingPath, uuids.yesExploreFurther_2AUuid, uuids.doYouKnowHowMuchCpuPowerMemoryAndIOBandwidthATypicalAnalysisModelRunWillTakeQUuid]|reply_path %}
					{% set howMuchCPUReply = replies[howMuchCPUPath]|reply_str_value %}

					{% if howMuchCPUReply == uuids.no_62AUuid %}
						We do not know how much CPU power, memory and I/O bandwidth a typical analysis/model run will take.
					{% elif howMuchCPUReply == uuids.yes_62AUuid %}	
						We are aware how much CPU power, memory and I/O bandwidth a typical analysis/model run will take.
					{% endif %}

					{# Is there sufficient experience #}
					{% set isThereSufficientExperiencePath = [highPerformanceComputingPath, uuids.yesExploreFurther_2AUuid, uuids.isThereSufficientExperienceWithTheChosenComputingEnvironmentInTheProjectQUuid]|reply_path %}
					{% set isThereSufficientExperienceReply = replies[isThereSufficientExperiencePath]|reply_str_value %}

					{% if isThereSufficientExperienceReply == uuids.weWillRecruitAUuid %}
						We currently do not have sufficient experience with the chosen computing environment, but we will recruit.					
					{% elif isThereSufficientExperienceReply == uuids.trainingHasBeenArrangedAUuid %}	
						We currently do not have sufficient experience with the chosen computing environment, but we have arranged training.
					{% elif isThereSufficientExperienceReply == uuids.weWillUseTheHelpdeskAUuid %}	
						We currently do not have sufficient experience with the chosen computing environment, but we will use the helpdesk.
					{% elif isThereSufficientExperienceReply == uuids.weHaveSufficientKnowledgeInTheProjectAUuid %}	
						We have sufficient experience with the chosen computing environment.
					{% endif %}

					{# Have you confirmed the environment is available. #}
					{% set confirmedComputingEnvironmentAvailablePath = [highPerformanceComputingPath, uuids.yesExploreFurther_2AUuid, uuids.haveYouConfirmedThatTheHighPerformanceComputingEnvironmentWillBeAvailableWhenRequiredQUuid]|reply_path %}
					{% set confirmedComputingEnvironmentAvailableReply = replies[confirmedComputingEnvironmentAvailablePath]|reply_str_value %}

					{% if confirmedComputingEnvironmentAvailableReply == uuids.no_63AUuid %}
						We have not confirmed the computing environment is availabe when required.
					{% elif confirmedComputingEnvironmentAvailableReply == uuids.yes_63AUuid %}	
						We have confirmed the computing environment is availabe when required.
					{% endif %}

					{# is the hpc environment available clsoe to project working storage area #}
					{% set isComputingEnvironmentCloseToStoragePath = [highPerformanceComputingPath, uuids.yesExploreFurther_2AUuid, uuids.isTheHighPerformanceComputingEnvironmentAvailableCloseToTheProjectWorkingStorageAreaQUuid]|reply_path %}
					{% set isComputingEnvironmentCloseToStorageReply = replies[isComputingEnvironmentCloseToStoragePath]|reply_str_value %}

					{% if isComputingEnvironmentCloseToStorageReply == uuids.noWeWillCopyTheDataAsRequiredAUuid %}
						The high performance computing environment cannot access data in the project storage area directly, and therefore we will need to copy the data as required.
					{% elif isComputingEnvironmentCloseToStorageReply == uuids.yesWeCanUseTheDataDirectlyInTheProjectStorageAreaAUuid %}	
						The high performance computing environment can access data in the project storage area directly.
					{% endif %}

					{# Which environment #}
					{% set computingEnvironmentPath = [highPerformanceComputingPath, uuids.yesExploreFurther_2AUuid, uuids.whichHighPerformanceComputingEnvironmentSAreYouPlanningToUseQUuid]|reply_path %}
					{% set computingEnvironmentReply = replies[computingEnvironmentPath]|reply_str_value %}

					We will use {{computingEnvironmentReply}} to execute scripts/workflows/models that require high performance computing.

					{# Contingency plan #}
					{% set contingencyPlanPath = [highPerformanceComputingPath, uuids.yesExploreFurther_2AUuid, uuids.doYouHaveAContingencyPlanIfYourChosenComputingEnvironmentIsUnavailableQUuid]|reply_path %}
					{% set contingencyPlanReply = replies[contingencyPlanPath]|reply_str_value %}

					{% if contingencyPlanReply == uuids.weWillWaitUntilTheProblemIsFixedAUuid %}
						We do not have a contingency plan if our computing environment is unavailable, and will have to wait until the problem is fixed.
					{% elif contingencyPlanReply == uuids.weHaveAnAlternativeAUuid %}	
						{% set contingencyPlanDetailsPath = [contingencyPlanPath, uuids.weHaveAnAlternativeAUuid, uuids.giveDetailsOfAlternativeQUuid]|reply_path %}
						{% set contingencyPlanDetailsReply = replies[contingencyPlanDetailsPath]|reply_str_value %}
							We have the following contingency plan if our computing environment is unavailable: {{contingencyPlanDetailsReply}}.
					{% endif %}					
					</p>
				{% endif %}

				{# Checked by a second person #}
				{% set checkedBySecondPersonPath = [transformationAnalysisModellingToolPath, uuids.yesExploreFurtherAUuid, uuids.willAllCodeAndCodeChangesBeCheckedByASecondPersonBeforeTheyAreDeployedQUuid]|reply_path %}
				{% set checkedBySecondPersonReply = replies[checkedBySecondPersonPath]|reply_str_value %}

				{% if checkedBySecondPersonReply == uuids.no_64AUuid %}
					<p> We have not arranged for all code and code changes to be checked by a second person before they are deployed.</p>
				{% elif checkedBySecondPersonReply == uuids.yes_64AUuid %}
					<p> We have arranged for all code and code changes to be checked by a second person before they are deployed.</p>
				{% endif %}

				{# How will updates to tools be handled #}
				{% set howWillUpdatesBeHandledPath = [transformationAnalysisModellingToolPath, uuids.yesExploreFurtherAUuid, uuids.howWillYouHandleUpdatesToToolsPackagesEGNewROrPackageVersionsQUuid]|reply_path %}
				{% set howWillUpdatesBeHandledReply = replies[howWillUpdatesBeHandledPath]|reply_str_value %}

				{% if howWillUpdatesBeHandledReply == uuids.weWillTrustNewReleasesAndImplementAUuid %}
					<p>If tools/packages are updated we will trust the new releases and implement without checks.</p>
				{% elif howWillUpdatesBeHandledReply == uuids.weWillOnlyDeploySelectedStableUpdatesToToolsPackagesAUuid %}
					<p>If tools/packages are updated we will only deploy selected stable updates.</p>
				{% elif howWillUpdatesBeHandledReply == uuids.weWillTestAllToolPackageChangesOnASubsetOfOurOwnDataBeforeImplementationAUuid %}
					<p>If tools/packages are updated we will test changes on a subset of our own data before deployment.</p>
				{% elif howWillUpdatesBeHandledReply == uuids.weWillNotChangeToolPackageVersionsAfterTheInitialSelectionAUuid %}
					<p>If tools/packages are updated we will not change our version after initial selection.</p>
				{% endif %}	

				{# Test correct results #}			
				{% set testCorrectResultPath = [transformationAnalysisModellingToolPath, uuids.yesExploreFurtherAUuid, uuids.willYouTestWhetherKnownCorrectResultsAreObtainedOverTimeQUuid]|reply_path %}
				{% set testCorrectResultReply = replies[testCorrectResultPath]|reply_str_value %}

				{% if testCorrectResultReply == uuids.no_65AUuid %}
					<p>We will not test whether known correct results are obtained over time.</p>
				{% elif testCorrectResultReply == uuids.yesWeWillRegularlyMakeTestRunsOnTheSameDataAUuid %}
					<p>We will test whether known correct results are obtained over time, by regularly testing runs on the same data.</p>
				{% elif testCorrectResultReply == uuids.yesWeWillAutomaticallyMakeTestRunsOnTheSameDataAUuid %}
					<p>We will test whether known correct results are obtained over time, by automatically testing runs on the same data.</p>
				{% endif %}	

				{# What if a package is dropped #}
				{% set packageSupportDroppedPath = [transformationAnalysisModellingToolPath, uuids.yesExploreFurtherAUuid, uuids.howWillYouDealWithTheSituationWhereSupportForAToolOrPackageIsDroppedQUuid]|reply_path %}
				{% set packageSupportDroppedReply = replies[packageSupportDroppedPath]|reply_str_value %}

				{% if packageSupportDroppedReply == uuids.weWillKeepRunningItUnchangedAUuid %}
					<p>If support for a tool or package is dropped, we will keep running it unchanged.</p>
				{% elif packageSupportDroppedReply == uuids.weWillStartToDoNecessaryMaintenanceOurselvesAUuid %}
					<p>If support for a tool or package is dropped, we will start to do necessary maintenance ourselves.</p>
				{% elif packageSupportDroppedReply == uuids.weWillLookForAlternativesAUuid %}
					<p>If support for a tool or package is dropped, we will look for alternatives.</p>
				{% endif %}	

				{# Version control #}
				{% set versionControlSystemPath = [transformationAnalysisModellingToolPath, uuids.yesExploreFurtherAUuid, uuids.willYouUseAVersionControlSystemSuchAsGitGitHubForAnyToolsModelsCodeDevelopedByTheProjectQUuid]|reply_path %}
				{% set versionControlSystemReply = replies[versionControlSystemPath]|reply_str_value %}

				{% if versionControlSystemReply == uuids.no_66AUuid %}
					{% set versionControlSystem = 'We wont use a version control system to keep track of changes in any tools/models/code developed by the project.' %}
				{% elif versionControlSystemReply == uuids.yesGitHubAUuid %}
					{% set versionControlSystem = 'We will use GitHub as a version control system to keep track of changes in any tools/models/code.' %}
				{% elif versionControlSystemReply == uuids.yesOtherAUuid %}
					{% if versionControlOtherReply %}
						{% set versionControlOtherPath = [versionControlSystemPath, uuids.pleaseStateVersionControlSystemUsedQUuid]|reply_path %}
						{% set versionControlOtherReply = replies[versionControlOtherPath]|reply_str_value %}
						{% set versionControlSystem = 'We will use {{versionControlOtherReply}} as a version control system to keep track of changes in any tools/models/code.' %}
					{% endif %}
				{% endif %}
				{{versionControlSystem}}

			{% endif %}

			{# Will you keep results together #}
			{% set willYouKeepResultsTogetherPath = [processOrAnalyseDataPath, uuids.yes_5_2AUuid, uuids.willYouKeepResultsTogetherWithAllProcessingScriptsWorkflowsSpreadsheetsIncludingDocumentationOfTheVersionsOfTheToolsThatHaveBeenRunQUuid]|reply_path %}
			{% set willYouKeepResultsTogetherReply = replies[willYouKeepResultsTogetherPath]|reply_str_value %}

			{% if willYouKeepResultsTogetherReply == uuids.no_67AUuid %}
				<p>We will not keep results together with all processing scripts/workflows/spreadsheets including documentation of the versions of the tools that have been used.</p>
			{% elif willYouKeepResultsTogetherReply == uuids.yes_65AUuid %}
				<p>We will keep results together with all processing scripts/workflows/spreadsheets including documentation of the versions of the tools that have been used.</p>
			{% endif %}

			{# Will you make use of metadata fields #}
			{% set willYouMakeUseOfMetadataFieldsPath = [processOrAnalyseDataPath, uuids.yes_5_2AUuid, uuids.willYouMakeUseOfMetadataFieldsInYourOutputDataFilesToDescribeWhatTheDataAreAndHowTheyWereObtainedQUuid]|reply_path %}
			{% set willYouMakeUseOfMetadataFieldsReply = replies[willYouMakeUseOfMetadataFieldsPath]|reply_str_value %}

			{% if willYouMakeUseOfMetadataFieldsReply == uuids.no_68AUuid %}
				<p>We will not make use of metadata fields in our output data files to describe what the data are and how they were obtained.</p>
			{% elif willYouMakeUseOfMetadataFieldsReply == uuids.yes_66AUuid %}
				<p>We will make use of metadata fields in our output data files to describe what the data are and how they were obtained.</p>
			{% elif willYouMakeUseOfMetadataFieldsReply == uuids.yesWeWillBeCreatingSeparateDocumentationAUuid %}
				<p>We will provide metadata through separate documentation.</p>
			{% elif willYouMakeUseOfMetadataFieldsReply == uuids.yesWeWillAddMetadataToTheDataFilesAndProvideAdditionalInformationInDocumentationAUuid %}
				<p>We will make use of metadata fields in our output data files to describe what the data are and how they were obtained, and we will also provide additional information in documentation.</p>
			{% endif %}

			<h5>Quality Checks</h5>
			{# Validate integrity #}
			{% set willYouValidateIntegrityOfResultsPath = [processOrAnalyseDataPath, uuids.yes_5_2AUuid, uuids.willYouValidateTheIntegrityOfYourResultsBeforePublishingTheDataOrArticlesReportsBasedOnTheDataQUuid]|reply_path %}
			{% set willYouValidateIntegrityOfResultsReply = replies[willYouValidateIntegrityOfResultsPath]|reply_str_value %}

			{% if willYouValidateIntegrityOfResultsReply == uuids.no_73AUuid %}
				<p>We will not validate the integrity of our results before publishing the data or articles/reports based on the data.</p>
			{% elif willYouValidateIntegrityOfResultsReply == uuids.yes_67AUuid %}
				<p>We will validate the integrity of our results before publishing the data or articles/reports based on the data.</p>

				{# Defined checklist #}
				{% set haveYouDefinedChecklistPath = [willYouValidateIntegrityOfResultsPath, uuids.yes_67AUuid, uuids.willYouRunASubsetOfYourJobsSeveralTimesAcrossTheDifferentComputeInfrastructuresYouAreUsingQUuid]|reply_path %}
				{% set haveYouDefinedChecklistReply = replies[haveYouDefinedChecklistPath]|reply_str_value %}

				{% if haveYouDefinedChecklistReply == uuids.no_69AUuid %}
					<p> We have not defined a checklist to ensure the data are correct at all stages through the processing and analysis.</p>
				{% elif haveYouDefinedChecklistReply == uuids.yes_68AUuid %}
					<p> We have defined a checklist to ensure the data are correct at all stages through the processing and analysis.</p>
				{% endif %}

				{# Checked by another person #}
				{% set willEachDatasetBeCheckedByAnotherPersonPath = [willYouValidateIntegrityOfResultsPath, uuids.yes_67AUuid, uuids.willYouBeInstrumentingTheToolsIntoPipelinesAndWorkflowsUsingAutomatedToolsQUuid]|reply_path %}
				{% set willEachDatasetBeCheckedByAnotherPersonReply = replies[willEachDatasetBeCheckedByAnotherPersonPath]|reply_str_value %}

				{% if willEachDatasetBeCheckedByAnotherPersonReply == uuids.no_70AUuid %}
					<p>We have not arranged for each dataset to be checked by another person before sharing.</p>
				{% elif willEachDatasetBeCheckedByAnotherPersonReply == uuids.yes_69AUuid %}
					<p>We have arranged for each dataset to be checked by another person before sharing.</p>
				{% endif %}

				{# Will processing be repeated #}
				{% set willProcessingAndAnalysisBeRepeatedPath = [willYouValidateIntegrityOfResultsPath, uuids.yes_67AUuid, uuids.willYouUseIndependentlyDevelopedDuplicateToolsOrWorkflowsForCriticalStepsToReduceOrEliminateHumanErrorsQUuid]|reply_path %}
				{% set willProcessingAndAnalysisBeRepeatedReply = replies[willProcessingAndAnalysisBeRepeatedPath]|reply_str_value %}

				{% if willProcessingAndAnalysisBeRepeatedReply == uuids.no_71AUuid %}
					<p>Processing and analysis will not be repeated with validation checks at each stage.</p>
				{% elif willProcessingAndAnalysisBeRepeatedReply == uuids.yes_70AUuid %}
					<p>Processing and analysis will be repeated with validation checks at each stage.</p>
				{% endif %}				
			{% endif %}

			<h5>Security</h5>
			{# Is the risk of information loss acceptably low #}
			{% set riskOfInformationLossPath = [processOrAnalyseDataPath, uuids.yes_5_2AUuid, uuids.isTheRiskOfInformationLossLeaksAndVandalismAcceptablyLowQUuid]|reply_path %}
			{% set riskOfInformationLossReply = replies[riskOfInformationLossPath]|reply_str_value %}

			{% if riskOfInformationLossReply == uuids.exploreHintsAndTipsForGoodPractice_5AUuid %}
				{% set dataStoredExternallyPath = [riskOfInformationLossPath, uuids.exploreHintsAndTipsForGoodPractice_5AUuid, uuids.doProjectMembersStoreDataOrSoftwareOnComputersInTheLabFieldOrExternalHardDrivesConnectedToThoseComputersQUuid]|reply_path %}
				{% set dataStoredExternallyReply = replies[dataStoredExternallyPath]|reply_str_value %}

				{% if dataStoredExternallyReply == uuids.no_74AUuid %}
					<p>Project members will not store data or software externally (e.g. computers in the lab/field, external hard drives connected to those computers), which means we will need to make sure data are adequately backed-up and control who has access to facilities where data are stored.</p>
				{% elif dataStoredExternallyReply == uuids.yes_72AUuid %}
					<p>Project members will store data or software externally (e.g. computers in the lab/field, external hard drives).</p>
				{% endif %}

				{# Do project members carry data with them #}
				{% set carryDataWithThemPath = [riskOfInformationLossPath, uuids.exploreHintsAndTipsForGoodPractice_5AUuid, uuids.doProjectMembersCarryDataWithThemQUuid]|reply_path %}
				{% set carryDataWithThemReply = replies[carryDataWithThemPath]|reply_str_value %}

				{% if carryDataWithThemReply == uuids.no_75AUuid %}
					<p>Project members will not carry data with them.</p>
				{% elif carryDataWithThemReply == uuids.yes_73AUuid %}
					<p>
						Project members will carry data with them on some form of external media (e.g. USB, laptop). 
						{# Are data encrypted #}
						{% set areDataEncryptedPath = [carryDataWithThemPath, uuids.yes_73AUuid, uuids.areTheDataEncryptedQUuid]|reply_path %}
						{% set areDataEncryptedReply = replies[areDataEncryptedPath]|reply_str_value %}

						{% if areDataEncryptedReply == uuids.no_76AUuid %}
							Data will not be encrypted.
						{% elif areDataEncryptedReply == uuids.yes_74AUuid %}
							Data will be encrypted.
						{% endif %}

						{# Password protection#}
						{% set passwordProtectedDevicesPath = [carryDataWithThemPath, uuids.yes_73AUuid, uuids.areAccountsOnLaptopsDevicesPasswordProtectedQUuid]|reply_path %}
						{% set passwordProtectedDevicesReply = replies[passwordProtectedDevicesPath]|reply_str_value %}

						{% if passwordProtectedDevicesReply == uuids.yes_75AUuid %}
							In order to safeguard any data stored on these devices we will make sure accounts are password protected.
						{% elif passwordProtectedDevicesReply == uuids.no_77AUuid %}
							The risk of losing data stored on these devices will not be adequately mitigated as our accounts wont be password protected.
						{% endif %}
					</p>
				{% endif %}
			{% endif %}	

			{# Project data stored in cloud accounts #}
			{% set riskOfInfoLossHintsAndTipsPath = [processOrAnalyseDataPath, uuids.yes_5_2AUuid, uuids.isTheRiskOfInformationLossLeaksAndVandalismAcceptablyLowQUuid, uuids.exploreHintsAndTipsForGoodPractice_5AUuid]|reply_path %}

			{% set doProjectMembersStoreProjectDataInCloudAccountsPath = [riskOfInfoLossHintsAndTipsPath, uuids.doProjectMembersStoreProjectDataInCloudAccountsQUuid]|reply_path %}
			{% set doProjectMembersStoreProjectDataInCloudAccountsReply = replies[doProjectMembersStoreProjectDataInCloudAccountsPath]|reply_str_value %}
			{% if doProjectMembersStoreProjectDataInCloudAccountsReply == uuids.no_78AUuid %}
				Project data will not be stored in cloud accounts.
			{% elif doProjectMembersStoreProjectDataInCloudAccountsReply == uuids.yesInUkcehOneDriveSharePointTeamsAccountAUuid %}
				Project data will be stored in a UKCEH OneDrive/SharePoint/Teams account.
			{% elif doProjectMembersStoreProjectDataInCloudAccountsReply == uuids.yesInThirdPartyCloudAccountSuchAsDropboxGoogleDriveOrICloudAUuid %}
				Project data will be stored in a third-party cloud account such as Dropbox, Google Drive or iCloud.
			{% endif %}

			{# Project data sent by email #}
			{% set willProjectMembersBeSendingDataByEmailOrOtherMessagingServicesPath = [riskOfInfoLossHintsAndTipsPath, uuids.willProjectMembersBeSendingDataByEmailOrOtherMessagingServicesQUuid]|reply_path %}
			{% set willProjectMembersBeSendingDataByEmailOrOtherMessagingServicesReply = replies[willProjectMembersBeSendingDataByEmailOrOtherMessagingServicesPath]|reply_str_value %}
			{% if willProjectMembersBeSendingDataByEmailOrOtherMessagingServicesReply == uuids.no_79AUuid %}
				Project data will not be sent by email or other messaging services.
			{% elif willProjectMembersBeSendingDataByEmailOrOtherMessagingServicesReply == uuids.yes_76AUuid %}
				Project data will be sent by email or other messaging services.
			{% endif %}

			{# Risk of information loss etc. #}
			{% set genericAndSpecificRisksPath = [transformationAnalysisModellingToolPath, uuids.exploreHintsAndTipsForGoodPractice_5AUuid, uuids.areAllProjectMembersAwareOfTheRisksGenericAndSpecificToTheProjectQUuid]|reply_path %}
			{% set genericAndSpecificRisksReply = replies[genericAndSpecificRisksPath]|reply_str_value %}

			{% if genericAndSpecificRisksReply == uuids.yes_77AUuid %}
				{% set genericAndSpecificRisks = 'All project members are aware of the risks related to information loss and vandalism, and we have ensured they know about the protocols in place to minimise and migitate these risks.' %}
			{% elif genericAndSpecificRisksReply == uuids.no_80AUuid %}
				{% set genericAndSpecificRisks = 'Not all project members are aware of the risks related to information loss and vandalism. This is an inherent risk to the project and we must work to ensure everyone knows about the protocols to minimise and mitigate these risks.' %}
			{% endif %}

			{{genericAndSpecificRisks}}

			{# Impact if info is lost #}
			{% set haveYouConsideredThePossibleImpactToTheProjectOrOrganisationIfInformationIsLostPath = [riskOfInfoLossHintsAndTipsPath, uuids.haveYouConsideredThePossibleImpactToTheProjectOrOrganisationIfInformationIsLostQUuid]|reply_path %}
			{% set haveYouConsideredThePossibleImpactToTheProjectOrOrganisationIfInformationIsLostReply = replies[haveYouConsideredThePossibleImpactToTheProjectOrOrganisationIfInformationIsLostPath]|reply_str_value %}
			{% if haveYouConsideredThePossibleImpactToTheProjectOrOrganisationIfInformationIsLostReply == uuids.no_81AUuid %}

			{% elif haveYouConsideredThePossibleImpactToTheProjectOrOrganisationIfInformationIsLostReply == uuids.yesTheRiskIsAcceptablyLowAUuid %}

			{% elif haveYouConsideredThePossibleImpactToTheProjectOrOrganisationIfInformationIsLostReply == uuids.yesThereAreMitigationMeasuresInPlaceAUuid %}

			{% elif haveYouConsideredThePossibleImpactToTheProjectOrOrganisationIfInformationIsLostReply == uuids.yesWeWillNeedToDevelopMitigationMeasuresAUuid %}

			{% endif %}

			{# Impact if info is leaked #}
			{% set haveYouConsideredThePossibleImpactToTheProjectOrOrganisationIfInformationLeaksPath = [riskOfInfoLossHintsAndTipsPath, uuids.haveYouConsideredThePossibleImpactToTheProjectOrOrganisationIfInformationLeaksQUuid]|reply_path %}
			{% set haveYouConsideredThePossibleImpactToTheProjectOrOrganisationIfInformationLeaksReply = replies[haveYouConsideredThePossibleImpactToTheProjectOrOrganisationIfInformationLeaksPath]|reply_str_value %}
			{% if haveYouConsideredThePossibleImpactToTheProjectOrOrganisationIfInformationLeaksReply == uuids.no_82AUuid %}

			{% elif haveYouConsideredThePossibleImpactToTheProjectOrOrganisationIfInformationLeaksReply == uuids.yesTheRiskIsAcceptablyLow_2AUuid %}

			{% elif haveYouConsideredThePossibleImpactToTheProjectOrOrganisationIfInformationLeaksReply == uuids.yesThereAreMitigationMeasuresInPlace_2AUuid %}

			{% elif haveYouConsideredThePossibleImpactToTheProjectOrOrganisationIfInformationLeaksReply == uuids.yesWeWillNeedToDevelopMitigationMeasures_2AUuid %}

			{% endif %}

			{# Impact if info is vandalised #}
			{% set haveYouConsideredThePossibleImpactToTheProjectOrOrganisationIfInformationIsVandalisedPath = [riskOfInfoLossHintsAndTipsPath, uuids.haveYouConsideredThePossibleImpactToTheProjectOrOrganisationIfInformationIsVandalisedQUuid]|reply_path %}
			{% set haveYouConsideredThePossibleImpactToTheProjectOrOrganisationIfInformationIsVandalisedReply = replies[haveYouConsideredThePossibleImpactToTheProjectOrOrganisationIfInformationIsVandalisedPath]|reply_str_value %}
			{% if haveYouConsideredThePossibleImpactToTheProjectOrOrganisationIfInformationIsVandalisedReply == uuids.no_83AUuid %}

			{% elif haveYouConsideredThePossibleImpactToTheProjectOrOrganisationIfInformationIsVandalisedReply == uuids.yesTheRiskIsAcceptablyLow_3AUuid %}

			{% elif haveYouConsideredThePossibleImpactToTheProjectOrOrganisationIfInformationIsVandalisedReply == uuids.yesThereAreMitigationMeasuresInPlace_3AUuid %}

			{% elif haveYouConsideredThePossibleImpactToTheProjectOrOrganisationIfInformationIsVandalisedReply == uuids.yesWeWillNeedToDevelopMitigationMeasures_3AUuid %}

			{% endif %}



			{# Personal data protection #}
			{% set personalDataProtectionPath = [riskOfInfoLossPath, uuids.exploreHintsAndTipsForGoodPractice_5AUuid, uuids.arePersonalDataSufficientlyProtectedQUuid]|reply_path %}
			{% set personalDataProtectionReply = replies[personalDataProtectionPath]|reply_str_value %}

			{% if personalDataProtectionReply == uuids.weAreNotUsingAnyPersonalInformationAUuid %}
				{% set personalDataProtection = 'We will not be using any personal data information.' %}
			{% elif personalDataProtectionReply == uuids.yesAllPersonalInformationWillBeProcessedInPseudonymisedFormOnlyAUuid %}
				{% set pseudonymisationPath = [personalDataProtectionPath, uuids.yesAllPersonalInformationWillBeProcessedInPseudonymisedFormOnlyAUuid, uuids.howIsPseudonymisationHandledQUuid]|reply_path %}
				{% set pseudonymisationReply = replies[pseudonymisationPath]|reply_str_value %}

				{% if pseudonymisationReply %}
					{% set personalDataProtection = 'All personal information used by this project will be processed in pseudonymised form only, and psuedonymisation ' %}

					{% if pseudonymisationReply == uuids.wePseudonymiseInsideTheProjectOnlyLimitedPeopleCanAccessTheKeysAUuid %}
						{% set pseudonymisation = 'will only be done inside the project, with only a limited number of people having access to security keys.' %}
						{{personalDataProtection}}{{pseudonymisation}}
					{% elif pseudonymisationReply == uuids.pseudonymisationIsHandledByAnIndependentPartyInOrderToAllowDataCouplingAUuid %}
						{% set pseudonymisation = 'will be handled by an independent party in order to allow data coupling.' %}
						{{personalDataProtection}}{{pseudonymisation}}
					{% elif pseudonymisationReply == uuids.weHaveAnotherWayOfPseudonymisationAUuid %}
						{% set pseudonymisation = 'will be done by ' %}

						{% set pseudonymisationOtherPath = [pseudonymisationPath, uuids.weHaveAnotherWayOfPseudonymisationAUuid, uuids.whatWayAreYouPseudonymisingDataQUuid]|reply_path %}
						{% set pseudonymisationOtherReply = replies[pseudonymisationOtherPath]|reply_str_value %}

						{{personalDataProtection}} {{pseudonymisation}} {{pseudonymisationOtherReply}}
					{% endif %}
				{% else %}
					{% set personalDataProtection = 'All personal information used by this project will be processed in pseudonymised form only. We have not yet decided how this process will work.' %}
					{{personalDataProtection}}
				{% endif %}
			{% elif personalDataProtectionReply == uuids.yesAllDataWillBeCollectedAnonymouslyAUuid %}
				{% set personalDataProtection = 'All personal data will be collected anonymously.' %}
				{{personalDataProtection}}
			{% elif personalDataProtectionReply == uuids.yesAllDataWillBeAnonymisedAsEarlyAsPossibleAUuid %}
				{% set personalDataProtection = 'All personal information used in this project will be anonymised as early as possible.' %}
				{{personalDataProtection}}
			{% endif %}


{# This section is marked as NEVER DESRIABLE
		{% set workingWithDataPath = [processOrAnalyseDataPath,uuids.workingWithDataQUuid, uuids.exploreHintsAndTipsForGoodPractice_6AUuid]|reply_path %}

		{% set howAreYourDataStructuredListPath = [workingWithDataPath, uuids.howAreYourDataStructuredQLUuid]|reply_path %}
		{% set howAreYourDataStructuredListReply = replies[howAreYourDataStructuredListPath]|reply_items %}

		{% if howAreYourDataStructuredListReply|length > 0 %}
			<ul>
			{% for itemUuid in howAreYourDataStructuredListReply %}
				{% set selectADataStructurePath = [howAreYourDataStructuredListPath, itemUuid, selectADataStructureQUuid]|reply_path  %}
				{% set selectADataStructureReply = replies[selectADataStructurePath]|reply_str_value %}

			{% endfor %}
		{% endif %}
#} 
		{% endif %}
</div>

{# ---- Section ---- #}

<div class="question">
	<h3>5. Preserving and sharing data </h3>

	{# working with the philosophy 'as open as possible' #}
	{% set workingWithThePhilosophyAsOpenAsPossiblePath = [uuids.preservingAndSharingDataCUuid, uuids.willYouBeWorkingWithThePhilosophyAsOpenAsPossibleForYourDataQUuid]|reply_path %}
	{% set workingWithThePhilosophyAsOpenAsPossibleReply = replies[workingWithThePhilosophyAsOpenAsPossiblePath]|reply_str_value %}

	{# Funder requirement to deposit #}
	{% set funderRequirementToDepositWithRepositoryPath = [uuids.preservingAndSharingDataCUuid, uuids.isThereAFunderRequirementThatAnyOfYourDataAreDepositedWithALongTermRepositoryQUuid]|reply_path %}
	{% set funderRequirementToDepositWithRepositoryReply = replies[funderRequirementToDepositWithRepositoryPath]|reply_str_value %}
	{% if funderRequirementToDepositWithRepositoryReply == uuids.no_6_2AUuid %}
		<p>There is no funder requirement to deposit our data with a long-term repository.</p>
	{% elif funderRequirementToDepositWithRepositoryReply == uuids.yes_6_2AUuid %}
		{% set estimateTheVolumeOfDataYouAreLikelyToBeDepositingWithARepositoryPath = [funderRequirementToDepositWithRepositoryPath, uuids.yes_6_2AUuid, uuids.estimateTheVolumeOfDataYouAreLikelyToBeDepositingWithARepositoryQUuid]|reply_path %}
		{% set estimateTheVolumeOfDataYouAreLikelyToBeDepositingWithARepositoryReply = replies[estimateTheVolumeOfDataYouAreLikelyToBeDepositingWithARepositoryPath]|reply_str_value %}
		{% set estimateTheVolumeOfDataYouAreLikelyToBeDepositingWithARepositoryText = "Estimate of volume of data we are likely to be depositing with a repository: " + km.entities.answers[estimateTheVolumeOfDataYouAreLikelyToBeDepositingWithARepositoryReply].label %}
		<p> {{estimateTheVolumeOfDataYouAreLikelyToBeDepositingWithARepositoryText}} </p>
	{% elif funderRequirementToDepositWithRepositoryReply == uuids.notApplicableNoDataBeingGeneratedAUuid %}
		{# do nothing? #}
	{% endif %}

	{# Can data become open immediately #}
	{% set canAllOfYourDataBecomeCompletelyOpenImmediatelyPath = [uuids.preservingAndSharingDataCUuid, uuids.canAllOfYourDataBecomeCompletelyOpenImmediatelyQUuid]|reply_path %}
	{% set canAllOfYourDataBecomeCompletelyOpenImmediatelyReply = replies[canAllOfYourDataBecomeCompletelyOpenImmediatelyPath]|reply_str_value %}

	{% if canAllOfYourDataBecomeCompletelyOpenImmediatelyReply == uuids.no_107AUuid %}
		{% set canAllOfYourDataBecomeCompletelyOpenImmediatelyText = "Our data cannot become completely open immediately." %}
		<p>{{canAllOfYourDataBecomeCompletelyOpenImmediatelyText}}</p>

		{# are there legals reasons why not #}
		{% set areThereLegalReasonsWhySomeOfYourDataCanNotBeCompletelyOpenPath = [canAllOfYourDataBecomeCompletelyOpenImmediatelyPath, uuids.no_107AUuid, uuids.areThereLegalReasonsWhySomeOfYourDataCanNotBeCompletelyOpenQUuid]|reply_path %}
		{% set areThereLegalReasonsWhySomeOfYourDataCanNotBeCompletelyOpenReply = replies[areThereLegalReasonsWhySomeOfYourDataCanNotBeCompletelyOpenPath]|reply_str_value %}
		{% if areThereLegalReasonsWhySomeOfYourDataCanNotBeCompletelyOpenReply == uuids.no_108AUuid %}
			{% set areThereLegalReasonsWhySomeOfYourDataCanNotBeCompletelyOpenText = "There are no legal reasons why (some of) our data cannot be completely open." %}
			{{areThereLegalReasonsWhySomeOfYourDataCanNotBeCompletelyOpenText}}

		{% elif areThereLegalReasonsWhySomeOfYourDataCanNotBeCompletelyOpenReply == uuids.yes_102AUuid %}
			{% set areThereLegalReasonsWhySomeOfYourDataCanNotBeCompletelyOpenText = "There are legal reasons why (some of) our data cannot be completely open." %}
			{{areThereLegalReasonsWhySomeOfYourDataCanNotBeCompletelyOpenText}}
			
			{# are there privacy reasons #}
			{% set areTherePrivacyReasonsWhyYourDataCanNotBeOpenPath = [areThereLegalReasonsWhySomeOfYourDataCanNotBeCompletelyOpenPath, uuids.yes_102AUuid, uuids.areTherePrivacyReasonsWhyYourDataCanNotBeOpenQUuid]|reply_path %}
			{% set areTherePrivacyReasonsWhyYourDataCanNotBeOpenReply = replies[areTherePrivacyReasonsWhyYourDataCanNotBeOpenPath]|reply_str_value %}
			{% if areTherePrivacyReasonsWhyYourDataCanNotBeOpenReply == uuids.no_113AUuid %}
				{% set areTherePrivacyReasonsWhyYourDataCanNotBeOpenText = "There are no privacy reasons why our data cannot be open." %}
				{{areTherePrivacyReasonsWhyYourDataCanNotBeOpenText}}

			{% elif areTherePrivacyReasonsWhyYourDataCanNotBeOpenReply == uuids.yes_103AUuid %}
				{% set areTherePrivacyReasonsWhyYourDataCanNotBeOpenText = "There are privacy reasons why our data cannot be open." %}
				{{areTherePrivacyReasonsWhyYourDataCanNotBeOpenText}}

				{# are there restrictions on where the data need to be stored #}
				{% set areThereRestrictionsOnWhereTheDataNeedToBeStoredPath = [areTherePrivacyReasonsWhyYourDataCanNotBeOpenPath, uuids.yes_103AUuid, uuids.areThereRestrictionsOnWhereTheDataNeedToBeStoredQUuid ]|reply_path %}
				{% set areThereRestrictionsOnWhereTheDataNeedToBeStoredReply = replies[areThereRestrictionsOnWhereTheDataNeedToBeStoredPath]|reply_str_value %}
				{% if areThereRestrictionsOnWhereTheDataNeedToBeStoredReply == uuids.no_109AUuid %}
					{% set areThereRestrictionsOnWhereTheDataNeedToBeStoredText = "There are no restrictions on where the data need to be stored." %} 
				{% elif areThereRestrictionsOnWhereTheDataNeedToBeStoredReply == uuids.yesTheyMustStayInTheSameCountryAUuid %}
					{% set areThereRestrictionsOnWhereTheDataNeedToBeStoredText = "The data must be stored in the same country." %} 
				{% elif areThereRestrictionsOnWhereTheDataNeedToBeStoredReply == uuids.yesTheyMustStayInTheSameInstituteAUuid %}
					{% set areThereRestrictionsOnWhereTheDataNeedToBeStoredText = "The data must be stored in the same institute." %} 
				{% endif %}
				{{areThereRestrictionsOnWhereTheDataNeedToBeStoredText}}

				{# pseudonymisation #}
				{% set couldPseudonymisationBeUsedToMakeTheDataMoreOpenlyAvailablePath = [areTherePrivacyReasonsWhyYourDataCanNotBeOpenPath, uuids.yes_103AUuid, uuids.couldPseudonymisationBeUsedToMakeTheDataMoreOpenlyAvailableQUuid ]|reply_path %}
				{% set couldPseudonymisationBeUsedToMakeTheDataMoreOpenlyAvailableReply = replies[couldPseudonymisationBeUsedToMakeTheDataMoreOpenlyAvailableQUuid]|reply_str_value %}
				{% if couldPseudonymisationBeUsedToMakeTheDataMoreOpenlyAvailableReply == uuids.no_110AUuid %}
					{% set couldPseudonymisationBeUsedToMakeTheDataMoreOpenlyAvailableText = "Pseudonymisation could not be used to make the data more openly available." %} 
				{% elif couldPseudonymisationBeUsedToMakeTheDataMoreOpenlyAvailableReply == uuids.yes_104AUuid %}
					{% set couldPseudonymisationBeUsedToMakeTheDataMoreOpenlyAvailableText = "Pseudonymisation could be used to make the data more openly available." %} 
				{% endif %}
				{{couldPseudonymisationBeUsedToMakeTheDataMoreOpenlyAvailableText}}

				{# anonymisation #}
				{% set couldAnonymisationBeUsedToMakeTheDataMoreOpenlyAvailablePath = [areTherePrivacyReasonsWhyYourDataCanNotBeOpenPath, uuids.yes_103AUuid, uuids.couldAnonymisationBeUsedToMakeTheDataMoreOpenlyAvailableQUuid ]|reply_path %}
				{% set couldAnonymisationBeUsedToMakeTheDataMoreOpenlyAvailableReply = replies[couldAnonymisationBeUsedToMakeTheDataMoreOpenlyAvailablePath]|reply_str_value %}
				{% if couldAnonymisationBeUsedToMakeTheDataMoreOpenlyAvailableReply == uuids.no_111AUuid %}
					{% set couldAnonymisationBeUsedToMakeTheDataMoreOpenlyAvailableText = "Anonymisation could not be used to make the data more openly available." %} 
				{% elif couldAnonymisationBeUsedToMakeTheDataMoreOpenlyAvailableReply == uuids.yes_105AUuid %}
					{% set couldAnonymisationBeUsedToMakeTheDataMoreOpenlyAvailableText = "Anonymisation could be used to make the data more openly available." %} 
				{% endif %}
				{{couldAnonymisationBeUsedToMakeTheDataMoreOpenlyAvailableText}}

				{# aggregation #}
				{% set couldYouUseDataAggregationToMakeTheDataOpenlyAvailablePath = [areTherePrivacyReasonsWhyYourDataCanNotBeOpenPath, uuids.yes_103AUuid, uuids.couldYouUseDataAggregationToMakeTheDataOpenlyAvailableQUuid ]|reply_path %}
				{% set couldYouUseDataAggregationToMakeTheDataOpenlyAvailableReply = replies[couldYouUseDataAggregationToMakeTheDataOpenlyAvailablePath]|reply_str_value %}
				{% if couldYouUseDataAggregationToMakeTheDataOpenlyAvailableReply == uuids.no_112AUuid %}
					{% set couldYouUseDataAggregationToMakeTheDataOpenlyAvailableText = "Aggregation could not be used to make the data more openly available." %} 
				{% elif couldYouUseDataAggregationToMakeTheDataOpenlyAvailableReply == uuids.yes_106AUuid %}
					{% set couldYouUseDataAggregationToMakeTheDataOpenlyAvailableText = "Aggregation could be used to make the data more openly available." %} 
				{% endif %}
				{{couldYouUseDataAggregationToMakeTheDataOpenlyAvailableText}}
			{% endif %}

			{# IP Reasons #}
			{% set areThereIpReasonsWhyYourDataCanNotBeOpenPath = [areThereLegalReasonsWhySomeOfYourDataCanNotBeCompletelyOpenPath, uuids.yes_102AUuid, uuids.areThereIpReasonsWhyYourDataCanNotBeOpenQUuid]|reply_path %}
			{% set areThereIpReasonsWhyYourDataCanNotBeOpenReply = replies[areThereIpReasonsWhyYourDataCanNotBeOpenPath]|reply_str_value %}

			{% if areThereIpReasonsWhyYourDataCanNotBeOpenReply == uuids.no_116AUuid %}
				{% set areThereIpReasonsWhyYourDataCanNotBeOpenText = "There are no IP reasons why our data can not be open." %}
				{{areThereIpReasonsWhyYourDataCanNotBeOpenText}}
			{% elif areThereIpReasonsWhyYourDataCanNotBeOpenReply == uuids.yes_107AUuid %}
				{% set areThereIpReasonsWhyYourDataCanNotBeOpenText = "There are IP reasons why our data cannot be open." %}
				<p>{{areThereIpReasonsWhyYourDataCanNotBeOpenText}}</p>

				{# Is it clear who owns the data #}
				{% set isItClearWhoOwnsDataAndDocumentsPath = [areThereIpReasonsWhyYourDataCanNotBeOpenPath, uuids.yes_107AUuid, uuids.isItClearWhoOwnsDataAndDocumentsQUuid]|reply_path %}
				{% set isItClearWhoOwnsDataAndDocumentsReply = replies[isItClearWhoOwnsDataAndDocumentsPath]|reply_str_value %}
				{% if isItClearWhoOwnsDataAndDocumentsReply == uuids.no_114AUuid %}
					{% set isItClearWhoOwnsDataAndDocumentsText = "It is not clear who owns the data and documents." %} 
				{% elif isItClearWhoOwnsDataAndDocumentsReply == uuids.yes_108AUuid %}
					{% set isItClearWhoOwnsDataAndDocumentsText = "It is clear who owns the data and documents." %} 
				{% endif %}
				{{isItClearWhoOwnsDataAndDocumentsText}}

				{# will someone be given power to move data after project#}
				{% set willSomeoneBeGivenPowerToMoveDataAfterProjectPath = [areThereIpReasonsWhyYourDataCanNotBeOpenPath, uuids.yes_107AUuid, uuids.willSomeoneBeGivenDecisionPowerToMoveDocumentsOrDataToANewPlaceAfterTheProjectHasFinishedQUuid]|reply_path %}
				{% set willSomeoneBeGivenPowerToMoveDataAfterProjectReply = replies[willSomeoneBeGivenPowerToMoveDataAfterProjectPath]|reply_str_value %}
				{% if willSomeoneBeGivenPowerToMoveDataAfterProjectReply == uuids.no_115AUuid %}
					{% set willSomeoneBeGivenPowerToMoveDataAfterProjectText = "No one will be given decision power to move documents or data to a new place after the project has finished." %} 
				{% elif willSomeoneBeGivenPowerToMoveDataAfterProjectReply == uuids.yes_109AUuid %}
					{% set willSomeoneBeGivenPowerToMoveDataAfterProjectText = "Someone will be given decision power to move documents or data to a new place after the project has finished." %} 
				{% endif %}
				{{willSomeoneBeGivenPowerToMoveDataAfterProjectText}}
			{% endif %}

			{# allowing authenticated access #}
			{% set willYouBeAllowingAuthenticatedAccessToTheDataPath = [areThereLegalReasonsWhySomeOfYourDataCanNotBeCompletelyOpenPath, uuids.yes_102AUuid, uuids.willYouBeAllowingAuthenticatedAccessToTheDataQUuid]|reply_path %}
			{% set willYouBeAllowingAuthenticatedAccessToTheDataReply = replies[willYouBeAllowingAuthenticatedAccessToTheDataPath]|reply_str_value %}
			
			{% if willYouBeAllowingAuthenticatedAccessToTheDataReply == uuids.no_119AUuid %}
				{% set willYouBeAllowingAuthenticatedAccessToTheDataText = "We will not be allowing authenticated access to the data." %}
				{{willYouBeAllowingAuthenticatedAccessToTheDataText}}
			{% elif willYouBeAllowingAuthenticatedAccessToTheDataReply == uuids.yes_110AUuid %}

				{# who will take care of authentication #}
				{% set whoWillTakeCareOfAuthenticationOfPotentialUsersPath = [willYouBeAllowingAuthenticatedAccessToTheDataPath, uuids.yes_110AUuid, uuids.whoWillTakeCareOfAuthenticationOfPotentialUsersQUuid]|reply_path %}
				{% set whoWillTakeCareOfAuthenticationOfPotentialUsersReply = replies[whoWillTakeCareOfAuthenticationOfPotentialUsersPath]|reply_str_value %}
				{% if whoWillTakeCareOfAuthenticationOfPotentialUsersReply == uuids.weWillMakeOtherArrangementsAUuid %}
					{% set whoWillTakeCareOfAuthenticationOfPotentialUsersWhatOtherArrangementsPath = [whoWillTakeCareOfAuthenticationOfPotentialUsersPath, uuids.weWillMakeOtherArrangementsAUuid, uuids.whatOtherArrangements_6QUuid]|reply_path %}
					{% set whoWillTakeCareOfAuthenticationOfPotentialUsersWhatOtherArrangementsReply = replies[whoWillTakeCareOfAuthenticationOfPotentialUsersWhatOtherArrangementsPath]|reply_str_value %}
					{% set whoWillTakeCareOfAuthenticationOfPotentialUsersText = "We will make other arrangements to take care of authentication of potential users:" + whoWillTakeCareOfAuthenticationOfPotentialUsersWhatOtherArrangementsReply %}
				{% else %}
					{% set whoWillTakeCareOfAuthenticationOfPotentialUsersText = km.entities.answers[whoWillTakeCareOfAuthenticationOfPotentialUsersReply].label + " to take care of authentication of potential users." %} 
				{% endif %}
				<p>{{whoWillTakeCareOfAuthenticationOfPotentialUsersText}}</p>

				{# who will take care of authorisation #}
				{% set whoWillTakeCareOfAuthorizationOfPotentialUsersPath = [willYouBeAllowingAuthenticatedAccessToTheDataPath, uuids.yes_110AUuid, uuids.whoWillTakeCareOfAuthorizationOfPotentialUsersQUuid]|reply_path %}
				{% set whoWillTakeCareOfAuthorizationOfPotentialUsersReply = replies[whoWillTakeCareOfAuthorizationOfPotentialUsersPath]|reply_str_value %}

				{% if whoWillTakeCareOfAuthorizationOfPotentialUsersReply == uuids.weWillMakeUseOfAnExistingDataAccessCommitteeAUuid %}
					{% set whoWillTakeCareOfAuthorizationOfPotentialUsersExistingDataAccessCommitteePath = [whoWillTakeCareOfAuthorizationOfPotentialUsersPath, uuids.weWillMakeUseOfAnExistingDataAccessCommitteeAUuid, uuids.whichExistingDataAccessCommitteeQUuid]|reply_path %}
					{% set whoWillTakeCareOfAuthorizationOfPotentialUserssExistingDataAccessCommitteeReply = replies[whoWillTakeCareOfAuthorizationOfPotentialUsersExistingDataAccessCommitteePath]|reply_str_value %}
					{% set whoWillTakeCareOfAuthenticationOfPotentialUsersText = "We will make make use of an existing access committee to take care of authorisation of potential users:" + whoWillTakeCareOfAuthorizationOfPotentialUserssExistingDataAccessCommitteeReply %}
				
				{% elif whoWillTakeCareOfAuthorizationOfPotentialUsersReply == uuids.weWillMakeOtherArrangements_2AUuid %}
					{% set whoWillTakeCareOfAuthorizationOfPotentialUsersWhatOtherArrangementsPath = [whoWillTakeCareOfAuthorizationOfPotentialUsersPath, uuids.weWillMakeOtherArrangements_2AUuid, uuids.whatOtherArrangements_7QUuid]|reply_path %}
					{% set whoWillTakeCareOfAuthorizationOfPotentialUserssWhatOtherArrangementsReply = replies[whoWillTakeCareOfAuthorizationOfPotentialUsersWhatOtherArrangementsPath]|reply_str_value %}
					{% set whoWillTakeCareOfAuthenticationOfPotentialUsersText = "We will make other arrangements to take care of authorisation of potential users:" + whoWillTakeCareOfAuthorizationOfPotentialUserssWhatOtherArrangementsReply %}
				
				{% else %}
					{% set whoWillTakeCareOfAuthenticationOfPotentialUsersText = "Authorisation of potential users: " + km.entities.answers[whoWillTakeCareOfAuthorizationOfPotentialUsersReply].label %} 
				{% endif %}
				<p>{{whoWillTakeCareOfAuthenticationOfPotentialUsersText}}</p>

				{#criteria for application to access the data #}
				{% set areTheCriteriaForApplicationToAccessTheDataOpenlyAvailablePath = [willYouBeAllowingAuthenticatedAccessToTheDataPath, uuids.yes_110AUuid, uuids.areTheCriteriaForApplicationToAccessTheDataOpenlyAvailableQUuid]|reply_path %}
				{% set areTheCriteriaForApplicationToAccessTheDataOpenlyAvailableReply = replies[areTheCriteriaForApplicationToAccessTheDataOpenlyAvailablePath]|reply_str_value %}
				{% if areTheCriteriaForApplicationToAccessTheDataOpenlyAvailableReply == uuids.no_117AUuid %}
					The criteria for application to access the data are not openly available.
				{% elif areTheCriteriaForApplicationToAccessTheDataOpenlyAvailableReply == uuids.yes_111AUuid %}
					The criteria for application to access the data are openly available.
				{% endif %}

				{# auditing for re-use #}
				{% set hasAuditingForTheReUseBeenArrangedPath = [willYouBeAllowingAuthenticatedAccessToTheDataPath, uuids.yes_110AUuid, uuids.hasAuditingForTheReUseBeenArrangedQUuid]|reply_path %}
				{% set hasAuditingForTheReUseBeenArrangedReply = replies[hasAuditingForTheReUseBeenArrangedPath]|reply_str_value %}
				{% if hasAuditingForTheReUseBeenArrangedReply == uuids.no_118AUuid %}
					Auditing for the re-use has not been been arranged.
				{% elif hasAuditingForTheReUseBeenArrangedReply == uuids.yes_112AUuid %}
					Auditing for the re-use has been arranged.
				{% endif %}
			{% endif %}
		{% endif %}

		{# are there business reasons why not #}
		{% set areThereBusinessReasonsWhySomeOfYourDataCanNotBeCompletelyOpenPath = [canAllOfYourDataBecomeCompletelyOpenImmediatelyPath, uuids.no_107AUuid, uuids.areThereBusinessReasonsWhySomeOfYourDataCanNotBeCompletelyOpenQUuid]|reply_path %}
		{% set areThereBusinessReasonsWhySomeOfYourDataCanNotBeCompletelyOpenReply = replies[areThereBusinessReasonsWhySomeOfYourDataCanNotBeCompletelyOpenPath]|reply_str_value %}
		{% if areThereBusinessReasonsWhySomeOfYourDataCanNotBeCompletelyOpenReply == uuids.no_120AUuid %}
			There are no business reasons why our data cannot be completely open.
		{% elif areThereBusinessReasonsWhySomeOfYourDataCanNotBeCompletelyOpenReply == uuids.yesPatentsStillNeedToBeAppliedForAUuid %}
			There are business reasons why our data cannot be completely open: Patents need to be applied for.
		{% elif areThereBusinessReasonsWhySomeOfYourDataCanNotBeCompletelyOpenReply == uuids.yesOtherBusinessReasonsAUuid %}
			{% set areThereBusinessReasonsWhySomeOfYourDataCanNotBeCompletelyOpenOtherReasonsPath = [areThereBusinessReasonsWhySomeOfYourDataCanNotBeCompletelyOpenPath, uuids.yesOtherBusinessReasonsAUuid, uuids.whatOtherReasonsQUuid]|reply_path %}
			{% set areThereBusinessReasonsWhySomeOfYourDataCanNotBeCompletelyOpenOtherReasonsReply = replies[areThereBusinessReasonsWhySomeOfYourDataCanNotBeCompletelyOpenOtherReasonsPath]|reply_str_value %}
			There are business reasons why our data cannot be completely open: {{areThereBusinessReasonsWhySomeOfYourDataCanNotBeCompletelyOpenOtherReasonsReply}}.
		{% endif %}


		{# are there other reasons why not #}
		{% set areThereOtherReasonsWhySomeOfYourDataCanNotBeCompletelyOpenPath = [canAllOfYourDataBecomeCompletelyOpenImmediatelyPath, uuids.no_107AUuid, uuids.areThereOtherReasonsWhySomeOfYourDataCanNotBeCompletelyOpenQUuid]|reply_path %}
		{% set areThereOtherReasonsWhySomeOfYourDataCanNotBeCompletelyOpenReply = replies[areThereOtherReasonsWhySomeOfYourDataCanNotBeCompletelyOpenPath]|reply_str_value %}
		{% if areThereOtherReasonsWhySomeOfYourDataCanNotBeCompletelyOpenReply == uuids.no_121AUuid %}
			There are no other reasons why our data can not be completely open.
		{% elif areThereOtherReasonsWhySomeOfYourDataCanNotBeCompletelyOpenReply == uuids.yesPapersNeedToBeSubmittedFirstAUuid %}
			Other reasons why our data can not be completely open: Papers need to be submitted first.
		{% elif areThereOtherReasonsWhySomeOfYourDataCanNotBeCompletelyOpenReply == uuids.yesOtherReasonsAUuid %}
			{% set areThereOtherReasonsWhySomeOfYourDataCanNotBeCompletelyOpenOtherReasonsPath = [areThereOtherReasonsWhySomeOfYourDataCanNotBeCompletelyOpenPath, uuids.yesOtherReasonsAUuid, uuids.whatOtherReasonsAreThereNotToOpenAllDataImmediatelyQUuid]|reply_path %}
			{% set areThereOtherReasonsWhySomeOfYourDataCanNotBeCompletelyOpenOtherReasonsReply = replies[areThereOtherReasonsWhySomeOfYourDataCanNotBeCompletelyOpenOtherReasonsPath]|reply_str_value %}
			Other reasons why our data can not be completely open: {{areThereOtherReasonsWhySomeOfYourDataCanNotBeCompletelyOpenOtherReasonsReply}}.
		{% endif %}

		{# willYouUseALimitedEmbargo #}
		{% set willYouUseALimitedEmbargoPath = [canAllOfYourDataBecomeCompletelyOpenImmediatelyPath, uuids.no_107AUuid, uuids.willYouUseALimitedEmbargoQUuid]|reply_path %}
		{% set willYouUseALimitedEmbargoReply = replies[willYouUseALimitedEmbargoPath]|reply_str_value %}
		{% if willYouUseALimitedEmbargoReply == uuids.noSomeRestrictedDataWillBeEmbargoedIndefinitelyAUuid %}
			<p>Some restricted data will not be released.</p>
		{% elif willYouUseALimitedEmbargoReply == uuids.yesDataThatIsNotLegallyRestrainedWillBeReleasedAfterAFixedTimePeriodUnconditionallyAUuid %}
			<p>Data that are not legally restrained will be released after a fixed time period.</p>
		{% endif %}

	{% elif canAllOfYourDataBecomeCompletelyOpenImmediatelyReply == uuids.yes_101AUuid %}
		<p> All of our data can become completely open immediately.</p>

	{% elif canAllOfYourDataBecomeCompletelyOpenImmediatelyReply == uuids.notApplicableNoDataBeingUsed_2AUuid %}
		{# do nothing? #}
	{% endif %}

	{# willYourResearchDataBePeerReviewedThroughADataJournalQUuid #}
	{% set willYourResearchDataBePeerReviewedThroughADataJournalPath = [uuids.preservingAndSharingDataCUuid, uuids.willYourResearchDataBePeerReviewedThroughADataJournalQUuid]|reply_path %}
	{% set willYourResearchDataBePeerReviewedThroughADataJournalReply = replies[willYourResearchDataBePeerReviewedThroughADataJournalPath]|reply_str_value %}
	{% if willYourResearchDataBePeerReviewedThroughADataJournalReply == uuids.no_7_2AUuid %}
		<p>Our research data will not be peer-reviewed through a data journal.</p>
	{% elif willYourResearchDataBePeerReviewedThroughADataJournalReply == uuids.yes_7_2AUuid %}
		<p>Our research data will be peer-reviewed through a data journal.</p>
	{% elif willYourResearchDataBePeerReviewedThroughADataJournalReply == uuids.notApplicableNoDataBeingUsed_1AUuid %}
		{# do nothing? #}
	{% endif %}


	<h4>5.1 Datasets this project plans to create</h4>
	{% set datasetsPath = [uuids.preservingAndSharingDataCUuid, uuids.datasetsQUuid]|reply_path %}
	{% set datasetsReply = replies[datasetsPath]|reply_str_value %}
	{% if datasetsReply == uuids.iWillNotBeProducingAnyDatasetsAsPartOfThisProjectAUuid %}
		No data will be created by this project.
	{% endif %}

	{% set datasetListPath = [datasetsPath, uuids.specifyAListOfDatasetsYouWillBeProducingAUuid, uuids.listOfDatasetsQLUuid]|reply_path %}	
	{% set datasetListReply = replies[datasetListPath]|reply_items %}
	
	{% if datasetListReply|length > 0 %}
		<p> <span style="color: rgb(46, 77, 127);"> A csv table of datasets listed here will be made available via email after submission.</span></p>

		{# test table #}
{#		
		
		<P style="page-break-before: always">
		

		{% set tableHeaders = ['Title', 'Description', 'License'] %}

		<table>
		<div class = "rotated">
		<thead>
		<tr>
		{% for item in tableHeaders %}
		<th class="c1">{{item}}</th>
		{% endfor %}
		</tr>
		</thead>

		{% for itemUuid in datasetListReply %}
			{% set datasetTitlePath = [datasetListPath, itemUuid, uuids.datasetNameQUuid]|reply_path %}
			{% set datasetTitleReply = replies[datasetTitlePath]|reply_str_value %}
			
			{% set datasetDescriptionPath = [datasetListPath, itemUuid, uuids.datasetDescriptionQUuid]|reply_path %}
			{% set datasetDescriptionReply = replies[datasetDescriptionPath]|reply_str_value %}

			<TR>
			<TD class="c2">{{datasetTitleReply}}</TD>
			<TD class="c2">{{datasetDescriptionReply}}</TD>
			<TD class="c2">OGL etc </TD>
			</TR>
		{% endfor %}
		</div>
		</table>
		<style>
			table, th, td {
				border: 1px solid black;
				border-collapse: collapse;
			}
		</style>

		
		<P style="page-break-before: always">
		
#}
		 {#end of test table #}

		<ul>
		{% for itemUuid in datasetListReply %}

			{% set datasetTitlePath = [datasetListPath, itemUuid, uuids.datasetNameQUuid]|reply_path %}
			{% set datasetTitleReply = replies[datasetTitlePath]|reply_str_value %}
			<p><strong>Dataset working title - </strong>{{datasetTitleReply}}</p>

			{% set datasetDescriptionPath = [datasetListPath, itemUuid, uuids.datasetDescriptionQUuid]|reply_path %}
			{% set datasetDescriptionReply = replies[datasetDescriptionPath]|reply_str_value %}
			<p><strong>Brief description, including format </strong>{{datasetDescriptionReply}}</p>

			{# ID #}
			{% set datasetIDPath = [datasetListPath, itemUuid, uuids.datasetIdentifierIfAnyQUuid]|reply_path %}
			{% set datasetIDReply = replies[datasetIDPath]|reply_str_value %}
			{% if datasetIDReply %}
				{{datasetIDReply}}
			{% else %}
				Dataset identifier not yet known or not given.
			{% endif %}

			{% set datasetLicencePath = [datasetListPath, itemUuid, uuids.whatLicenceSWillTheDatasetBeSharedUnderQLUuid]|reply_path %}
			{% set datasetLicenceListReply = replies[datasetLicencePath]|reply_items %}

			{% if datasetLicenceListReply|length > 0 %}
				<ul>
				{% for itemLicenceUuid in datasetLicenceListReply %}

					{% set datasetLicenceTypePath = [datasetLicencePath, itemLicenceUuid, uuids.licence_1QUuid]|reply_path %}
					{% set datasetLicenceTypeReply = replies[datasetLicenceTypePath]|reply_str_value %}

					<p><strong>Licence: </strong>{{ km.entities.answers[datasetLicenceTypeReply].label }}</p>


					{% if datasetLicenceTypeReply == uuids.theDatasetWillBeAvailableUnderSomeRestrictionsAUuid %}
						{% set datasetLicenceSomeRestrictionsPath = [datasetLicenceTypePath, uuids.theDatasetWillBeAvailableUnderSomeRestrictionsAUuid]|reply_path %}

						{% set whatLicenceConditionsPath = [datasetLicenceSomeRestrictionsPath, uuids.whatConditions_1QUuid]|reply_path %}
						{% set whatLicenceConditionsReply = replies[whatLicenceConditionsPath]|reply_str_value %}
						{% if whatLicenceConditionsReply %}
							{{whatLicenceConditionsReply}}
						{% else %}
							Licence conditions not given.
						{% endif %}

						{% set linkToTheLicenceTextPath = [datasetLicenceSomeRestrictionsPath, uuids.linkToTheLicenceText_1QUuid]|reply_path %}
						{% set linkToTheLicenceTextReply = replies[linkToTheLicenceTextPath]|reply_str_value %}
						{% if linkToTheLicenceTextReply %}
							{{linkToTheLicenceTextReply}}
						{% else %}
							Link to the licence text not given.
						{% endif %}

						{% set howWillReUsersBeAbleToGetAccessPath = [datasetLicenceSomeRestrictionsPath, uuids.howWillReUsersBeAbleToGetAccess_1QUuid]|reply_path %}
						{% set howWillReUsersBeAbleToGetAccessReply = replies[howWillReUsersBeAbleToGetAccessPath]|reply_str_value %}
						{% if howWillReUsersBeAbleToGetAccessReply %}
							<p>Users will get access to the data: {{ km.entities.answers[howWillReUsersBeAbleToGetAccessReply].label }}</p>
						{% else %}
							Details of how users will get access not given.
						{% endif %}

						{% if howWillReUsersBeAbleToGetAccessReply == uuids.throughAnotherProcess_1AUuid %}
							{% set whatProcessPath = [howWillReUsersBeAbleToGetAccessPath, uuids.throughAnotherProcess_1AUuid, uuids.whatProcess_1QUuid]|reply_path %}
							{% set whatProcessReply = replies[whatProcessPath]|reply_str_value %}
							{{whatProcessReply}}

						{% endif %}

						{% set willTheConditionsBePublishedAsPartOfTheMetadataPath = [datasetLicenceSomeRestrictionsPath, uuids.willTheConditionsBePublishedAsPartOfTheMetadata_1QUuid]|reply_path %}
						{% set datasetLicenceSomeRestrictionsReply = replies[willTheConditionsBePublishedAsPartOfTheMetadataPath]|reply_str_value %}
						{% if datasetLicenceSomeRestrictionsReply == uuids.no_145AUuid %}
							<p>The licence conditions will not be published as part of the metadata.</p>
						{% elif datasetLicenceSomeRestrictionsReply == uuids.yes_135AUuid %}
							<p>The licence conditions will be published as part of the metadata.</p>
						{% endif %}
					{% endif %}

					{% set startingDatePath = [datasetLicencePath, itemLicenceUuid, uuids.startingDate_1QUuid]|reply_path %}
					{% set startingDateReply = replies[startingDatePath]|reply_str_value %}
					{% if startingDateReply %}
						<p>Starting date: {{startingDateReply}}</p>
					{% endif %}

				{% endfor %}
				</ul>
			{% endif %}
			
			{% set datasetSizePath = [datasetListPath, itemUuid, uuids.whatIsTheApproximateSizeOfTheDatasetQUuid]|reply_path %}
			{% set datasetSizeReply = replies[datasetSizePath]|reply_str_value %}
			<p><strong>Size/Quantity</strong>
			{% if datasetSizeReply %}{{ km.entities.answers[datasetSizeReply].label }}{% else %}<em>unknown</em>{% endif %}</p>

			{% set datasetOwnerPath = [datasetListPath, itemUuid, uuids.whichOrganisationSHoldTheIntellectualPropertyRightsIprToThisDatasetQUuid]|reply_path %}
			{% set datasetOwnerReply = replies[datasetOwnerPath]|reply_str_value %}
			<p><strong>Data Owner/IPR</strong> {{datasetOwnerReply}}</p>

			{% set doYouConsiderThisToBeEnvironmentalDataOrAnInformationProductPath = [datasetListPath, itemUuid, uuids.doYouConsiderThisToBeEnvironmentalDataOrAnInformationProductQUuid]|reply_path %}
			{% set doYouConsiderThisToBeEnvironmentalDataOrAnInformationProductReply = replies[doYouConsiderThisToBeEnvironmentalDataOrAnInformationProductPath]|reply_str_value %}
			{% if doYouConsiderThisToBeEnvironmentalDataOrAnInformationProductReply %}
				<p><strong>Type of Data</strong> {{ km.entities.answers[doYouConsiderThisToBeEnvironmentalDataOrAnInformationProductReply].label}}</p>
			{% endif %}

			{% set datasetExistingDataPath = [datasetListPath, itemUuid, uuids.areDataDerivedFromExistingDataQUuid]|reply_path %}
			{% set datasetExistingDataReply = replies[datasetExistingDataPath]|reply_str_value %}
			{% if datasetExistingDataReply %}
				<p><strong>Are data derived from existing data? </strong>{{ km.entities.answers[datasetExistingDataReply].label }}</p>
			{% endif %}

			{% set datasetDateGeneratedPath = [datasetListPath, itemUuid, uuids.whatIsTheEstimatedDateForWhenTheDatasetWillBeGeneratedQUuid]|reply_path %}
			{% set datasetDateGeneratedReply = replies[datasetDateGeneratedPath]|reply_str_value %}
			<p><strong>Estimated date data generated</strong>{{datasetDateGeneratedReply}} </p>

			{# Long-term preservation plans (including deposit and access embargo date) #}
			{% set datasetLongTermPlanPath = [datasetListPath, itemUuid, uuids.areThereLongTermPreservationPlansInPlaceForThisDatasetQUuid]|reply_path %}
			{% set datasetLongTermPlanReply = replies[datasetLongTermPlanPath]|reply_str_value %}

			{% set longTermText = 'Long-Term Plan (e.g. archive with the EIDC) ' %}
			{% set depositDateText = 'Deposit date (must be before grant end) ' %}

			{% if datasetLongTermPlanReply == uuids.yesItWillBeSentToARepositoryAUuid %}

				{% set repositoryPath = [datasetLongTermPlanPath, uuids.yesItWillBeSentToARepositoryAUuid, uuids.whatRepositoryWillThisDataBeStoredInQUuid]|reply_path %}
				{% set repositoryReply = replies[repositoryPath]|reply_str_value %}

				{# Deposit date #}
				{% set depositDatePath = [datasetLongTermPlanPath, uuids.yesItWillBeSentToARepositoryAUuid, uuids.whatIsThePlannedDepositDateQUuid]|reply_path %}
				{% set depositDateReply = replies[depositDatePath]|reply_str_value %}
				<strong>{{depositDateText}}</strong> {{depositDateReply}}
				<br><br>

				{# Embargo #}
				{% set depositEmbargoPath = [datasetLongTermPlanPath, uuids.yesItWillBeSentToARepositoryAUuid, uuids.willThereBeAnAccessEmbargoPeriodQUuid]|reply_path %}
				{% set depositEmbargoReply = replies[depositEmbargoPath]|reply_str_value %}
				{% if depositEmbargoReply == uuids.yes_1AUuid %}
					{% set depositEmbargoDatePath = [depositEmbargoPath, uuids.yes_1AUuid, uuids.plannedAccessEmbargoReleaseDateQUuid]|reply_path %}
					{% set depositEmbargoDateReply = replies[depositEmbargoDatePath]|reply_str_value %}
					{% set embargoText = "There will be an access embargo period, ending on " + depositEmbargoDateReply %}
				{% elif depositEmbargoReply == uuids.no_1AUuid %}
					{% set embargoText = "There will be no access embargo period, data will be released immediately after deposit." %}
				{% endif %}	
					<strong>Planned access embargo </strong> {{embargoText}}
				<br><br>				

				{% if repositoryReply %}
					{# Long term plan + repository answer#}
					{#A domain specific repository answer was replaced with "Another repository"#}
					{% if repositoryReply == uuids.aDomainSpecificRepositoryAUuid %}
						{% set repositorySearchPath = [repositoryPath, uuids.aDomainSpecificRepositoryAUuid, uuids.searchAndSelectARepositoryQUuid]|reply_path %}
						{% set repositorySearchReply = replies[repositorySearchPath] %}

						{% set whatTypeOfRepositoryIsThisPath = [repositoryPath, uuids.aDomainSpecificRepositoryAUuid, uuids.whatTypeOfRepositoryIsThisQUuid]|reply_path %}
						{% set whatTypeOfRepositoryIsThisReply = replies[whatTypeOfRepositoryIsThisPath]|reply_str_value %}

						{% set whyHaveYouChosenThisRepositoryPath = [repositoryPath, uuids.aDomainSpecificRepositoryAUuid, uuids.whyHaveYouChosenThisRepositoryQUuid]|reply_path %}
						{% set whyHaveYouChosenThisRepositoryReply = replies[whyHaveYouChosenThisRepositoryPath]|reply_str_value %}

						{% set whyHaveYouChosenThisRepositoryOtherPleaseSpecifyPath = [repositoryPath, uuids.aDomainSpecificRepositoryAUuid, uuids.whyHaveYouChosenThisRepositoryQUuid, uuids.other_1AUuid, uuids.pleaseSpecify_1QUuid]|reply_path %}
						{% set whyHaveYouChosenThisRepositoryOtherPleaseSpecifyReply = replies[whyHaveYouChosenThisRepositoryOtherPleaseSpecifyPath]|reply_str_value %}
						
						{% set datasetLongTermPlan = 'Will be archived with ' %}
						
						{% if repositorySearchReply and whatTypeOfRepositoryIsThisReply and whyHaveYouChosenThisRepositoryReply and whyHaveYouChosenThisRepositoryOtherPleaseSpecifyReply %}
							<strong>{{longTermText}}</strong> {{datasetLongTermPlan}} {{repositorySearchReply.value.value.value}}, {{km.entities.answers[whatTypeOfRepositoryIsThisReply].label|lower}} because {{whyHaveYouChosenThisRepositoryOtherPleaseSpecifyReply}}. 
						{% elif repositorySearchReply and whatTypeOfRepositoryIsThisReply and whyHaveYouChosenThisRepositoryReply %}
							<strong>{{longTermText}}</strong> {{datasetLongTermPlan}} {{repositorySearchReply.value.value.value}}, {{km.entities.answers[whatTypeOfRepositoryIsThisReply].label|lower}}, because {{km.entities.answers[whyHaveYouChosenThisRepositoryReply].label|lower}}. 
						{% else %}
							<strong>{{longTermText}}</strong> {{datasetLongTermPlan}} {{missingInformationText}}. 
						{% endif %}

						{% set willYouContactTheRepositoryBeforehandPath = [repositoryPath, uuids.aDomainSpecificRepositoryAUuid, uuids.willYouContactTheRepositoryBeforehandQUuid]|reply_path %}
						{% set willYouContactTheRepositoryBeforehandReply = replies[willYouContactTheRepositoryBeforehandPath]|reply_str_value %}

						{% if willYouContactTheRepositoryBeforehandReply %}
							{% if willYouContactTheRepositoryBeforehandReply == uuids.noThisSubmissionIsRoutineBothForUsAndTheRepositoryAUuid %}
								 We will not contact the repository beforehand as this is routine for both us and the repository.
							{% elif willYouContactTheRepositoryBeforehandReply == uuids.yesWeHaveContactedTheRepositoryAUuid %}
								We have already contacted the repository.
							{% elif willYouContactTheRepositoryBeforehandReply == uuids.yesWeWillContactTheRepositoryAUuid %}
								 We will contact the repository beforehand.
							{% elif willYouContactTheRepositoryBeforehandReply == uuids.weHaveMadeOtherArrangements_5AUuid %}
								 We have made other arrangements regarding contacting the repository.
							{% endif %}

						{% endif %}
							

					{# Special purpose repository #}	
					{% elif repositoryReply == uuids.aSpecialPurposeRepositoryCreatedForTheProjectAUuid %}
						{% set datasetLongTermPlan = 'Will be archived in a special purpose repository created for the project' %}
						{% set specialRepositoryNamePath = [repositoryPath, uuids.aSpecialPurposeRepositoryCreatedForTheProjectAUuid, uuids.giveTheNameOfTheRepositoryWhenItIsKnownQUuid]|reply_path %}
						{% set specialRepositoryNameReply = replies[specialRepositoryNamePath]|reply_str_value%}
						{% set specialRepositoryUrlPath = [repositoryPath, uuids.aSpecialPurposeRepositoryCreatedForTheProjectAUuid, uuids.giveTheUrlToTheRepositoryWhenItIsKnownQUuid]|reply_path %}
						{% set specialRepositoryUrlReply = replies[specialRepositoryUrlPath]|reply_str_value%}

						<strong>{{longTermText}}</strong> {{datasetLongTermPlan}}. The repository is {{specialRepositoryNameReply}} and can be found at {{specialRepositoryUrlReply}}.
					
					{# One of the NERC data centre options #}	
					{% else %}
						{% set datasetLongTermPlan = 'Will be archived with the ' %}
							<strong>{{longTermText}}</strong> {{datasetLongTermPlan}} {{km.entities.answers[repositoryReply].label}}
					{% endif %} 
				{% endif %}

			{# Plan for local store + location #}	
			{% elif datasetLongTermPlanReply == uuids.yesItWillBeKeptLocallyAUuid %}
				{% set datasetLongTermPlan = 'Will be kept locally' %}
				{% set depositDate = 'NA' %}
				{% set localLocationPath = [datasetLongTermPlanPath, uuids.yesItWillBeKeptLocallyAUuid, uuids.pleaseProvideTheLocalLocationForThisDatasetQUuid]|reply_path %}
				{% set localLocationReply = replies[localLocationPath]|reply_str_value %}
				
				{% set localStorageWhyPath = [datasetLongTermPlanPath, uuids.yesItWillBeKeptLocallyAUuid, uuids.why_1QUuid]|reply_path %}
				{% set localStorageWhyReply = replies[localStorageWhyPath]|reply_str_value %}

				{% set localStorageWhypleaseSpecifyPath = [localStorageWhyPath, uuids.other_2_1AUuid, uuids.pleaseSpecify_2_1QUuid]|reply_path %}
            	{% set localStorageWhypleaseSpecifyReply = replies[localStorageWhypleaseSpecifyPath]|reply_str_value %}

				<p><strong> {{depositDateText}} </strong> {{depositDate}}</p>
				<p><strong>{{longTermText}}</strong> {{datasetLongTermPlan}}</p>
				{% if localLocationReply %}
					<p><strong>Local storage location: </strong> {{localLocationReply}}</p>
				{% else %}
					<p><strong>Local storage location: </strong> {{missingInformationText}}</p>
				{% endif %}

				{% if localStorageWhyReply == (uuids.funderDoesNotAllowDatasetToBeDepositedAUuid or uuids.datasetContainsSensitiveInformationAUuid or uuids.datasetContainsBackgroundIprPreventingDepositAUuid or uuids.datasetContainsConfidentialInformationAUuid) %}
					<p><strong>Reason to store locally </strong> {{km.entities.answers[localStorageWhyReply].label}}</p>
				{% elif localStorageWhyReply == uuids.other_2_1AUuid %}
                	<p><strong>Reason to store locally: </strong> {{localStorageWhypleaseSpecifyReply}}</p>
				{% else %}
					<p><strong>Reason to store locally: </strong> {{missingInformationText}} </p>
				{% endif %}

			{# Not kept in perpetuity and reasons #}	
			{% elif datasetLongTermPlanReply == uuids.noItWillNotBeKeptItInPerpetuityAUuid %}
				{% set datasetLongTermPlan = 'Will not be kept in perpetuity' %}
				{% set depositDate = 'NA' %}
				{% set embargoText = 'NA' %}	
				{% set notKeptWhyPath = [datasetLongTermPlanPath, uuids.noItWillNotBeKeptItInPerpetuityAUuid, uuids.why_4QUuid]|reply_path %}
				{% set notKeptWhyReply = replies[notKeptWhyPath]|reply_str_value %}

				<p><strong> {{depositDateText}} </strong> {{depositDate}}</p>
				<p><strong>Planned access embargo </strong> {{embargoText}}</p>
				<p><strong>{{longTermText}}</strong> {{datasetLongTermPlan}}</p>
				{% if notKeptWhyReply %}
					{% if notKeptWhyReply == uuids.otherReasonS_3AUuid %}
						{% set notKeptWhyPleaseSpecifyPath =  [notKeptWhyPath, uuids.otherReasonS_3AUuid, uuids.pleaseSpecify_5QUuid]|reply_path %}
						{% set notKeptWhyPleaseSpecifyReply = replies[notKeptWhyPleaseSpecifyPath]|reply_str_value%}
						<p><strong>Reason not kept </strong> {{notKeptWhyPleaseSpecifyReply}} </p>
					{% elif notKeptWhyReply == (uuids.datasetIsOfNoLongTermValueAUuid) or (uuids.inadequateAndOrInsufficientFundsOrInfrastructureAUuid) or (uuids.itIsNotAFunderRequirementAUuid) or (theDataCanBeRegeneratedByAModelWithoutSignificantComputingBarriersAUuid) or (theCostOfRegeneratingTheDataDoesNotExceedTheCostOfCurationAUuid) %}
						<p><strong>Reason not kept </strong> {{km.entities.answers[notKeptWhyReply].label}} </p>
					{% else %}
						<p><strong>Reason not kept </strong> <span style="color: red;">Reason not given 2</span>
					{% endif %}

				{% else %}
					<p><strong>Reason not kept </strong> <span style="color: red;">Reason not given</span>
				{% endif %}	
			{% endif %}

			{% set whoInTheProjectIsResponsibleForThisDatasetPath = [datasetListPath, itemUuid, uuids.whoInTheProjectIsResponsibleForThisDatasetQUuid]|reply_path %}
			{% set whoInTheProjectIsResponsibleForThisDatasetReply = replies[whoInTheProjectIsResponsibleForThisDatasetPath]|reply_str_value %}
			{% if whoInTheProjectIsResponsibleForThisDatasetReply %}
				<p><strong>Person Responsible for dataset: </strong> {{whoInTheProjectIsResponsibleForThisDatasetReply}} </p>
			{% endif %}
		
		<hr/>
		{% endfor %}
		</ul>
	{% endif %}

	<h4>5.2 Models this project plans to create</h4>

	{% set modelsPath = [uuids.preservingAndSharingDataCUuid, uuids.modelsQUuid]|reply_path %}
	{% set modelsReply = replies[modelsPath]|reply_str_value%}
	{% if modelsReply == uuids.iWillNotBeProducingModelsAsPartOfThisProjectAUuid %}
		<p>No models will be created by this project.</p>
	{% elif modelsReply == uuids.specifyAListOfModelsYouWillBeProducingAUuid %}	
		<p>The following models will be created by this project:</p>
		{% set modelsListPath = [modelsPath, uuids.specifyAListOfModelsYouWillBeProducingAUuid, uuids.modelListQLUuid]|reply_path %}	
		{% set modelsListReply = replies[modelsListPath]|reply_items %}
		
		{% if modelsListReply|length > 0 %}
			<ul>
			{% for modelItemUuid in modelsListReply %}

				{# Model name #}
				{% set modelsTitlePath = [modelsListPath, modelItemUuid, uuids.modelNameQUuid]|reply_path %}
				{% set modelsTitleReply = replies[modelsTitlePath]|reply_str_value %}
				<p><strong>Model title - </strong>{{modelsTitleReply}}</p>	

				{# Model description #}
				{% set modelsDescriptionPath = [modelsListPath, modelItemUuid, uuids.modelDescriptionQUuid]|reply_path %}
				{% set modelsDescriptionReply = replies[modelsDescriptionPath]|reply_str_value %}
				<p><strong>Brief description </strong>{{modelsDescriptionReply}}</p>

				{# Model identifier DOI #}
				{% set modelsIDPath = [modelsListPath, modelItemUuid, uuids.modelIdentifierIfAnyQLUuid]|reply_path %}
				{% set modelsIDReply = replies[modelsIDPath]|reply_str_value %}
				<p><strong>ID </strong>{{modelsIDReply}}</p>

				{% set modelLicencePath = [modelsListPath, modelItemUuid, uuids.whatLicenceSWillTheModelBeAvailableUnderQLUuid]|reply_path %}
				{% set modelLicenceListReply = replies[modelLicencePath]|reply_items %}

				{% if modelLicenceListReply|length > 0 %}
					<ul>
					{% for itemLicenceUuid in modelLicenceListReply %}

						{% set modelLicenceTypePath = [modelLicencePath, itemLicenceUuid, uuids.licenceQUuid]|reply_path %}
						{% set modelLicenceTypeReply = replies[modelLicenceTypePath]|reply_str_value %}

						<p><strong>Licence: </strong>{{ km.entities.answers[modelLicenceTypeReply].label }}</p>

						{% if modelLicenceTypeReply == uuids.theyWillBeAvailableUnderSomeRestrictionsAUuid %}
							{% set modelLicenceSomeRestrictionsPath = [modelLicenceTypePath, uuids.theyWillBeAvailableUnderSomeRestrictionsAUuid]|reply_path %}

							{% set whatModelLicenceConditionsPath = [modelLicenceSomeRestrictionsPath, uuids.whatConditions_2QUuid]|reply_path %}
							{% set whatModelLicenceConditionsReply = replies[whatModelLicenceConditionsPath]|reply_str_value %}
							<p>Conditions for access to the model: {{whatModelLicenceConditionsReply}}</p>

							{% set linkToTheModelLicenceTextPath = [modelLicenceSomeRestrictionsPath, uuids.linkToTheLicenceTextQUuid]|reply_path %}
							{% set linkToTheModelLicenceTextReply = replies[linkToTheModelLicenceTextPath]|reply_str_value %}
							<p>Link to licence text: {{linkToTheModelLicenceTextReply}}</p>

							{% set howWillReUsersBeAbleToGetAccessToModelPath = [modelLicenceSomeRestrictionsPath, uuids.howWillReUsersBeAbleToGetAccessQUuid]|reply_path %}
							{% set howWillReUsersBeAbleToGetAccessToModelReply = replies[howWillReUsersBeAbleToGetAccessToModelPath]|reply_str_value %}

							{% if howWillReUsersBeAbleToGetAccessToModelReply != uuids.throughAnotherProcessAUuid %}
							<p>Users will get access to the model: {{ km.entities.answers[howWillReUsersBeAbleToGetAccessToModelReply].label }}</p>

							{% elif howWillReUsersBeAbleToGetAccessToModelReply == uuids.throughAnotherProcessAUuid %}
								{% set whatProcessToAccessModelPath = [howWillReUsersBeAbleToGetAccessToModelPath, uuids.throughAnotherProcessAUuid, uuids.whatProcessQUuid]|reply_path %}
								{% set whatProcessToAccessModelReply = replies[whatProcessToAccessModelPath]|reply_str_value %}
								<p>Method by which users will get access to the model: {{whatProcessToAccessModelReply}}</p>

							{% endif %}

							{% set willTheModelLicenceConditionsBePublishedAsPartOfTheMetadataPath = [modelLicenceSomeRestrictionsPath, uuids.willTheConditionsBePublishedAsPartOfTheMetadataQUuid]|reply_path %}
							{% set modelLicenceSomeRestrictionsReply = replies[willTheModelLicenceConditionsBePublishedAsPartOfTheMetadataPath]|reply_str_value %}
							
							{% if modelLicenceSomeRestrictionsReply == uuids.no_128AUuid %}
								<p>The licence conditions will not be published as part of the metadata.</p>
							{% elif modelLicenceSomeRestrictionsReply == uuids.yes_120AUuid %}
								<p>The licence conditions will be published as part of the metadata.</p>
							{% endif %}
						{% endif %}

						{% set startingDateModelPath = [modelLicencePath, itemLicenceUuid, uuids.startingDateQUuid]|reply_path %}
						{% set startingDateModelReply = replies[startingDateModelPath]|reply_str_value %}
						<p>Starting date: {{startingDateModelReply}}</p>

					{% endfor %}
					</ul>
				{% endif %}

				{# Approximate size  #}
				{% set modelsSizePath = [modelsListPath, modelItemUuid, uuids.whatIsTheApproximateSizeOfThisModelAndAssociatedMaterialQUuid]|reply_path %}
				{% set modelsSizeReply = replies[modelsSizePath]|reply_str_value %}
				<p><strong>Size/Quantity</strong>
				{% if modelsSizeReply %}
					{{ km.entities.answers[modelsSizeReply].label }}
				{% else %}
					<em>unknown</em>
				{% endif %}</p>

				{# Data Owner / IPR - needs km update currently empty #}
				{% set modelsOwnerPath = [modelsListPath, modelItemUuid, uuids.whichOrganisationSHoldTheIntellectualPropertyRightsIprToThisModelQUuid]|reply_path %}
				{% set modelsOwnerReply = replies[modelsOwnerPath]|reply_str_value %}
				<p><strong>Model Owner/IPR</strong> {{modelsOwnerReply}}</p>

				{# Is the model derived from existing model(s)#}
				{% set modelsDerivedFromExistingModelsPath = [modelsListPath, modelItemUuid, uuids.isTheModelDerivedFromExistingModelSQUuid]|reply_path %}
				{% set modelsDerivedFromExistingModelsReply = replies[modelsDerivedFromExistingModelsPath]|reply_str_value %}

				{% if modelsDerivedFromExistingModelsReply == uuids.no_2_4AUuid %}
					<p>The model is not derived from existing models</p>
				{% elif modelsDerivedFromExistingModelsReply == uuids.yes_2_4AUuid %}
					<p>The model is derived from existing models</p>
				{% endif %}
				
				{# Estimated date generated #}
				{% set modelsDateGeneratedPath = [modelsListPath, modelItemUuid, uuids.whatIsTheEstimatedDateForWhenTheModelWillBeCreatedQUuid]|reply_path %}
				{% set modelsDateGeneratedReply = replies[modelsDateGeneratedPath]|reply_str_value %}
				<p><strong>Estimated date model generated</strong>{{modelsDateGeneratedReply}} </p>
						
								
				{# Versioning of model  #}
				{% set modelVersionControlPath = [modelsListPath, modelItemUuid, uuids.willYouDepositYourModelInGitHubOrOtherVersionedCodeRepositoryQUuid]|reply_path %}
				{% set modelVersionControlReply = replies[modelVersionControlPath]|reply_str_value %}
				{% if modelVersionControlReply == uuids.no_142AUuid %}
					{% set modelVersionControlText = "This model will not be version controlled on a code repository." %}  
				{% elif  modelVersionControlReply == uuids.yes_132AUuid %}
					{% set modelVersionControlUrlPath = [modelVersionControlPath, uuids.yes_132AUuid, uuids.pleaseProvideTheCompleteUrlToTheCodeRepositoryWhenItIsKnownQUuid]|reply_path %}
					{% set modelVersionControlUrlReply = replies[modelVersionControlUrlPath]|reply_str_value %}
					{% set modelVersionControlText = "This model will be version controlled on a code repository, and can be found here: "+ modelVersionControlUrlReply %}  
				{% endif %}
					<p><strong>Model versioning</strong> {{modelVersionControlText}}</p>

				{# Long term preservation plans #}
				{% set modelsLongTermPlanPath = [modelsListPath, modelItemUuid, uuids.areThereLongTermPreservationPlansInPlaceForThisModelQUuid]|reply_path %}
				{% set modelsLongTermPlanReply = replies[modelsLongTermPlanPath]|reply_str_value %}
				{% set modelsLongTermText = 'Long-Term Plan (e.g. archive with the EIDC) ' %}

				{# Sent to a repository #}
				{% if modelsLongTermPlanReply == uuids.yesItWillBeSentToARepository_2AUuid %}
					{% set modelsRepositoryPath = [modelsLongTermPlanPath, uuids.yesItWillBeSentToARepository_2AUuid, uuids.whatRepositoryWillTheModelBeStoredInQUuid]|reply_path %}
					{% set modelsRepositoryReply = replies[modelsRepositoryPath]|reply_str_value %}
				
					{% if modelsRepositoryReply %}
						{# Long term plan + repository answer#}
						{#A domain specific repository answer was replaced with "Another repository"#}
						{% if modelsRepositoryReply == uuids.aDomainSpecificRepository_2AUuid %}
							{% set modelsRepositorySearchPath = [modelsRepositoryPath, uuids.aDomainSpecificRepository_2AUuid, uuids.searchAndSelectARepository_2QUuid]|reply_path %}
							{% set modelsRepositorySearchReply = replies[modelsRepositorySearchPath] %}

							{% set modelsLongTermPlan = 'The model will be archived with ' %}
								<strong>{{modelsLongTermText}}</strong> {{modelsLongTermPlan}} {{modelsRepositorySearchReply.value.value.value}}

						{# Special purpose repository #}	
						{% elif modelsRepositoryReply == uuids.aSpecialPurposeRepositoryCreatedForTheProject_2AUuid %}

							{% set willYouBeAbleToSupportThisRepositoryForASufficientlyLongTimePath = [modelsRepositoryPath, uuids.aSpecialPurposeRepositoryCreatedForTheProject_2AUuid, uuids.willYouBeAbleToSupportThisRepositoryForASufficientlyLongTime_2QUuid]|reply_path %}
							{% set willYouBeAbleToSupportThisRepositoryForASufficientlyLongTimeReply = replies[willYouBeAbleToSupportThisRepositoryForASufficientlyLongTimePath]|reply_str_value %}
							{% if willYouBeAbleToSupportThisRepositoryForASufficientlyLongTimeReply == uuids.no_127AUuid %}
								{% set modelsSpecialRepositorySupportLevelText = "We will not support this repository for a sufficiently long time" %}
							{% elif willYouBeAbleToSupportThisRepositoryForASufficientlyLongTimeReply == uuids.yes_118AUuid %}
								{% set modelsSpecialRepositorySupportLevelText = "We will support this repository for a sufficiently long time" %}
							{% endif %}

							{% set whatIsTheServiceLevelYouWillBeOfferingUsersOfTheModelRepositoryPath = [modelsRepositoryPath, uuids.aSpecialPurposeRepositoryCreatedForTheProject_2AUuid, uuids.whatIsTheServiceLevelYouWillBeOfferingUsersOfTheModelRepositoryQUuid]|reply_path %}
							{% set whatIsTheServiceLevelYouWillBeOfferingUsersOfTheModelRepositoryReply = replies[whatIsTheServiceLevelYouWillBeOfferingUsersOfTheModelRepositoryPath]|reply_str_value %}
							{% set whatIsTheServiceLevelYouWillBeOfferingUsersOfTheModelRepositoryText = km.entities.answers[whatIsTheServiceLevelYouWillBeOfferingUsersOfTheModelRepositoryReply].label|lower %}

							{% set didYouArrangeForSystemAdminSecurityMaintenanceForServerPath = [modelsRepositoryPath, uuids.aSpecialPurposeRepositoryCreatedForTheProject_2AUuid, uuids.didYouArrangeForSystemAdministrationAtLeastSecurityUpdatesAndHardwareMaintenanceForTheServerSQUuid]|reply_path %}
							{% set didYouArrangeForSystemAdminSecurityMaintenanceForServerReply = replies[didYouArrangeForSystemAdminSecurityMaintenanceForServerPath]|reply_str_value %}
							{% if didYouArrangeForSystemAdminSecurityMaintenanceForServerReply == uuids.notYet_3AUuid %}
								{% set didYouArrangeForSystemAdminSecurityMaintenanceForServerText = "We have not yet arranged for system administration (at least security updates) and hardware maintenance for the server(s)" %}
							{% elif didYouArrangeForSystemAdminSecurityMaintenanceForServerReply == uuids.yes_119AUuid %}
								{% set didYouArrangeForSystemAdminSecurityMaintenanceForServerText = "We have arranged for system administration (at least security updates) and hardware maintenance for the server(s)" %}
							{% endif %}

							{% set modelsLongTermPlan = 'Will be archived in a special purpose repository created for the project' %}
							{% set modelsSpecialRepositoryNamePath = [modelsRepositoryPath, uuids.aSpecialPurposeRepositoryCreatedForTheProject_2AUuid, uuids.giveTheNameOfTheRepositoryWhenItIsKnown_2QUuid]|reply_path %}
							{% set modelsSpecialRepositoryNameReply = replies[modelsSpecialRepositoryNamePath]|reply_str_value%}
							{% set modelsSpecialRepositoryUrlPath = [modelsRepositoryPath, uuids.aSpecialPurposeRepositoryCreatedForTheProject_2AUuid, uuids.giveTheUrlToTheRepositoryWhenItIsKnown_2QUuid]|reply_path %}
							{% set modelsSpecialRepositoryUrlReply = replies[modelsSpecialRepositoryUrlPath]|reply_str_value%}

							<strong>{{modelsLongTermText}}</strong> {{modelsLongTermPlan}}. The repository is {{modelsSpecialRepositoryNameReply}} and can be found at {{modelsSpecialRepositoryUrlReply}}. {{modelsSpecialRepositorySupportLevelText}}. 
							The service level we will offer will be {{whatIsTheServiceLevelYouWillBeOfferingUsersOfTheModelRepositoryText}}. {{didYouArrangeForSystemAdminSecurityMaintenanceForServerText}}.
						
						{# One of the NERC data centre options #}	
						{% else %}
							{% set modelsLongTermPlan = 'Will be archived with the ' %}
								<strong>{{modelsLongTermText}}</strong> {{modelsLongTermPlan}} {{km.entities.answers[modelsRepositoryReply].label}}
						{% endif %} 
					{% endif %}


				{% elif modelsLongTermPlanReply == uuids.yesItWillBeKeptLocally_2AUuid %}
					{% set modelsLongTermPlan = 'Will be kept locally' %}
					{% set modelsLocalLocationPath = [modelsLongTermPlanReply, uuids.yesItWillBeKeptLocally_2AUuid, uuids.pleaseProvideTheLocalLocationForThisModelQUuid]|reply_path %}
					{% set modelsLocalLocationReply = replies[modelsLocalLocationPath]|reply_str_value %}
					{% set modelsLocalStorageWhyPath = [modelsLongTermPlan, uuids.yesItWillBeKeptLocally_2AUuid, uuids.why_2_1QUuid]|reply_path %}
					{% set modelsLocalStorageWhyReply = replies[modelsLocalStorageWhyPath]|reply_str_value %}

					<p><strong>{{modelsLongTermText}}</strong> {{modelsLongTermPlan}}</p>
					<p><strong>Local storage location: </strong> {{modelsLocalLocationReply}}</p>
					{% if modelsLocalStorageWhyReply%}
						<p><strong>Reason to store locally </strong> {{km.entities.answers[modelsLocalStorageWhyReply].label}}</p>
					{% endif %}				
				{% elif modelsLongTermPlanReply == uuids.noItWillNotBeKeptInPerpetuityAUuid %}
					{% set modelsNotKeptWhyPath = [modelsLongTermPlanPath, uuids.noItWillNotBeKeptInPerpetuityAUuid, uuids.why_6QUuid]|reply_path %}
					{% set modelsNotKeptWhyReply = replies[modelsNotKeptWhyPath]|reply_str_value %}

					{% if modelsNotKeptWhyReply == uuids.otherReasonS_5AUuid %}
						{% set modelsPleaseSpecifyPath = [modelsNotKeptWhyPath, uuids.otherReasonS_5AUuid, uuids.pleaseSpecify_9QUuid]|reply_path %}
						{% set modelsPleaseSpecifyReply = replies[modelsPleaseSpecifyPath]|reply_str_value %}
						{% set modelsLongTermPlan = "It will not be kept in perpetuity. " + modelsPleaseSpecifyReply %}
					{% else %}	
						{% set modelsLongTermPlan = "It will not be kept in perpetuity. " + km.entities.answers[modelsNotKeptWhyReply].label %}
					{% endif %}							
					<p><strong>{{modelsLongTermText}}</strong> {{modelsLongTermPlan}}</p>
				{% endif %}

				{# Project staff responsible #}
				{% set modelsResponsiblePersonPath = [modelsListPath, modelItemUuid, uuids.whoInTheProjectIsResponsibleForThisModelQUuid]|reply_path %}
				{% set modelsResponsiblePersonReply = replies[modelsResponsiblePersonPath]|reply_str_value %}
				<p><strong>Project staff responsible</strong> {{modelsResponsiblePersonReply}}</p>	

				<hr/>
			{% endfor %}
		{% endif %}	
		</ul>
	{% endif %}	

	<h4>5.3 Software packages this project plans to create</h4>
	{% set softwarePath = [uuids.preservingAndSharingDataCUuid, uuids.softwarePackagesQUuid]|reply_path %}
	{% set softwareReply = replies[softwarePath]|reply_str_value%}
	{% if softwareReply == uuids.iWillNotBeProducingAnySoftwarePackagesAsPartOfThisProjectAUuid %}
		<p>No software packages will be created by this project.</p>
	{% elif softwareReply == uuids.specifyAListOfSoftwarePackagesYouWillBeProducingAUuid %}	
		{% set softwareListPath = [softwarePath, uuids.specifyAListOfSoftwarePackagesYouWillBeProducingAUuid, uuids.softwarePackagesListQLUuid]|reply_path %}	
		{% set softwareListReply = replies[softwareListPath]|reply_items %}
		
		{% if softwareListReply|length > 0 %}
			<ul>
			{% for itemUuid in softwareListReply %}	
				{# Software name #}
				{% set softwareTitlePath = [softwareListPath, itemUuid, uuids.softwarePackageNameQUuid]|reply_path %}
				{% set softwareTitleReply = replies[softwareTitlePath]|reply_str_value %}
				<p><strong>Software title - </strong>{{softwareTitleReply}}</p>				
				
				{# Software description #}
				{% set softwareDescriptionPath = [softwareListPath, itemUuid, uuids.softwarePackageDescriptionQUuid]|reply_path %}
				{% set softwareDescriptionReply = replies[softwareDescriptionPath]|reply_str_value %}
				<p><strong>Brief description </strong>{{softwareDescriptionReply}}</p>			
				
				{# Software identifier DOI #}
				{% set softwarePackageIdentifierIfAnyPath = [softwareListPath, itemUuid, uuids.softwarePackageIdentifierIfAnyQLUuid]|reply_path %}
				{% set softwarePackageIdentifierIfAnyReply = replies[softwarePackageIdentifierIfAnyPath]|reply_str_value %}
				<p><strong>Software ID: </strong>{{softwarePackageIdentifierIfAnyReply}}</p>

				{# Open source license #}
				{% set softwareLicensePath = [softwareListPath, itemUuid, uuids.willYouBeAddingAnOpenSourceLicenceQUuid]|reply_path %}
				{% set softwareLicenseReply = replies[softwareLicensePath]|reply_str_value %}
				{% if softwareLicenseReply == uuids.no_133AUuid %}
					{% set softwareLicenseText = "We will not be adding an Open Source License" %}
					{% set softwareLicenseWhyNotPath = [softwareLicensePath, uuids.no_133AUuid, uuids.doAnyOfTheFollowingApplyQUuid]|reply_path %}
					{% set softwareLicenseWhyNotReply = replies[softwareLicenseWhyNotPath]|reply_str_value %}
					{% set softwareLicenseInfoText = "because" + softwareLicenseWhyNotReply %}
				{% elif softwareLicenseReply == uuids.yesWeHaveDecidedOnAnOpenSourceLicenceAUuid %}
					{% set softwareLicenseText = "We will be adding an Open Source License" %}
					{% set softwareLicenseWhichPath = [softwareLicensePath, uuids.yesWeHaveDecidedOnAnOpenSourceLicenceAUuid, uuids.whatIsTheLicence_2QUuid]|reply_path %}
					{% set softwareLicenseWhichReply = replies[softwareLicenseWhichPath]|reply_str_value %}
					{% set softwareLicenseInfoText = "We will use " + softwareLicenseWhichReply %}
				{% endif %}		
				<p><strong>Licensing</strong> {{softwareLicenseText}} {{softwareLicenseInfoText}}</p>

				{# Software derived from existing package #}
				{# CURRENT NEVER DESIRABLE
				{% set softwarePackageDerivedFromAnExistingPackagePath = [softwareListPath, itemUuid, uuids.isTheSoftwarePackageDerivedFromAnExistingPackageQUuid]|reply_path %}
				{% set softwarePackageDerivedFromAnExistingPackageReply = replies[softwarePackageDerivedFromAnExistingPackagePath]|reply_str_value %}
				{% if softwarePackageDerivedFromAnExistingPackageReply == uuids.no_5_3AUuid %}
					Software package is derived from an existing package
				{% elif softwarePackageDerivedFromAnExistingPackageReply == uuids.yes_5_3AUuid %}

				{% endif %}
				#}

				
				{# Version control  #}
				{% set softwareVersionControlPath = [softwareListPath, itemUuid, uuids.willYouDepositYourSoftwarePackageInGitHubOrOtherVersionedCodeRepositoryQUuid]|reply_path %}
				{% set softwareVersionControlReply = replies[softwareVersionControlPath]|reply_str_value %}
				{% if softwareVersionControlReply == uuids.no_2_1AUuid %}
					{% set softwareVersionControlText = "We are not using version control for our code." %}
				{% elif softwareVersionControlReply == uuids.yes_2_1AUuid %}
					{% set softwareVersionControlUrlPath = [softwareVersionControlPath, uuids.yes_2_1AUuid, uuids.pleaseProvideTheCompleteUrlToTheCodeRepositoryWhenItIsKnown_2QUuid]|reply_path %}
					{% set softwareVersionControlUrlReply = replies[softwareVersionControlUrlPath]|reply_str_value %}
					{% set softwareVersionControlText = "Our code is version controlled and stored in the following location: " + softwareVersionControlUrlReply %}
				{% endif %}
				<p><strong>Version control</strong> {{softwareVersionControlText}}</p>

				{# Long term preservation plans #}
				{% set softwareLongTermPlanPath = [softwareListPath, itemUuid, uuids.areThereLongTermPreservationPlansInPlaceForThisSoftwarePackageQUuid]|reply_path %}
				{% set softwareLongTermPlanReply = replies[softwareLongTermPlanPath]|reply_str_value %}
				{% set softwareLongTermText = 'Long-Term Plan (e.g. archive with the EIDC) ' %}

				{# Sent to a repository #}
				{% if softwareLongTermPlanReply == uuids.yesItWillBeSentToARepository_3AUuid %}
					{% set softwareRepositoryPath = [softwareLongTermPlanPath, uuids.yesItWillBeSentToARepository_3AUuid, uuids.whatRepositoryWillTheSoftwarePackageBeStoredInQUuid]|reply_path %}
					{% set softwareRepositoryReply = replies[softwareRepositoryPath]|reply_str_value %}
				
				{% if softwareRepositoryReply %}
					{# Long term plan + repository answer#}
					{#A domain specific repository answer was replaced with "Another repository"#}
					{% if softwareRepositoryReply == uuids.aDomainSpecificRepository_3AUuid %}
						{% set softwareRepositorySearchPath = [softwareRepositoryPath, uuids.aDomainSpecificRepository_3AUuid, uuids.searchAndSelectARepository_3QUuid]|reply_path %}
						{% set softwareRepositorySearchReply = replies[softwareRepositorySearchPath] %}

						{% set softwareLongTermPlan = 'Will be archived with ' %}
							<strong>{{softwareLongTermText}}</strong> {{softwareLongTermPlan}} {{softwareRepositorySearchReply.value.value.value}}

					{# Special purpose repository #}	
					{% elif softwareLongTermPlanReply == uuids.aSpecialPurposeRepositoryCreatedForTheProject_3AUuid %}
						{% set softwareLongTermPlan = 'Will be archived in a special purpose repository created for the project' %}
						{% set softwareSpecialRepositoryNamePath = [softwareRepositoryPath, uuids.aSpecialPurposeRepositoryCreatedForTheProject_3AUuid, uuids.giveTheNameOfTheRepositoryWhenItIsKnown_3QUuid]|reply_path %}
						{% set softwareSpecialRepositoryNameReply = replies[softwareSpecialRepositoryNamePath]|reply_str_value%}
						{% set softwareSpecialRepositoryUrlPath = [softwareRepositoryPath, uuids.aSpecialPurposeRepositoryCreatedForTheProject_3AUuid, uuids.giveTheUrlToTheRepositoryWhenItIsKnown_3QUuid]|reply_path %}
						{% set softwareSpecialRepositoryUrlReply = replies[softwareSpecialRepositoryUrlPath]|reply_str_value%}

						<strong>{{softwareLongTermText}}</strong> {{softwareLongTermPlan}}. The repository is {{softwareSpecialRepositoryNameReply}} and can be found at {{softwareSpecialRepositoryUrlReply}}.
					
					{# One of the NERC data centre options #}	
					{% else %}
						{% set softwareLongTermPlan = 'Will be archived with the ' %}
							<strong>{{softwareLongTermText}}</strong> {{softwareLongTermPlan}} {{km.entities.answers[softwareRepositoryReply].label}}
					{% endif %} 
				{% endif %}

				{% elif softwareLongTermPlanReply == uuids.yesItWillBeKeptLocally_3AUuid %}
					{% set softwareLongTermPlan = 'Will be kept locally' %}
					{% set softwareLocalLocationPath = [softwareLongTermPlanPath, uuids.yesItWillBeKeptLocally_3AUuid, uuids.pleaseProvideTheLocalLocationForThisSoftwarePackageQUuid]|reply_path %}
					{% set softwareLocalLocationReply = replies[softwareLocalLocationPath]|reply_str_value %}
					{% set softwareLocalStorageWhyPath = [softwareLongTermPlanPath, uuids.yesItWillBeKeptLocally_3AUuid, uuids.why_3_1QUuid]|reply_path %}
					{% set softwareLocalStorageWhyReply = replies[softwareLocalStorageWhyPath]|reply_str_value %}

					<p><strong>{{softwareLongTermText}}</strong> {{softwareLongTermPlan}}</p>
					<p><strong>Local storage location: </strong> {{softwareLocalLocationReply}}</p>
					{% if softwareLocalStorageWhyReply%}
						<p><strong>Reason to store locally </strong> {{km.entities.answers[softwareLocalStorageWhyReply].label}}</p>
					{% endif %}				
				{% elif softwareLongTermPlanReply == uuids.noItWillNotBeKeptInPerpetuity_2AUuid %}
					{% set softwareNotKeptWhyPath = [softwareLongTermPlanPath, uuids.noItWillNotBeKeptInPerpetuity_2AUuid, uuids.why_8QUuid]|reply_path %}
					{% set softwareNotKeptWhyReply = replies[softwareNotKeptWhyPath]|reply_str_value %}

					{% if softwareNotKeptWhyReply == uuids.otherReasonS_7AUuid %}
						{% set softwarePleaseSpecifyPath = [softwareNotKeptWhyPath, uuids.otherReasonS_7AUuid, uuids.pleaseSpecify_6_1QUuid]|reply_path %}
						{% set softwarePleaseSpecifyReply = replies[softwarePleaseSpecifyPath]|reply_str_value %}
						{% set softwareLongTermPlan = "It will not be kept in perpetuity. " + softwarePleaseSpecifyReply %}
					{% else %}	
						{% set softwareLongTermPlan = "It will not be kept in perpetuity. " + km.entities.answers[softwareNotKeptWhyReply].label %}
					{% endif %}							
					<p><strong>{{softwareLongTermText}}</strong> {{softwareLongTermPlan}}</p>
				{% endif %}

				{% set whoInTheProjectIsResponsibleForThisSoftwarePackagePath = [softwareListPath, itemUuid, uuids.whoInTheProjectIsResponsibleForThisSoftwarePackageQUuid]|reply_path %}
				{% set whoInTheProjectIsResponsibleForThisSoftwarePackageReply = replies[whoInTheProjectIsResponsibleForThisSoftwarePackagePath]|reply_str_value %}
				<p><strong>Person responsible: </strong> {{whoInTheProjectIsResponsibleForThisSoftwarePackageReply}}</p>



				<hr/>				
			{% endfor %}
			</ul>
		{% endif %}
	{% endif %}

	{# Section 4.4 - Physical samples #}
	<h4>5.4 Physical samples this project plans to collect</h4>
	{% set samplesPath = [uuids.preservingAndSharingDataCUuid, uuids.physicalCollectionsAndSamplesQUuid]|reply_path %}
	{% set samplesReply = replies[samplesPath]|reply_str_value%}
	{% if samplesReply == uuids.iWillNotBeProducingAnyPhysicalCollectionsOrSamplesAsPartOfThisProjectAUuid %}
		<p>No physical samples are collected by this project.</p>
	{% elif samplesReply == uuids.specifyAListOfPhysicalSamplesYouWillBeProducingAUuid %}	
		{% set samplesListPath = [samplesPath, uuids.specifyAListOfPhysicalSamplesYouWillBeProducingAUuid, uuids.listOfPhysicalCollectionsQLUuid]|reply_path %}	
		{% set samplesListReply = replies[samplesListPath]|reply_items %}
		
		{% if samplesListReply|length > 0 %}
			<ul>
			{% for itemUuid in samplesListReply %}
				{# Sample name #}
				{% set samplesTitlePath = [samplesListPath, itemUuid, uuids.physicalCollectionNameQUuid]|reply_path %}
				{% set samplesTitleReply = replies[samplesTitlePath]|reply_str_value %}
				<p><strong>Physical samples title - </strong>{{samplesTitleReply}}</p>	

				{# Sample description #}
				{% set samplesDescriptionPath = [samplesListPath, itemUuid, uuids.physicalCollectionDescriptionQUuid]|reply_path %}
				{% set samplesDescriptionReply = replies[samplesDescriptionPath]|reply_str_value %}
				<p><strong>Brief description </strong>{{samplesDescriptionReply}}</p>			
				
				{# Sample date generated #}
				{% set samplesDateGeneratedPath = [samplesListPath, itemUuid, uuids.whatIsTheEstimatedDateForWhenThePhysicalCollectionWillBeAssembledQUuid]|reply_path %}
				{% set samplesDateGeneratedReply = replies[samplesDateGeneratedPath]|reply_str_value %}
				<p><strong>Estimated date samples generated</strong>{{samplesDateGeneratedReply}} </p>
					
				{# Sample Owner/IPR #}
				{% set samplesOwnerPath = [samplesListPath, itemUuid, uuids.whichOrganisationSOwnThePhysicalCollectionQUuid]|reply_path %}
				{% set samplesOwnerReply = replies[samplesOwnerPath]|reply_str_value %}
				<p><strong>Sample Owner/IPR</strong> {{samplesOwnerReply}}</p>

				{# Sample estimated size #}
				{% set samplesSizePath = [samplesListPath, itemUuid, uuids.whatIsTheApproximateSizeOfThePhysicalCollectionQUuid]|reply_path %}
				{% set samplesSizeReply = replies[samplesSizePath]|reply_str_value %}
				{% if samplesSizeReply %}
					<p><strong>Approximate size</strong> {{km.entities.answers[samplesSizeReply].label}}</p>
				{% endif %}

				{# Sample project staff responsible #}
				{% set samplesResponsiblePersonPath = [samplesListPath, itemUuid, uuids.whoInThisProjectWillBeResponsibleForThisPhysicalCollectionQUuid]|reply_path %}
				{% set samplesResponsiblePersonReply = replies[samplesResponsiblePersonPath]|reply_str_value %}
				<p><strong>Project staff responsible</strong> {{samplesResponsiblePersonReply}}</p>			
				
				{# Estimated date samples assembled #}
				{% set samplesDatePath = [samplesListPath, itemUuid, uuids.whatIsTheEstimatedDateForWhenThePhysicalCollectionWillBeAssembledQUuid]|reply_path %}
				{% set samplesDateReply = replies[samplesDatePath]|reply_str_value %}
				<p><strong>Estimated date samples assembled</strong> {{samplesDateReply}}</p>	

				{# Sample preservation plan #}
				{% set samplesLongTermPlanPath = [samplesListPath, itemUuid, uuids.areThereLongTermPreservationPlansInPlaceForThisPhysicalCollectionQUuid]|reply_path %}
				{% set samplesLongTermPlanReply = replies[samplesLongTermPlanPath]|reply_str_value %}

				{% if samplesLongTermPlanReply == uuids.noItWillNotBeKeptItInPerpetuity_2AUuid %}
					{% set samplesLongTermText = "It will not be kept in perpetuity." %}
					{% set whySamplesNotKeptPath = [samplesLongTermPlanPath, uuids.noItWillNotBeKeptItInPerpetuity_2AUuid, uuids.why_9QUuid]|reply_path %}
					{% set whySamplesNotKeptReply = replies[whySamplesNotKeptPath]|reply_str_value %}

					{% if whySamplesNotKeptReply %}
						{% if whySamplesNotKeptReply == uuids.otherReasonS_8AUuid %}
							{% set samplesPleaseSpecifyPath = [whySamplesNotKeptPath, uuids.otherReasonS_8AUuid, uuids.pleaseSpecify_14QUuid]|reply_path %}
							{% set samplesPleaseSpecifyReply = replies[samplesPleaseSpecifyPath]|reply_str_value  %}
							{% set samplesLongTermText = "It will not be kept in perpetuity. " + samplesPleaseSpecifyReply + "."%}
						{% else %}	
							{% set samplesLongTermText = "It will not be kept in perpetuity. " + km.entities.answers[whySamplesNotKeptReply].label %}
						{% endif %}
					{% endif %}

				{% elif samplesLongTermPlanReply == uuids.yesItWillBeStoredAtASpecialisedUkcehFacilityAUuid %}
					{% set samplesLongTermText = "It will be stored at a specialised UKCEH facility." %}

				{% elif samplesLongTermPlanReply == uuids.yesItWillBeArchivedInASpecialisedFacilityAUuid %}
					{% set nameOfFacilityPath = [samplesLongTermPlanPath, uuids.yesItWillBeArchivedInASpecialisedFacilityAUuid, uuids.nameOfFacilityQUuid]|reply_path %}
					{% set nameOfFacilityReply = replies[nameOfFacilityPath]|reply_str_value %}
					{% set lenghtSampleKeptPath = [samplesLongTermPlanPath, uuids.yesItWillBeArchivedInASpecialisedFacilityAUuid, uuids.howLongWillThisCollectionBeKeptQUuid]|reply_path %}
					{% set lenghtSampleKeptReply = replies[lenghtSampleKeptPath]|reply_str_value %}
					{% if lenghtSampleKeptReply == uuids.forAFixedPeriod_4AUuid %}
						{% set specifyLengthKeptPath = [lenghtSampleKeptPath, uuids.forAFixedPeriod_4AUuid, uuids.specifyForHowLongCollectionWillBeKeptQUuid]|reply_path %}
						{% set specifyLengthKeptReply = replies[specifyLengthKeptPath]|reply_str_value %}
						{% set samplesLongTermText = "It will be archived in the following specialised facility: " + nameOfFacilityReply + " and will be kept " + km.entities.answers[lenghtSampleKeptReply].label + " of/until " + specifyLengthKeptReply %}
					{% elif lenghtSampleKeptReply == uuids.asLongAsTechnicallyPossible_4AUuid %}
						{% set samplesLongTermText = "It will be archived in the following specialised facility: " + nameOfFacilityReply + " and will be kept " + km.entities.answers[lenghtSampleKeptReply].label %}
					{% endif %}
				{% endif %}	
				<p><strong>Long term preservation plan</strong> {{samplesLongTermText}}</p>			

			<hr/>	
			{% endfor %}
			</ul>
		{% endif %}
	{% endif %}

	<h4>5.5 Data publication costs </h4>

	{# Will repositories charge #}
	{% set willRepositoriesChargeForServicesPath = [uuids.preservingAndSharingDataCUuid, uuids.willAnyOfTheRepositoriesYouUseChargeYouForTheirServicesQUuid]|reply_path %}
	{% set willRepositoriesChargeForServicesReply = replies[willRepositoriesChargeForServicesPath]|reply_str_value %}

	{% if willRepositoriesChargeForServicesReply == uuids.no_138AUuid %}
		{% set willRepositoriesChargeForServicesText = "None of the repositories we use will charge us for their services." %}
		<p>{{willRepositoriesChargeForServicesText}}</p>
	{% elif willRepositoriesChargeForServicesReply == uuids.yes_129AUuid %}
		{% set howWillYouBePayingForTheseServicesPath = [willRepositoriesChargeForServicesPath, uuids.yes_129AUuid, uuids.howWillYouBePayingForTheseServicesQUuid]|reply_path %}
		{% set howWillYouBePayingForTheseServicesReply = replies[howWillYouBePayingForTheseServicesPath]|reply_str_value %}
 		{% set willRepositoriesChargeForServicesText = "The repositories will be charging for their services." %}

		{% if howWillYouBePayingForTheseServicesReply %}
			{% if howWillYouBePayingForTheseServicesReply == uuids.weWillPayForTheseCostsByOtherMeansAUuid %}
				{% set howWillYouPayForTheCostsOfTheseServicesPath = [howWillYouBePayingForTheseServicesPath,uuids.weWillPayForTheseCostsByOtherMeansAUuid, uuids.howWillYouPayForTheseCostsQUuid]|reply_path %}
				{% set howWillYouPayForTheCostsOfTheseServicesReply = replies[howWillYouPayForTheCostsOfTheseServicesPath]|reply_str_value %}
				{% set willRepositoriesChargeForServicesText =  "The repositories will be charging for their services and we will pay for these costs by " + howWillYouPayForTheCostsOfTheseServicesReply|lower + "." %}
			{% elif howWillYouBePayingForTheseServicesReply == (uuids.weHaveBudgetedForTheseCostsInTheProjectAUuid) or (uuids.theseCostsWillBeCarriedByOneOfTheDepartmentsInvolvedInTheProjectAUuid) or (uuids.theseCostsWillBeCarriedByOneOfTheInstitutesInvolvedInTheProjectAUuid) %}
				{% set willRepositoriesChargeForServicesText =  "The repositories will be charging for their services and " + km.entities.answers[howWillYouBePayingForTheseServicesReply].label|lower + "." %}
			{% endif %}
		{% endif %}

		<p>{{willRepositoriesChargeForServicesText}}</p>
	{% elif willRepositoriesChargeForServicesReply == uuids.notApplicableWeWontDepositAnyProjectDataAUuid %}
		{# do nothing? #}
	{% endif %}
	
	{# Recurring fees #}
	{% set recurringFeesToKeepDataOrDocumentsAvailablePath = [uuids.preservingAndSharingDataCUuid, uuids.areThereAnyOtherRecurringFeesToKeepDataOrDocumentsAvailableQUuid]|reply_path %}
	{% set recurringFeesToKeepDataOrDocumentsAvailableReply = replies[recurringFeesToKeepDataOrDocumentsAvailablePath]|reply_str_value %}
	{% if recurringFeesToKeepDataOrDocumentsAvailableReply == uuids.no_139AUuid %}
		{% set recurringFeesToKeepDataOrDocumentsAvailableText = "There are no other recurring fees to keep data or documents available." %}
		<p>{{recurringFeesToKeepDataOrDocumentsAvailableText}}</p>
	{% elif recurringFeesToKeepDataOrDocumentsAvailableReply == uuids.yes_130AUuid %}
		{% set recurringFeesToKeepDataOrDocumentsAvailableText = "There are other recurring fees to keep data or documents available." %}
		<p>{{recurringFeesToKeepDataOrDocumentsAvailableText}}</p>
	{% elif recurringFeesToKeepDataOrDocumentsAvailableReply == uuids.notApplicableWeWontDepositAnyProjectData_2AUuid %}
		{# do nothing? #}
	{% endif %}

	{# Time and effort to prepare data #}
	{% set budgetForTheTimeTakenToPrepareDataForPublicationPath = [uuids.preservingAndSharingDataCUuid, uuids.didYouBudgetForTheTimeAndEffortItWillTakeToPrepareTheDataForPublicationQUuid]|reply_path %}
	{% set budgetForTheTimeTakenToPrepareDataForPublicationReply = replies[budgetForTheTimeTakenToPrepareDataForPublicationPath]|reply_str_value %}
	{% if budgetForTheTimeTakenToPrepareDataForPublicationReply == uuids.no_140AUuid %}
		{% set budgetForTheTimeTakenToPrepareDataForPublicationText = "We have not budgeted for the time and effort it will take to prepare the data for publication." %}
		<p>{{budgetForTheTimeTakenToPrepareDataForPublicationText}}</p>
	{% elif budgetForTheTimeTakenToPrepareDataForPublicationReply == uuids.yes_131AUuid %}
		{% set budgetForTheTimeTakenToPrepareDataForPublicationText = "We have budgeted for the time and effort it will take to prepare the data for publication." %}
		<p>{{budgetForTheTimeTakenToPrepareDataForPublicationText}}</p>
	{% elif budgetForTheTimeTakenToPrepareDataForPublicationReply == uuids.notApplicableWeWontDepositAnyProjectData_3AUuid %}
		{# do nothing? #}
	{% endif %}

	{#  data deposited in different repositories can be recognised as belonging to the same study #}
	{% set dataDepositedInDifferentRepositoriesCanBeRecognisedAsSameStudyPath = [uuids.preservingAndSharingDataCUuid, uuids.willYouBeMakingSureThatBlocksOfDataDepositedInDifferentRepositoriesCanBeRecognisedAsBelongingToTheSameStudyQUuid]|reply_path %}
	{% set dataDepositedInDifferentRepositoriesCanBeRecognisedAsSameStudyReply = replies[dataDepositedInDifferentRepositoriesCanBeRecognisedAsSameStudyPath]|reply_str_value %}
	{% if dataDepositedInDifferentRepositoriesCanBeRecognisedAsSameStudyReply == uuids.no_141AUuid %}
		<p> We will not be making sure that blocks of data deposited in different repositories can be recognised as belonging to the same study. </p>

	{% elif dataDepositedInDifferentRepositoriesCanBeRecognisedAsSameStudyReply == uuids.allDataWillBeDepositedInTheSameRepositoryAndLinkedWhereRelevantAUuid %}
		{% set dataDepositedInDifferentRepositoriesCanBeRecognisedAsSameStudyText = km.entities.answers[dataDepositedInDifferentRepositoriesCanBeRecognisedAsSameStudyReply].label + "." %}
		<p> {{dataDepositedInDifferentRepositoriesCanBeRecognisedAsSameStudyText}} </p>

	{% elif dataDepositedInDifferentRepositoriesCanBeRecognisedAsSameStudyReply == uuids.yesAllDatasetsWillHaveLinksToTheRelatedDataAUuid %}
		{% set dataDepositedInDifferentRepositoriesCanBeRecognisedAsSameStudyText = "We will be making sure that blocks of data deposited in different repositories can be recognised as belonging to the same study by linking related data." %}
		<p> {{dataDepositedInDifferentRepositoriesCanBeRecognisedAsSameStudyText}} </p>	

	{% elif dataDepositedInDifferentRepositoriesCanBeRecognisedAsSameStudyReply == uuids.yesAllDatasetsWillBeLinkedFromASingleCatalogEntryAUuid %}
		{% set dataDepositedInDifferentRepositoriesCanBeRecognisedAsSameStudyText = "We will be making sure that blocks of data deposited in different repositories can be recognised as belonging to the same study by linking all datasets from a single catalogue entry." %}
		<p> {{dataDepositedInDifferentRepositoriesCanBeRecognisedAsSameStudyText}} </p>	

	{% elif dataDepositedInDifferentRepositoriesCanBeRecognisedAsSameStudyReply == uuids.yesWeHaveMadeOtherArrangementsAUuid %}
		{% set dataDepositedInDifferentRepositoriesCanBeRecognisedAsSameStudyOtherArrangementsPath = [dataDepositedInDifferentRepositoriesCanBeRecognisedAsSameStudyPath, uuids.yesWeHaveMadeOtherArrangementsAUuid, uuids.whatOtherArrangements_8QUuid]|reply_path %}
		{% set dataDepositedInDifferentRepositoriesCanBeRecognisedAsSameStudyOtherArrangementsReply = replies[dataDepositedInDifferentRepositoriesCanBeRecognisedAsSameStudyOtherArrangementsPath]|reply_str_value %}
		<p> We have made other arrangements to ensure that blocks of data deposited in different repositories can be recognised as belonging to the same study: {{dataDepositedInDifferentRepositoriesCanBeRecognisedAsSameStudyOtherArrangementsReply}} </p>

	{% elif dataDepositedInDifferentRepositoriesCanBeRecognisedAsSameStudyReply == uuids.notApplicableWeWontDepositAnyProjectData_4AUuid %}
		{# do nothing? #}

	{% endif %}




</div>

{# ---- Section 6 ---- #}
<div class="question">
{% if ctx.phaseUuid == "e6b3786d-9246-4179-b78e-d99c8ca9435c" %}
	<h3>6. Project closure </h3>

	{% set projectClosurePath = [uuids.projectClosureCUuid, uuids.canYouConfirmThisProjectHasFinishedQUuid]|reply_path %}
	{% set projectClosureReply = replies[projectClosurePath]|reply_str_value %}

	{% if projectClosureReply == uuids.no_143AUuid %}
		{% set dateExpectProjectToBeCompletedPath = [projectClosurePath, uuids.no_143AUuid, uuids.enterTheDateYouExpectTheProjectToBeCompletedQUuid]|reply_path %}
		{% set dateExpectProjectToBeCompletedReply = replies[dateExpectProjectToBeCompletedPath]|reply_str_value %}
		<p>Project not yet closed.</p>
		Project expected to be completed by {{dateExpectProjectToBeCompletedReply}}

	{% elif projectClosureReply == uuids.yes_133AUuid %}
		
		{% set havePreExistingDataOrModelsBeenDeletedOrMovedToArchivePath = [uuids.projectClosureCUuid, uuids.ifYourProjectUsedPreExistingDataOrModelsHaveTheseBeenDeletedOrMovedToAnArchiveSpaceQUuid]|reply_path %}
		{% set havePreExistingDataOrModelsBeenDeletedOrMovedToArchiveReply = replies[havePreExistingDataOrModelsBeenDeletedOrMovedToArchivePath]|reply_str_value %}

		{% if havePreExistingDataOrModelsBeenDeletedOrMovedToArchiveReply == uuids.no_2_2AUuid %}
			<p>Pre-existing data or models have not yet been deleted or moved to an archive.</p>
		{% elif havePreExistingDataOrModelsBeenDeletedOrMovedToArchiveReply == uuids.yes_2_2AUuid %}
			<p>Pre-existing data or models have been deleted or moved to an archive.</p>
		{% elif havePreExistingDataOrModelsBeenDeletedOrMovedToArchiveReply == uuids.notApplicableWeDidntUseAnyPreExistingDataOrModelsAUuid %}
			{# <p>We didn't use any pre-existing data or models.</p> #} {# could just print nothing here?#}
		{% endif %}


		{% set hasProjectcollectedResearchDataOrToolsPath = [uuids.projectClosureCUuid, uuids.hasYourProjectCollectedOrCreatedAnyResearchDataOrDataRelatedToolsQUuid]|reply_path %}
		{% set hasProjectcollectedResearchDataOrToolsReply = replies[hasProjectcollectedResearchDataOrToolsPath]|reply_str_value %}

		{% if hasProjectcollectedResearchDataOrToolsReply == uuids.no_3_1AUuid %}
			<p>This project has not collected or created any research data or data-related tools.</p>
		{% elif hasProjectcollectedResearchDataOrToolsReply == uuids.yes_3_1AUuid %}
			<p>This project has collected or created research data or data-related tools.</p>

			{% set doesTheListOfDatasetsCoverAllDataGeneratedAndForEachDatasetStateTheOutcomeOfTheLongTermPlanPath = [hasProjectcollectedResearchDataOrToolsPath, uuids.yes_3_1AUuid, uuids.doesTheListOfDatasetsCoverAllDataGeneratedAndForEachDatasetStateTheOutcomeOfTheLongTermPlanQUuid]|reply_path %}
			{% set doesTheListOfDatasetsCoverAllDataGeneratedAndForEachDatasetStateTheOutcomeOfTheLongTermPlanReply = replies[doesTheListOfDatasetsCoverAllDataGeneratedAndForEachDatasetStateTheOutcomeOfTheLongTermPlanPath]|reply_str_value %}

			{% if doesTheListOfDatasetsCoverAllDataGeneratedAndForEachDatasetStateTheOutcomeOfTheLongTermPlanReply == uuids.no_4_1AUuid %}
				<p><b>The project cannot be considered complete as the list of datasets is not complete and up to date</b></p>
			{% elif doesTheListOfDatasetsCoverAllDataGeneratedAndForEachDatasetStateTheOutcomeOfTheLongTermPlanReply == uuids.yes_4_1AUuid %}
				<p>The list of datasets (in Chapter 'Preserving and sharing data') covers all the data generated and, for each dataset, states the outcome of the long-term plan.</p>
			{% endif %}


			{% set areThereConfidentialDataThatRequireOngoingManagementPath = [hasProjectcollectedResearchDataOrToolsPath, uuids.yes_3_1AUuid, uuids.areThereAnyConfidentialSensitiveDataThatCannotBeMadeAccessibleButNeedToBeRetainedAndThereforeRequireOngoingManagementToProtectQUuid]|reply_path %}
			{% set areThereConfidentialDataThatRequireOngoingManagementReply = replies[areThereConfidentialDataThatRequireOngoingManagementPath]|reply_str_value %}

			{% if areThereConfidentialDataThatRequireOngoingManagementReply == uuids.no_5_1AUuid %}
				{# don't need to print anything?#}
			{% elif areThereConfidentialDataThatRequireOngoingManagementReply == uuids.yes_5_1AUuid %}
				<p>There are confidential/sensitive data that cannot be made accessible but need to be retained and therefore require ongoing management to protect.</p>
			{% endif %}

		{% endif %}

		{% set hasYourProjectCreatedAnyModelsPath = [uuids.projectClosureCUuid, uuids.hasYourProjectCreatedAnyModelsOfLongTermValueQUuid]|reply_path %}
		{% set hasYourProjectCreatedAnyModelsReply = replies[hasYourProjectCreatedAnyModelsPath]|reply_str_value %}

		{% if hasYourProjectCreatedAnyModelsReply == uuids.no_6_1AUuid %}
			{# don't need to print anything?#}
		{% elif hasYourProjectCreatedAnyModelsReply == uuids.yes_6_1AUuid %}
			This project has created model(s) of long-term value.

			{% set hasTheListOfModelsBeenUpdatedToStateTheOutcomeOfTheLongTermPlanForEachModelPath = [hasYourProjectCreatedAnyModelsPath, uuids.yes_6_1AUuid, uuids.hasTheListOfModelsBeenUpdatedToStateTheOutcomeOfTheLongTermPlanForEachModelQUuid]|reply_path %}
			{% set hasTheListOfModelsBeenUpdatedToStateTheOutcomeOfTheLongTermPlanForEachModelReply = replies[hasTheListOfModelsBeenUpdatedToStateTheOutcomeOfTheLongTermPlanForEachModelPath]|reply_str_value %}

			{% if hasTheListOfModelsBeenUpdatedToStateTheOutcomeOfTheLongTermPlanForEachModelReply == uuids.no_7_1AUuid %}
				The list of models has <b>not</b> been updated to state the long term plan for each model. <b>The project cannot be considered complete.</b>.
			{% elif hasTheListOfModelsBeenUpdatedToStateTheOutcomeOfTheLongTermPlanForEachModelReply == uuids.yes_7_1AUuid %}
				The list of models has been updated to state the long term plan for each model.
			{% endif %}
		{% endif %}


		{% set hasAllTheDocumentationRelatingToTheDataAndModelsBeenUpdatedAndArchivedToBeRetainedAsAnAuditTrailPath = [uuids.projectClosureCUuid, uuids.hasAllTheDocumentationRelatingToTheDataAndModelsBeenUpdatedAndArchivedToBeRetainedAsAnAuditTrailQUuid]|reply_path %}
		{% set hasAllTheDocumentationRelatingToTheDataAndModelsBeenUpdatedAndArchivedToBeRetainedAsAnAuditTrailReply  = replies[hasAllTheDocumentationRelatingToTheDataAndModelsBeenUpdatedAndArchivedToBeRetainedAsAnAuditTrailPath]|reply_str_value %}

		{% if hasAllTheDocumentationRelatingToTheDataAndModelsBeenUpdatedAndArchivedToBeRetainedAsAnAuditTrailReply == uuids.no_8_1AUuid %}
			<p>The documentation relating to the data and models has <b>not</b> been updated and archived to be retained as an audit trail</p>
		{% elif hasAllTheDocumentationRelatingToTheDataAndModelsBeenUpdatedAndArchivedToBeRetainedAsAnAuditTrailReply == uuids.yes_8_1AUuid %}
			<p>The documentation relating to the data and models has been updated and archived to be retained as an audit trail</p>
		{% elif hasAllTheDocumentationRelatingToTheDataAndModelsBeenUpdatedAndArchivedToBeRetainedAsAnAuditTrailReply == uuids.notApplicableWeDidNotUseAnyDataOrModelsAUuid %}
			{# don't need to print anything?#}
		{% endif %}



	{% endif %}	

{% endif %}	
</div>

 {#<pre>{{ ctx|tojson(2) }}</pre>#}
